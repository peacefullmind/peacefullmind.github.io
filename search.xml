<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS基础</title>
    <url>/2021/09/07/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h1><p>在head中写，内部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&#x27;text/css&#x27;</span>&gt;</span></span><br><span class="line">具体CSS代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>外部样式表<br>内联样式表</p>
<p>三大特征<br>层叠性：<br>css处理冲突的一种能力<br>层叠性只有在多个选择器同时选中同一个标签，然后又设置了相同的属性，才会发生层叠<br>可通过谷歌浏览器开发者工具右边的style标签中查看<br>继承性：<br>给父元素设置一些属性，所有的子元素都可以继承<br>并不是所有的属性都可以继承，只有以color、font-、text-、line开头的属性才可以继承<br>a标签的字体颜色和下划线是不能继承的<br>h标签的文字大小是不能继承的<br>可通过谷歌浏览器开发者工具右边的style标签中查看<br>一般用于设置网页上的一些共性信息，例如网页的文字颜色，字体大小等<br>优先级：<br>当多个选择器同时选中同一个标签，然后又设置了相同的属性，如何层叠就由优先级来确定<br>如果是间接选中（继承），谁离目标标签近就听谁的<br>如果是直接选中，而且选择器类型相同，那么谁写在后面就听谁的<br>如果是直接选中，选择器类型不同，那么就会按照选择器的优先级来层叠：id选择器》类选择器》标签选择器》通配符选择器》继承》浏览器默认</p>
<h1 id="2-常用属性"><a href="#2-常用属性" class="headerlink" title="2.常用属性"></a>2.常用属性</h1><p>margin<br>padding<br>font-size：30px；<br>color:yellow;<br>backgroud-color:</p>
<p>颜色的三种表达方式，rgb三位数255，十六进制，颜色英文名字<br>text-align<br>text-dectoration</p>
<h2 id="2-1-外边距margin"><a href="#2-1-外边距margin" class="headerlink" title="2.1 外边距margin"></a>2.1 外边距margin</h2><p>margin: 20px;（上、下、左、右各20px。）<br>margin: 20px 40px;（上、下20px；左、右40px。）<br>margin: 20px 40px 60px;（上20px；左、右40px；下60px。）<br>margin: 20px 40px 60px 80px;（上20px；右40px；下60px；左80px。）<br>在css中使用margin可以将margin-top，margin-right，margin-bottom，margin-left，缩写为一个标记，顺序为上右下左（顺时针）。</p>
<h2 id="2-2内边距-padding"><a href="#2-2内边距-padding" class="headerlink" title="2.2内边距 padding"></a>2.2内边距 padding</h2><p>length - 以 px、pt、cm 等单位指定内边距<br>% - 指定以包含元素宽度的百分比计的内边距<br>inherit - 指定应从父元素继承内边距</p>
<h2 id="2-3-高度宽度"><a href="#2-3-高度宽度" class="headerlink" title="2.3 高度宽度"></a>2.3 高度宽度</h2><p>height 和 width 属性可设置如下值：</p>
<p>auto - 默认。浏览器计算高度和宽度。<br>length - 以 px、cm 等定义高度/宽度。<br>% - 以包含块的百分比定义高度/宽度。<br>initial - 将高度/宽度设置为默认值。<br>inherit - 从其父值继承高度/宽度。<br>height 和 width 属性不包括内边距、边框或外边距！它们设置的是元素的内边距、边框和外边距内的区域的高度/宽度！</p>
<h2 id="2-4outline"><a href="#2-4outline" class="headerlink" title="2.4outline"></a>2.4outline</h2><p>　和border效果类似，只不过<br> outline是不占空间的，即不会增加额外的宽度（width）或高度（height）</p>
<p>CSS 拥有如下轮廓属性：</p>
<ul>
<li>outline-style</li>
<li>outline-color</li>
<li>outline-width</li>
<li>outline-offset</li>
<li>outline<h2 id="2-5表格"><a href="#2-5表格" class="headerlink" title="2.5表格"></a>2.5表格</h2>为了实现斑马纹表格效果，请使用 nth-child() 选择器，并为所有偶数（或奇数）表行添加 background-color<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">tr:nth-child(even) &#123;background-color: #f2f2f2;&#125;</span><br></pre></td></tr></table></figure>
如果屏幕太小而无法显示全部内容，则响应式表格会显示水平滚动条：<br>在 <table> 元素周围添加带有 overflow-x:auto 的容器元素（例如 <div>），以实现响应式效果：</li>
</ul>
<h1 id="3-CSS选择器"><a href="#3-CSS选择器" class="headerlink" title="3.CSS选择器"></a>3.CSS选择器</h1><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.cont&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在html中是class=‘’</p>
<h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># pd&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在html中是<br>id=‘’</p>
<h2 id="逗号选择器"><a href="#逗号选择器" class="headerlink" title="逗号选择器"></a>逗号选择器</h2><p>是所有涉及到的都增加此样式</p>
<h2 id="空格选择器"><a href="#空格选择器" class="headerlink" title="空格选择器"></a>空格选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div p&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有上下级关系，是div下的p标签</p>
<h2 id="加号选择器"><a href="#加号选择器" class="headerlink" title="加号选择器"></a>加号选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div+p&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>div后面，紧挨其后的p标签</p>
<h2 id="大于号选择器"><a href="#大于号选择器" class="headerlink" title="大于号选择器"></a>大于号选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.uu &gt;p&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父节点的类是uu的p标签<br>大于号选择器是强调父节点的。</p>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>[]<br>方括号里边包属性</p>
<h2 id="属性值选择器"><a href="#属性值选择器" class="headerlink" title="属性值选择器"></a>属性值选择器</h2><p>[属性名=属性值]</p>
<h1 id="4-块元素"><a href="#4-块元素" class="headerlink" title="4.块元素"></a>4.块元素</h1><p>块元素是一个元素，占用了全宽，前后都是换行符。<br>块元素的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt; </span><br><span class="line">&lt;p&gt; </span><br><span class="line">&lt;div&gt; </span><br></pre></td></tr></table></figure>
<h1 id="5-盒子模型"><a href="#5-盒子模型" class="headerlink" title="5.盒子模型"></a>5.盒子模型</h1><p>Margin - 清除边框区域。Margin没有背景颜色，它是完全透明<br>Border - 边框周围的填充和内容。边框是受到盒子的背景颜色影响<br>Padding - 清除内容周围的区域。会受到框中填充的背景颜色影响<br>Content - 盒子的内容，显示文本和图像 </p>
<p>最终元素的总宽度计算公式是这样的：</p>
<p>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p>
<p>元素的总高度最终计算公式是这样的：</p>
<p>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p>
<p>##5.1 position属性</p>
<ul>
<li>static 是默认值。任意 position: static; 的元素不会被特殊的定位。一个 static 元素表示它不会被“positioned”，一个 position 属性被设置为其他值的元素表示它会被“positioned”。</li>
<li>一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。和 relative 一样， top 、 right 、 bottom 和 left 属性都可用。移动浏览器对 fixed 的支持很差。</li>
<li>absolute 是最棘手的position值。 absolute 与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指 position 值不是 static 的元素。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA SE</title>
    <url>/2021/02/13/JAVA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h1><p>编译型语言：C++<br>解释型语言：PYTHON，Ruby,JavaScript<br>JAVA,生成字节码文件，通过JVM（java虚拟机）进行执行该字节码文件，从而实现了跨平台，所有平台上JVM向上提供给字节码文件的接口完全相同，向下提供给不同平台的接口互不相同。</p>
<p>执行程序时，使用了两个命令 javac和java<br>javac命令 后面跟着java文件的文件名 从HelloWorld.java生成了HelloWorld.class，字节码文件<br>java命令 后面跟着类名 【不要加.class】</p>
<h1 id="2-idea-技巧"><a href="#2-idea-技巧" class="headerlink" title="2. idea 技巧"></a>2. idea 技巧</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件名和类名一致,一个源文件中只能有一个 public 类<br>一个源文件可以有多个非 public 类<br>建立project 然后建立moudle</p>
<p>idea快捷键<br>psvm  public static void main(String[] args)<br>sout System.out.println);</p>
<h1 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h1><h2 id="3-1java修饰符"><a href="#3-1java修饰符" class="headerlink" title="3.1java修饰符"></a>3.1java修饰符</h2><p>类本身，方法，变量<br>访问控制修饰符<br>default public protected,private<br>非访问控制修饰符<br>final abstract static  synchronized</p>
<h2 id="3-2构造方法"><a href="#3-2构造方法" class="headerlink" title="3.2构造方法"></a>3.2构造方法</h2><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</p>
<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，<strong>一个类可以有多个构造方法。</strong></p>
<p>方法的调用：<br>静态，非静态</p>
<h1 id="4-leetcode"><a href="#4-leetcode" class="headerlink" title="4.leetcode"></a>4.leetcode</h1><h2 id="4-1数组"><a href="#4-1数组" class="headerlink" title="4.1数组"></a>4.1数组</h2><p>初始化数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] n=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br></pre></td></tr></table></figure>
<p>直接赋值初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] n=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> l=</span><br><span class="line"><span class="keyword">char</span>[][] a=&#123;&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;,&#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>取长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] n=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> l=n.length;</span><br></pre></td></tr></table></figure>

<p>字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;www.runoob.com&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> result = s.charAt(<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 判断是否是回文</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHUI</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = s.length();</span><br><span class="line">	s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (n / <span class="number">2</span> - <span class="number">1</span>); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s.charAt(i) != s.charAt(n - <span class="number">1</span> - i)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全部程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>&#123;</span><br><span class="line">	  <span class="comment">/*</span></span><br><span class="line"><span class="comment">	   * 判断是否是回文</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHUI</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = s.length();</span><br><span class="line">		s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (n / <span class="number">2</span> - <span class="number">1</span>); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s.charAt(i) != s.charAt(n - <span class="number">1</span> - i)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String str1=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">            String str2=<span class="string">&quot;Aa&quot;</span>;</span><br><span class="line">            TEST test=<span class="keyword">new</span> TEST();</span><br><span class="line">            <span class="keyword">boolean</span> b1=test.isHUI(str1);</span><br><span class="line">            <span class="keyword">boolean</span> b2=test.isHUI(str2);</span><br><span class="line">            System.out.println(<span class="string">&quot;结果是:&quot;</span>+(b1?<span class="string">&quot;是&quot;</span>:<span class="string">&quot;否&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;结果是:&quot;</span>+(b2?<span class="string">&quot;是&quot;</span>:<span class="string">&quot;否&quot;</span>));</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">	  &#125;</span><br><span class="line">	  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>格式化代码：右键——Source——Format<br>for循环执行，<br>先初始化，再判断，之后执行循环内的，再执行序号更新。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> [] numbers= &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> x: numbers) &#123;</span><br><span class="line">  <span class="keyword">if</span>(x==<span class="number">20</span>) &#123;</span><br><span class="line">	  <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(x);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JAVA 自带的函数</p>
<p>判断是否是某个类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b=s <span class="keyword">instanceof</span> String;</span><br></pre></td></tr></table></figure>
<p>一个String中遍历出来字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;opanda&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c=s.charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>取字符串的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;opanda&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> n=s.length();</span><br></pre></td></tr></table></figure>
<p>数组的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] b=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> k= b.length;</span><br></pre></td></tr></table></figure>
<p>最长回文子字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TEST2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHUI</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = s.length();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (n / <span class="number">2</span> - <span class="number">1</span>); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s.charAt(i) != s.charAt(n - <span class="number">1</span> - i)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> ns = s.length();</span><br><span class="line">		<span class="keyword">if</span> (ns &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> istart = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> iend = ns;</span><br><span class="line">		<span class="keyword">int</span> longest = ns;</span><br><span class="line">		<span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (longest &gt; <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= f; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> j = f - i;</span><br><span class="line">				String s1 = s.substring(istart + i, iend - j);</span><br><span class="line">				<span class="keyword">if</span> (isHUI(s1)) &#123;</span><br><span class="line">					<span class="keyword">return</span> s1;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			f++;</span><br><span class="line">			longest--;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		String ss;</span><br><span class="line">		ss = String.valueOf(s.charAt(<span class="number">0</span>));</span><br><span class="line">		<span class="comment">// ss=s.charAt(0);</span></span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">&quot;cbbd&quot;</span>;</span><br><span class="line">		<span class="comment">// String ss=s.substring(2,6);</span></span><br><span class="line">		String ss = longestPalindrome(s);</span><br><span class="line"></span><br><span class="line">		System.out.println(ss);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>String切片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s.substring(Math.min(len-<span class="number">3</span>-<span class="number">3</span>*i,<span class="number">0</span>),len-<span class="number">3</span>*i);</span><br><span class="line"><span class="comment">//左边包含，右边不包含在内，如果填入一个参数，则默认到结尾。</span></span><br></pre></td></tr></table></figure>
<p>String拼接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s2&#x3D;temp.concat(s2);</span><br></pre></td></tr></table></figure>
<p>int转String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  s=n+<span class="string">&quot;&quot;</span>;<span class="comment">//n是int值</span></span><br></pre></td></tr></table></figure>
<p>千分位加点的程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TEST2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">thousandSeparator</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        s=n+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> len=s.length();</span><br><span class="line">        <span class="keyword">int</span> Ndot=(len-<span class="number">1</span>)/<span class="number">3</span>;</span><br><span class="line">        String s2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(Ndot&lt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            String temp=s.substring(len-<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Ndot;i++)</span><br><span class="line">             &#123;</span><br><span class="line">                String Sdot=<span class="string">&quot;.&quot;</span>;</span><br><span class="line">                String stemp=Sdot.concat(temp);</span><br><span class="line">                s2=stemp.concat(s2);</span><br><span class="line">                temp=s.substring(Math.max(len-<span class="number">3</span>-<span class="number">3</span>*i,<span class="number">0</span>),len-<span class="number">3</span>*i);</span><br><span class="line">            </span><br><span class="line">             &#125;</span><br><span class="line">            s2=temp.concat(s2);</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String mys=thousandSeparator(<span class="number">1234</span>);</span><br><span class="line">		System.out.print(mys);	</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JS入门</title>
    <url>/2021/04/19/JS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`10+5=<span class="subst">$&#123;num&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN</title>
    <url>/2021/02/13/KNN/</url>
    <content><![CDATA[<p>KNN算法伪代码:</p>
<p>将问题抽象成数据矩阵<br>对于每一个在数据集中的数据点:<br>    计算目标的数据点（需要分类的数据点）与该数据点的距离（需要归一化）<br>    将距离排序: 从小到大<br>    选取前K个最短距离<br>    选取这K个中最多的分类类别<br>    返回该类别来作为目标数据点的预测值</p>
<p>手写数字识别：<br>需要识别的数字是存储在文本文件中的具有相同的色彩和大小: 宽高是 32 像素 * 32 像素的黑白图像。<br>将图像文本数据转换为向量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span>(<span class="params">filename</span>):</span></span><br><span class="line">    returnVect = zeros((<span class="number">1</span>,<span class="number">1024</span>))</span><br><span class="line">    fr = <span class="built_in">open</span>(filename)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        lineStr = fr.readline()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            returnVect[<span class="number">0</span>,<span class="number">32</span>*i+j] = <span class="built_in">int</span>(lineStr[j])</span><br><span class="line">    <span class="keyword">return</span> returnVect</span><br></pre></td></tr></table></figure>
<p>近似误差<br>最小化近似误差，即为使估计值尽量接近真实值，但是这个接近只是对训练样本（当前问题）而言，模型本身并不是最接近真实分布。换一组样本，可能就不近似了。这种只管眼前不顾未来预测的行为，即为过拟合。<br>估计误差<br>最小化估计误差，即为使估计系数尽量接近真实系数，但是此时对训练样本（当前问题）得到的估计值不一定是最接近真实值的估计值；但是对模型本身来说，它能适应更多的问题（测试样本）。<br>近似误差随着假设空间增大而减小，估计误差随着假设空间增大而增大；<br>估计误差不仅与假设空间有关，还与训练集的大小有关，训练集越大则找到的经验风险最小化函数性能越好；<br>近似误差则单纯与假设空间有关。<br>对于这个训练集而言，其实选择3次多项式来作为预测模型是与实际模型最符合的，可是当选择9次多项式的话（对应k值越小），虽然对训练集的预测非常准确（近似误差越小），但是这是一个明显的过度拟合问题（overfitting），得出的预测模型的估计误差相对于3次多项式其实是更大<br>在这个k临近法中其实设定的k值越小，得出的模型是越复杂的，因为k值越小会导致特征空间被划分成更多的子空间（可以理解为模型的项越多）。而k值越大得到的模型其实是越简单的–所以当k值越小，对于训练集的预测更加精确，近似误差会越小（因为你选择了更加复杂的模型去预测训练集）。当k值越大，对于训练集的预测则不会那么准确，所以近似误差会越大（因为你选择了更加简单的模型去预测）。</p>
<p>太大太小都不太好，可以用交叉验证（cross validation）来选取适合的k值。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机器学习算法</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB基础</title>
    <url>/2021/02/13/MATLAB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="公式表示方式"><a href="#公式表示方式" class="headerlink" title="公式表示方式"></a>公式表示方式</h1><p>反tan函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x</span><br><span class="line">y=<span class="built_in">atan</span>(x);</span><br></pre></td></tr></table></figure>
<ul>
<li>inf 无限大</li>
<li>exp 指数</li>
<li>logM(N) 对数函数</li>
<li>eps 计算机识别的最小数</li>
<li>abs(x) 绝对值</li>
<li>acos(x)反余弦</li>
<li>asin(x)</li>
<li>atan(x)</li>
<li>angle(x)计算复数x的幅角</li>
<li>mod(x，y)余数</li>
<li>int2str<h1 id="常用符号运算"><a href="#常用符号运算" class="headerlink" title="常用符号运算"></a>常用符号运算</h1>用sym，syms 声明一个或多个符号</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">syms a b c d</span><br><span class="line">A=sym([a b;c d])</span><br></pre></td></tr></table></figure>
<ul>
<li>subs 符号替换</li>
<li>factor 因式分解</li>
<li>expand 多项式展开</li>
<li>collect 合并同类项</li>
<li>simple 简化函数</li>
<li>numden 分式通分</li>
<li>limit 计算极限</li>
<li>diff() 导数</li>
<li>int 积分</li>
<li>symsum求和</li>
<li>finverse 反函数<h1 id="多项式展开"><a href="#多项式展开" class="headerlink" title="多项式展开"></a>多项式展开</h1></li>
</ul>
<h1 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h1><p>一阶导数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms x </span><br><span class="line">f=(x+<span class="number">7</span>)^<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">mdf=diff(f,x)</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">ezplot(f)</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">ezplot(mdf)</span><br></pre></td></tr></table></figure>
<p><img src="tu%E6%B1%82%E5%AF%BC%E4%B8%80%E9%98%B6%E5%AF%BC%E6%95%B0.jpg"><br>二阶导数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">mdf=diff(f,x，<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>ezplot即：Easy to use function plotter。它是一个易用的一元函数绘图函数 。特别是在绘制含有符号变量的函数的图像时，ezplot要比plot更方便。因为plot绘制图形时要指定自变量的范围，而ezplot无需数据准备，直接绘出图形。</p>
<h2 id="注释和反注释"><a href="#注释和反注释" class="headerlink" title="注释和反注释"></a>注释和反注释</h2><p>ctrl+R<br>ctrl+T</p>
<h1 id="求解微分方程"><a href="#求解微分方程" class="headerlink" title="求解微分方程"></a>求解微分方程</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">syms x y;</span><br><span class="line">y=dsolve(<span class="string">&#x27;Dy+2*x*y=x*exp(-x^2)&#x27;</span>,<span class="string">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>求解在初始条件下的特解</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">syms x y;</span><br><span class="line">y=dsolve(<span class="string">&#x27;x*Dy+y-exp(x)=0&#x27;</span>,<span class="string">&#x27;y(1)=2*exp(1)&#x27;</span>,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ezplot(y)</span><br></pre></td></tr></table></figure>
<h1 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%y=x</span></span><br><span class="line">clear;clc;</span><br><span class="line">syms x</span><br><span class="line">y=x;</span><br><span class="line">int(y)</span><br><span class="line"><span class="comment">%int(y,x)</span></span><br><span class="line"></span><br><span class="line">syms a t</span><br><span class="line">f=a*<span class="built_in">sin</span>(<span class="built_in">pi</span>*t);</span><br><span class="line">int(f,t)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">syms t x</span><br><span class="line">f=x*<span class="built_in">sin</span>(x*t);</span><br><span class="line"><span class="comment">%求在区间上的定积分</span></span><br><span class="line">mf=int(f,x,<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>int(f,x,a,b) 求f(x)在区间a,b上的定积分</li>
<li>int(f,a,b) 求f(x)在区间a,b上的定积分,对默认自变量</li>
<li>int(f,x) 求f(x)的不定积分</li>
</ul>
<p>int的积分可以是定积分，也可以是不定积分（即有没有积分上下限都可以积）可以得到解析的解，<br>quad是数值积分，它版只能是定积分（就是有积分上下限的积分），它是通过simpson数值积分来求得的（并不是通过解析的方法得到解析解，再将上下限代入，而是用小梯形的面积求和得到的）</p>
<h2 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h2><p>z=trapz(x,y) 用梯形法求解y对x的积分值</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">y=inline(<span class="string">&#x27;sin(x)&#x27;</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">q=quad(y,<span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>注意点乘，要不然报错</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">y=inline(<span class="string">&#x27;exp(-0.5.*x).*sin(x+pi/6)&#x27;</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">S=quad(y,<span class="number">0</span>,<span class="number">3</span>*<span class="built_in">pi</span>)</span><br></pre></td></tr></table></figure>


<h2 id="二重积分"><a href="#二重积分" class="headerlink" title="二重积分"></a>二重积分</h2><p>设二重积分还是表达式为 z=z(x,y)，积知分域为下限 y1(x) 上限 y2(x)，从 x1 到 x2，则二重积分道代码为：<br>int(int(z,y,y1,y2),x,x1,x2)<br>需要先定义符号回变量 x，y，以及表达式 z，y1，y2 和数值 x1，x2 的值。<br>下面举例在半径为1，以原点为圆心的圆上，对 z=x^2+y^2+xy 做二重积分：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms x y;</span><br><span class="line">z=x^<span class="number">2</span>+y^<span class="number">2</span>+x*y;</span><br><span class="line">y1=-(<span class="number">1</span>-x^<span class="number">2</span>)^<span class="number">0.5</span>;</span><br><span class="line">y2=(<span class="number">1</span>-x^<span class="number">2</span>)^<span class="number">0.5</span>;</span><br><span class="line">x1=<span class="number">-1</span>;</span><br><span class="line">x2=<span class="number">1</span>;</span><br><span class="line">int((int(z,y,y1,y2)),x,x1,x2)</span><br></pre></td></tr></table></figure>
<h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><p>yi=interp1(x1,y1,xi,’linear’)<br>‘cubic’三次插值<br>一元插值 x1 y1是实测节点数据，</p>
<h1 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h1><h2 id="采用cftool-工具箱进行拟合"><a href="#采用cftool-工具箱进行拟合" class="headerlink" title="采用cftool 工具箱进行拟合"></a>采用cftool 工具箱进行拟合</h2><p>拟合的函数类型<br>-Polynomial 多项式拟合</p>
<ul>
<li>Exponential 指数逼近</li>
<li>Fourier 傅里叶逼近</li>
<li> Gaussian：高斯逼近</li>
<li> Interpolant：插值逼近</li>
<li> Power：幂逼近</li>
<li> Sum of Sin Functions 正弦曲线逼近</li>
<li> Weibull</li>
</ul>
<p>结果解释<br>-SSE 标准差</p>
<ul>
<li>RMSE 均方差</li>
<li>R square称为方程的确定系数，0~1之间，越接近1，表明方程的变量对y的解释能力越强。</li>
</ul>
<p>然后在Curve Fitting Tool窗口中点击 “ \ File \ Generate M-file “ 即可生成能直接曲线拟合的m函数文件<br>cftool工具箱只能进行单个变量的曲线拟合</p>
<h2 id="多项式拟合polyfit"><a href="#多项式拟合polyfit" class="headerlink" title="多项式拟合polyfit"></a>多项式拟合polyfit</h2><p>p=polyfit(x1,y1,n)<br>yi=polyval(p,xi)<br>多项式曲线求值函数polyval</p>
<h2 id="线性拟合函数regress"><a href="#线性拟合函数regress" class="headerlink" title="线性拟合函数regress"></a>线性拟合函数regress</h2><h2 id="用inline函数进行非线性拟合：求解自定义函数的参数值"><a href="#用inline函数进行非线性拟合：求解自定义函数的参数值" class="headerlink" title="用inline函数进行非线性拟合：求解自定义函数的参数值"></a>用inline函数进行非线性拟合：求解自定义函数的参数值</h2><p>需已知或者猜测出函数的表达式，只是不知道参数怎么求</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">x=[<span class="number">0</span>,<span class="number">47</span>,<span class="number">93</span>,<span class="number">140</span>,<span class="number">186</span>,<span class="number">279</span>,<span class="number">372</span>,<span class="number">465</span>,<span class="number">558</span>,<span class="number">651</span>];</span><br><span class="line">y=[<span class="number">18.98</span>,<span class="number">27.35</span>,<span class="number">34.86</span>,<span class="number">38.52</span>,<span class="number">38.44</span>,<span class="number">37.73</span>,<span class="number">38.43</span>,<span class="number">43.87</span>,<span class="number">42.77</span>,<span class="number">46.22</span>];</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">achushi=[<span class="number">43</span> <span class="number">0.6</span> <span class="number">0.1</span>];</span><br><span class="line"><span class="comment">%inline用法：fun=inline(&#x27;f(x)&#x27;,&#x27;参变量数组&#x27;,&#x27;自变量&#x27;)</span></span><br><span class="line"><span class="comment">%matlab中inline函数在matlab命令窗口、程序或函数中创建局部函数时，可用inline。优点</span></span><br><span class="line"><span class="comment">%是不必将其储存为一个单独文件。  inline是用百来定义内联函数的</span></span><br><span class="line"><span class="comment">%自变量，可以是多个自变量，多元</span></span><br><span class="line">mfun=inline(<span class="string">&#x27;a(1)*(1-a(2)*exp(-a(3)*x))&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="comment">%nlinfit用法：[beta,r,J]=nlinfit(x,y,fun,beta0)</span></span><br><span class="line"><span class="comment">% x,y未原始数据离散点数组</span></span><br><span class="line"><span class="comment">%fun是上一步定义好的函数</span></span><br><span class="line"><span class="comment">%beta0参数的初始值，已知给定</span></span><br><span class="line"><span class="comment">%beta需要求解决参数的最优值</span></span><br><span class="line"><span class="comment">%J是雅可比矩阵</span></span><br><span class="line">[a,r,<span class="built_in">j</span>]=nlinfit(x,y,mfun,achushi)</span><br></pre></td></tr></table></figure>
<p>总结<br>配曲线的一般方法是：<br>（一）先对两个变量x和y作n次试验观察，画出散点图。<br>（二）根据散点图确定须配曲线的类型。<br>通常选择的六类曲线如下：<br>（1）双曲线1/y=a+b/x<br>（2）幂函数曲线y=ax^b，其中x&gt;0，a&gt;0<br>（3）指数曲线y=aexp(bx)其中参数a&gt;0.<br>（4）倒指数曲线y=aexp(b/x)其中a&gt;0，<br>（5）对数曲线y=a+blogx，x&gt;0<br>（6）S型曲线y=1/（a+bexp(-x)）<br>（三）然后由n对试验数据确定每一类曲线的未知参数a和b。</p>
<h1 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h1><h2 id="disp函数"><a href="#disp函数" class="headerlink" title="disp函数"></a>disp函数</h2><h2 id="fprint函数"><a href="#fprint函数" class="headerlink" title="fprint函数"></a>fprint函数</h2>]]></content>
  </entry>
  <entry>
    <title>Pycharm快捷键</title>
    <url>/2021/02/13/PYcharm%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>ctrl+alt+L，             格式化代码<br>找到菜单栏的“Code”,点击一下“Reformat Code”就能自动地将代码进行规范化处理。<br>ctrl+shift+f10          运行当前文件<br>shift+enter             另起一行，光标在行内任意位置都能另起一行，且不破坏当行结构<br>ctrl+p                       调用方法时查看参数，在括号内按下，就知道当前位置该给啥参数<br>shift+tab                取消缩进</p>
<p>ctrl+B 转到方法定义处</p>
<p>快速修改同一个变量或类<br>我们只需要选中需要重新命名的变量或类，右键弹出选项中选择Refactor,然后点击Rename，就可以进行全局修改了。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>SVM算法</title>
    <url>/2021/03/27/SVM%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Test网址</title>
    <url>/2020/04/06/Test/</url>
    <content><![CDATA[<p> Your site is published at <a href="https://peacefullmind.github.io/">https://peacefullmind.github.io/</a></p>
]]></content>
  </entry>
  <entry>
    <title>K均值聚类算法</title>
    <url>/2021/03/27/K%E5%9D%87%E5%80%BC%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>聚类算法是 <strong>无监督学习</strong> 的常用算法。</p>
<p>在一些商业应用中，我们需要对新用户的用户类型进行判别，然而”用户类型”的概念很难全面准确地被商家定义，于是我们可以针对已有的用户数据进行聚类，将聚类结果的每一个簇定义为一个类，然后再根据这些类来训练分类模型，达到判别新用户的类型的目标。</p>
<p>用k-means算法就必须要求事前给出k值，也就是预先确定好想要把数据集分成几类。其次，不同的初始化点，最后通过k-means得出的聚类结果也有可能产生差异。最后一点，k-means对于”噪声点”是极其敏感的，可能极少的”噪声点”都会对最后的结果产生很大的影响。</p>
<p>使用matlab调用自带函数kmeans()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">data&#x3D;xlsread(&#39;data.xlsx&#39;);</span><br><span class="line">k&#x3D;3;</span><br><span class="line">Idx&#x3D;kmeans(data,k)</span><br></pre></td></tr></table></figure>
<p>Idx是一个列向量，分别为1，2，3代表属于哪类</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>bootstrap</title>
    <url>/2021/08/28/bootstrap/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE入门</title>
    <url>/2021/12/26/VUE%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h2><p>VUE3.0 和VUE2.0的写法有区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;vue_global.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p>
<h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h2><h3 id="2-1-hello-world-demo"><a href="#2-1-hello-world-demo" class="headerlink" title="2.1 hello world demo"></a>2.1 hello world demo</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hello-vue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> HelloVueApp = &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;Hello Vue!!&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">Vue.createApp(HelloVueApp).mount(<span class="string">&#x27;#hello-vue&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2语法"><a href="#2-2语法" class="headerlink" title="2.2语法"></a>2.2语法</h3><ul>
<li>v-bind绑定元素。 v-bind attribute 被称为指令。指令带有前缀 v-。</li>
<li>v-on 指令添加一个事件监听器。</li>
<li>v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</li>
<li>v-if指令</li>
<li>v-for 指令可以绑定数组的数据来渲染一个项目列表。</li>
</ul>
<p>模板用法总结</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Capp=</span></span><br><span class="line">&#123;</span><br><span class="line">  data()</span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line">      变量名：具体内容</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="comment">&lt;!--传递给 createApp 的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点--&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app=Vue.app(Capp)</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="comment">&lt;!--一个应用需要被挂载到一个 DOM 元素中--&gt;</span></span></span></span><br><span class="line">app.mount(&#x27;#demo)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>传递给 createApp 的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点。</li>
<li>一个应用需要被挂载到一个 DOM 元素中</li>
<li>与大多数应用方法不同的是，mount 不返回应用本身。相反，它返回的是根组件实例。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap报表入门</title>
    <url>/2021/09/21/bootstrap%E6%8A%A5%E8%A1%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>引入bootstrap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.0.3&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>整体</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&#x27;table&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>如果table的class有table，table-striped</p>
<p>斑马条纹的 CSS class，这个 class 是在相关的 bootstrap css 文件中定义，class 名称是 .table-striped。</p>
]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
  </entry>
  <entry>
    <title>chrome插件</title>
    <url>/2021/02/13/chrom%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包.</p>
<p>另外，其实不只是前端技术，Chrome插件还可以配合C++编写的dll动态链接库实现一些更底层的功能</p>
<p>Firefox插件只能运行在Firefox上，而Chrome除了Chrome浏览器之外，还可以运行在所有webkit内核的国产浏览器，比如360极速浏览器、360安全浏览器、搜狗浏览器、QQ浏览器等等；</p>
]]></content>
  </entry>
  <entry>
    <title>django入门</title>
    <url>/2021/03/14/django%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>welcome<br>[toc]</p>
<h2 id="1-创建django的基本步骤"><a href="#1-创建django的基本步骤" class="headerlink" title="1.创建django的基本步骤"></a>1.创建django的基本步骤</h2><h3 id="1-1-创建虚拟环境"><a href="#1-1-创建虚拟环境" class="headerlink" title="1.1 创建虚拟环境"></a>1.1 创建虚拟环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n ll_env</span><br></pre></td></tr></table></figure>
<p>列出当前所有的环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>
<p>激活虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">activate ll_env</span><br></pre></td></tr></table></figure>
<p>注意部分命令 linux，windows不一样</p>
<p>安装包命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;2.2 -i https:&#x2F;&#x2F;pypi&#x2F;douban.com&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>删除环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda remove -n 名字 --<span class="built_in">all</span></span><br></pre></td></tr></table></figure>
<p>删除虚拟环境中的包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda remove --name $虚拟环境名字 $包名</span><br></pre></td></tr></table></figure>
<p>安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install 包名</span><br></pre></td></tr></table></figure>
<h3 id="1-2创建工程"><a href="#1-2创建工程" class="headerlink" title="1.2创建工程"></a>1.2创建工程</h3><p>在安装django并且处于专门设置的环境下的前提下，创建工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject learning_log</span><br></pre></td></tr></table></figure>
<p><strong>创建数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>在正确的路径下，多了db.sqlite3</p>
<p>启用工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
<h3 id="1-3创建app"><a href="#1-3创建app" class="headerlink" title="1.3创建app"></a>1.3创建app</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py startapp learning_logs</span><br></pre></td></tr></table></figure>
<p>在settings.py中将新建的app追加进去</p>
<h3 id="1-4启动已有项目"><a href="#1-4启动已有项目" class="headerlink" title="1.4启动已有项目"></a>1.4启动已有项目</h3><p>step1 激活虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">activate ll_env</span><br></pre></td></tr></table></figure>
<p>step2 进入工程目录<br>step3.启动工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
<h2 id="2-细化mvc的内容"><a href="#2-细化mvc的内容" class="headerlink" title="2.细化mvc的内容"></a>2.细化mvc的内容</h2><p>修改models.py<br>具体略去</p>
<p>修改了model后要重新生成数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations learning_logs</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>创建superuser</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py creatsuperuser</span><br></pre></td></tr></table></figure>
<p>修改admin.py<br>注册model中的类</p>
<h2 id="3-django-shell调试"><a href="#3-django-shell调试" class="headerlink" title="3.django shell调试"></a>3.django shell调试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line"># 然后输入命令，比如</span><br><span class="line">from learning_logs.models import Topic</span><br><span class="line">Topic.objects.all()</span><br><span class="line"># get set命令等</span><br></pre></td></tr></table></figure>
<h2 id="4-整体流程"><a href="#4-整体流程" class="headerlink" title="4.整体流程"></a>4.整体流程</h2><p>models.py<br>urls.py<br>views.py<br>然后在模板文件夹里，建立html文件</p>
<p>通用试图和函数</p>
<p>整体流程是：</p>
<p>1.先建立并运行默认的界面</p>
<p>2.简单修改成helloworld</p>
<p>新建应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python startproject XXX</span><br></pre></td></tr></table></figure>
<p>在新应用目录下views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在新应用目录下新建urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在原目录下的urls.py中纳入新建的urls.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;&#39;,include(&#39;zhishi.urls&#39;))</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>修改settings.py</p>
<p>包括installed app，时区，数据库。</p>
<h1 id="5-应用下的models"><a href="#5-应用下的models" class="headerlink" title="5.应用下的models"></a>5.应用下的models</h1><p>ORM常用字段类型：</p>
<p>区别在于CharField是定长的，而TextField的长度则可以是无线的，具体使用哪一个要看需要</p>
<p>　1、CharField：字符串类型，映射到数据库中会转换成varchar类型，使用时必须传入max_length属性以定义该字符串的最大长度，如果超过254个字符，就不建议使用CharField了，此时建议使用TextField<br>10、BooleanField：布尔类型(True/False)，映射到数据库中会变成长度只有1位的tinyint类型，这个Field不接受null参数，要想使用可以为null的布尔类型的字段，就要使用NullBooleanField<br>11、AutoField:自增长类型，映射到数据库中是11位的整数，使用此字段时，必须传递primary_key=True，否则在生成迁移脚本文件时，就会报错，一个模型不能有两个自增长字段。一般情况下我们用不到这个字段，如果不定义主键，django会自动的为我们生成id字段作为主键</p>
<p>DateTimeField：日期时间类型，在python中对应的是datetime.datetime类型，在映射到数据库中也是datetime类型。使用这个Field可以传递以下几个参数：<br>　　　　auto_now=True：在每次这个数据保存的时候，都使用当前的时间。比如作为一个记录修改日期的字段<br>　　　　auto_now_add=True：在每条数据第一次被添加进去的时候，都使用当前的时间。比如作为一个记录第一次入库的字段</p>
<p>14、DateField：日期类型，用法同DateTimeField，在python中对应的是datetime.date类型，在映射到数据库中是date类型<br>　　15、TimeField：时间类型，用法同DateTimeField，在python中对应的是datetime.time类型，在映射到数据库中是time类型<br>　　16、FileField：用来存储文件的<br>　　17、ImageField：用来存储图片文件的<br>　　18、TextField：大量的文本类型</p>
<p>Field的常用参数：<br>　　1、null：标识是否可以为空，默认是为False。在使用字符串相关的Field（CharField/TextField/URLField/EmailField）的时候，官方推荐尽量不要使用这个参数，也就是保持默认值False。因为Django在处理字符串相关的Field的时候，即使这个Field的null=False，如果你没有给这个Field传递任何值，那么Django也会使用一个空的字符串””来作为默认值存储进去。因此如果再使用null=True，Django会产生两种空值的情形（NULL或者空字符串）。如果想要在表单验证的时候允许这个字符串为空，那么建议使用blank=True。如果你的Field是BooleanField，由于BooleanField不接受null参数，因此你如果想要设置这个字段可以为空的bool类型，那么对应的可空的bool类型字段则为NullBooleanField。<br>　　2、blank：标识这个字段在表单验证的时候是否可以为空，默认是False。这个和null是有区别的，null是一个纯数据库级别的。而blank是表单验证级别的。<br>　　3、db_column：这个字段在数据库中的名字。如果没有设置这个参数，那么将会使用模型中属性的名字。<br>　　4、db_index：标识这个字段是否为索引字段。<br>　　5、default：默认值。可以为一个值，或者是一个函数，但是不支持lambda表达式。并且不支持列表/字典/集合等可变的数据结构。在用函数作为值传递给default时，只能传递函数名，不需要加括号。<br>　　6、primary_key：是否为主键，与AutoField/BigAutoField连用，默认是False。<br>　　7、unique：在表中这个字段的值是否唯一，在数据库中就是唯一约束，一般是设置手机号码/邮箱等。<br>　　8、choices：在一个范围内选择出一项，注意这个选项与ForeignKey的区别<br>　　　　作用：1、django admin中显示下拉框；2、避免连表查询</p>
<p>　　　　TYPE_CHOICES = ( 　　#数据库只保存内部元祖的第一个值，后面的值保存在内存中<br>　　　　　　(0, ‘—‘),<br>　　　　　　(1, ‘第一类’),<br>　　　　　　(2, ‘第二类’),<br>　　　　　　(3, ‘第三类’),<br>　　　　)<br>　　　　type = models.IntegerField(default=0,choices=TYPE_CHOICES)</p>
<p>修改好model 后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations XXX</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>重置数据库中所有数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py flush</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    grade = models.IntegerField()</span><br><span class="line">    section = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    school = models.ForeignKey(School, on_delete=models.CASCADE)</span><br><span class="line">    blood_group = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    address = models.TextField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    email = models.EmailField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    address = models.TextField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<h1 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<p>注册类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure>
<h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><p>views向html中传递</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line">address = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;address&#x27;</span>:<span class="string">&#x27;地址一&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;address&#x27;</span>:<span class="string">&#x27;地址二&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;list.html&#x27;</span>, &#123;<span class="string">&#x27;address&#x27;</span>: address&#125;)</span><br></pre></td></tr></table></figure>
<p>这里使用了一个新方法是 render_to_response ，它可以直接调用模板并返回生成好的文本，直接返回它即可。它接收两个参数，第一个是模板的名字。</p>
<p>第二个参数是一个字典，这里只有一个 Key ，名字是 address ，它的值是一个字典的列表。只要注意模板所接收的就是这样的字典和包含字典的列表就行了。</p>
<p>创建templates目录</p>
<h1 id="修改settings-py"><a href="#修改settings-py" class="headerlink" title="修改settings.py"></a>修改settings.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel 相关</title>
    <url>/2016/07/13/excel%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="1-window文件管理"><a href="#1-window文件管理" class="headerlink" title="1.window文件管理"></a>1.window文件管理</h1><p>选中文件，按F2，重命名</p>
<h1 id="2-excel快速操作"><a href="#2-excel快速操作" class="headerlink" title="2.excel快速操作"></a>2.excel快速操作</h1><p><strong>场景</strong>：<br>共同过一个excel表，一边讨论，一边修改，需要快速熟练操作<br><strong>拉一列数据</strong><br>按住ctrl往下拉才是序列，或者先拉下来，再在右下角点击<br><strong>固定功能区：</strong><br>开始，右下角，固定功能区，把菜单固定下来。【ctrl+F1】或者【ctrl+win+F1】<br>最好保留固定功能区，有利于快速找到要用的工具，快速熟悉工具。<br><strong>把已经审核了的条目和未审核的条目区分开：</strong><br>利用颜色：录制宏，将该行变成浅蓝色<br>注意：ctrl+Z 无法撤销用宏快捷键的操作。</p>
<p><strong>删除未审核的条目但是和审核的条目重复的：</strong></p>
<p><strong>根据颜色筛选：</strong><br>【ctrl+shift+L】 下三角：按照颜色筛选</p>
<p><strong>删除重复行：</strong><br>选中，数据，删除重复值</p>
<p><strong>快速选中多行:</strong><br>选择位置首，按住shift，再选择位置末<br>如果一直到末尾的话，可以选择位置首，【ctrl+shift+下箭头】<br>选择整个表：选中这个区域内的任意一个单元格，按下快捷键Ctrl+A</p>
<p><strong>复制表格，并插入到另一个位置：</strong><br>先复制特定的表格，再在待插入的位置，【ctrl++】，就可以复制到上方【方便！】<br>试用场景：复制特定的表格，要连续，并且只能复制，不能剪切</p>
<p><strong>快速调换两行位置：</strong><br>鼠标拖动：<br>选中其中的一行数据，将光标移动到选内中区域的边缘，出现黑十字，然后在键盘上敲击“shift”，然后将鼠标移动到另外一行上，松开鼠标和“shift”了，Excel两行容数据交换成功。<br>注意，只是将下边行拖动到上边，并没有完成交换。</p>
<p><strong>快速交换两列</strong><br>通过鼠标拖动<br>核心：注意放到边缘上，鼠标变成黑十字</p>
<p><strong>删除多行:</strong><br>先选中，再快捷键[ctrl+-]<br>如果先选中，再按delete地话，没有删除多行，而是将多行中的文字删除了。<br><strong>插入多行:</strong><br>先选中，再快捷键[ctrl++] 小键盘时，如果是共用+号，需要再按住shift<br><strong>筛选：</strong><br>选中哪一行：然后【ctrl+shift+L】</p>
<p>** 填充快捷键**<br>先手动填充某个单元格，下次填充，先选中单元格，或者某行，直接F4即可。<br>** 自动换行**<br>开始——自动换行 ，在居中的右边<br> ** 条件格式**<br> 善用条件格式<br> ** 清除**<br> 开始——&gt;清除<br> ** 保护与锁定 **<br> 1.首选取消整张表的锁定<br> 2.然后选择特定的，右击 设置单元格格式 锁定<br> 3.审阅，保护工作表</p>
<h2 id="vlookup函数"><a href="#vlookup函数" class="headerlink" title="vlookup函数"></a>vlookup函数</h2><p>=vlookup()<br>表1，原始表<br>表2，查找表（小表）<br>第一个参数是，查找表的查找值【也就是查找线索】<br>第二个参数是，查找表，是一个范围，注意从第一个参数所在列的位置开始。<br>第三个参数是，需要返回的列在小表的列数的序号<br>第四个参数是，0或者1，表示精确查找或者近似查找</p>
<p>常见问题：</p>
<ul>
<li>返回”#N/A”<br>格式不对<br>1.有的是绿色小三角的文本格式，有的不带，无法匹配<br>2.有的在文字前面有一个空字符</li>
</ul>
<p>针对第一种情况，要转换成文本格式，分列，选择文本格式<br>针对第二种情况，使用替换功能，将空字符替换成空</p>
<ul>
<li>返回内容有，但是不符合预期<br>原因是返回内容的格式问题。</li>
</ul>
<p>绝对引用：美元符号</p>
<p>多列匹配，新建一个合并列<br>用&amp;将两列合并在一起。</p>
<h2 id="excel场景"><a href="#excel场景" class="headerlink" title="excel场景"></a>excel场景</h2><p>excel 不可替代性主要体现在哪里呢？<br>我的理解是：如果我用tableau，power bi，确实很快，但是局限性有二：1.对方不一定安装tableau，power bi，而excel每个人都会安装。Excel  基本上电脑都自带，对基层员工使用比较友好<br>2.如果我是具体的业务统计人员，不同的工具自然是哪个快用哪个，但是我是技术支持人员，我要提供的不是一次性的数据结果。而是一套模板，业务人员可以每次填入这个模板，然后自动计算出统计性的数据。也就是不是提供一次性的数据结果，而是多次性的通用方法流程和模板</p>
<p>补充：<br>Powerquery和Powerpivot 都可以在Excel上使用，可以在Excel上设置好模板，然后刷新数据，结果就出来了<br>excel是对业务人员最轻量级的办法，【最小成本】，尤其是一些比较紧急的情况下，很难大费周章地再去上其他工具，最好用对方熟悉工具，用对方熟悉的工具取得信任，其他额外的工具可能会吓退一些基层的业务人员<br>敏捷快速，需要立即响应的需求VS常规、频繁、可复用的工程化的需求</p>
<h2 id="excel-做表美观专业"><a href="#excel-做表美观专业" class="headerlink" title="excel 做表美观专业"></a>excel 做表美观专业</h2><p>1.表头[第一行]加粗，底色用绿色，或者某个轻的颜色和下边的数据区分开。<br>2.所有文字居中，所有字体保持一致。<br>3.一定要有边框，与表格外的内容做明显区隔。<br>4.行高，列宽要舒服</p>
<blockquote>
<p>Excel的预设行高一般为「13.5」。用这样的行高制作表格，会让行与行之间没有空隙，看起来很拥挤。因此，正确的格式应该是把行高设定为[18]。只要把行高从[13.5」改到[18」，就能让文字的上下多出一点空间，此举不仅能让文字更容易阅读，也能使表格呈现出简练的风格。</p>
</blockquote>
<p>表头比数据行高高，设置为24</p>
<p>5.强调可以用加粗，黄色底纹等标注<br>6.填报须知：用红色大字写在表头左上方的位置。</p>
<p>是否显示网格线？<br>操作：视图-网格线</p>
<p>其他参考<br>将同一类记录归组在一起；并将不同类别的记录或字段增加间距、拉开距离，同时将标题与数据间的间距拉开。<br>明细级的项目应该与上一层级保持一定的缩进，以凸显各项目的逻辑层次。同级的项目保持同样的缩进距离（参见Step3的表格）。</p>
<p><strong>问题</strong><br>为什么word中有设计工具，excel中没有？<br>因为你需要插入table，或者数据透视表，才有<br>如果是已经做好的表，转换成table，方法是：<br>选中表格：点击插入-表格【选择包含标题】<br>或者选中表格中的数据，开始：套用单元格格式</p>
<h2 id="数据表和阅读表的区别"><a href="#数据表和阅读表的区别" class="headerlink" title="数据表和阅读表的区别"></a>数据表和阅读表的区别</h2><p>一般来说，制作的表格可能是无意识的阅读表，<br>但是数据分析的素材一定是数据表，也就是存入数据库的基础表，也就是套用单元格式后的表。</p>
<h2 id="excel打印"><a href="#excel打印" class="headerlink" title="excel打印"></a>excel打印</h2><p>视图 分页视图，拖拽分页线<br>页面布局-分隔符<br>设置标题自动延续到下一页<br>页面布局-右下角的页面设置 工作表标题<br>页面布局-右下角的页面设置—页眉页脚，首页不同，在自定义页眉中输入 续表</p>
<h1 id="3-EXCEL实用功能"><a href="#3-EXCEL实用功能" class="headerlink" title="3.EXCEL实用功能"></a>3.EXCEL实用功能</h1><h2 id="3-1-表间跳转"><a href="#3-1-表间跳转" class="headerlink" title="3.1 表间跳转"></a>3.1 表间跳转</h2><p>目录跳转使用excel公式HYPERLINK实现的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;HYPERLINK(&quot;#表2!A1&quot;,&quot;跳转到表2&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="3-2-名称和数据验证"><a href="#3-2-名称和数据验证" class="headerlink" title="3.2 名称和数据验证"></a>3.2 名称和数据验证</h2><p>公式选项卡下的名称管理器<br>数据下的数据验证</p>
]]></content>
      <categories>
        <category>EXCEL</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>EXCEL</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2021/10/13/git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><h2 id="1-本地版本管理"><a href="#1-本地版本管理" class="headerlink" title="1.本地版本管理"></a>1.本地版本管理</h2><p>提交修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add XXX</span><br><span class="line">git commit -m &#39;版本1&#39;</span><br><span class="line">git log</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>工作区<br>版本库 .git   里边有暂存区,版本库又名仓库，英文名repository<br>git init 初始化，生成.git 版本库和暂存区,此命令把这个目录变成Git可以管理的仓库：<br>git add XX 讲工作区的放到暂存区<br>git commit 创建版本记录，将暂存区提交到当前分支</p>
<p>可以多次add,一次commit,创建一个版本<br>版本管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br><span class="line">git reset --hard 版本编号</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<p>head 是一个指针<br>HEAD^ 代表 的上一个版本</p>
<h2 id="2-连接远程仓库管理"><a href="#2-连接远程仓库管理" class="headerlink" title="2.连接远程仓库管理"></a>2.连接远程仓库管理</h2><p>获取项目代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone http:&#x2F;&#x2F;github.com&#x2F;micheloosterhof&#x2F;cowrie</span><br></pre></td></tr></table></figure>
<p>在本地创建了一个Git仓库后，又在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:michaelliao&#x2F;learngit.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。<br>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>分布式版本管理工具：<br>Git不需要总是联网就能进行版本管理，因为它有本地仓库。你可以无需联网，在本地就能进行很多版本管理相关的工作，例如创建分支、提交、回滚代码等<br>SVN 集中式版本管理工具：必须联网</p>
<h2 id="3-分支管理"><a href="#3-分支管理" class="headerlink" title="3.分支管理"></a>3.分支管理</h2><p>新建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure>
<p>切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>
<p>新建并切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure>
<p>推送新分支到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>
<p>查看本地分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<p>查看远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<p>查看所有分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>删除本地分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>
<p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin :dev</span><br></pre></td></tr></table></figure>
<p>和推送本地分支至远程仓库类似，只是前面加了一个冒号，代表删除。</p>
<p>将其他分支合并到master</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure>
<p>先切换到master，再将其他分支合并到master。</p>
<p>git在线游戏网站，超级棒</p>
<p><a href="https://learngitbranching.js.org/?NODEMO=&amp;locale=zh_CN">https://learngitbranching.js.org/?NODEMO=&amp;locale=zh_CN</a></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建</title>
    <url>/2021/02/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>[toc]</p>
<h2 id="1-Quick-Start"><a href="#1-Quick-Start" class="headerlink" title="1.Quick Start"></a>1.Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="2-踩坑记"><a href="#2-踩坑记" class="headerlink" title="2. 踩坑记"></a>2. 踩坑记</h2><ol>
<li>为什么public中不能生成预想的index.html呢？<br>站点配置文件 theme: 冒号后面一定要有空格</li>
<li>为什么本地效果可以，但是不能hexo d呢？<br>因为需要部署的插件，需要在目录下安装</li>
<li>修改中文后，首页还是英文？<br>有缓存，先修改下一项，自然解决</li>
<li>目录和tags怎么设置？<br>首选要hexo new page tags 然后在生成的文件中修改type<br>其次，将文章和tags关联</li>
<li>标签/分类数量统计不准确？<br>因为 Hexo 有缓存的功能，因此有时候你会发现在 标签 和 分类 页面中的数量统计并不准确。 出现这个问题时，可以按照以下步骤重新生成站点的内容：<br>先移除博客根目录下的.deploy git文件夹和db.json文件，然后清理下public目录下的categories和tags两个文件夹里的文件，然后重新部署静态博客：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2>public 是生成的静态文件，也就是浏览器实际加载的，而source文件时源文件，相当于数据库<br>hexo g就是根据source生成public和另外一个文件<br>hexo clean 是删除hexo g生成的文件<br>hexo d是部署到远程服务器中，而远程服务器的地址在站点配置文件中配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:peacefullmind&#x2F;peacefullmind.github.io.git</span><br><span class="line">  master: master</span><br></pre></td></tr></table></figure>
<p>hexo s在未配置远程服务器的情况下，可以在本地预览效果</p>
<h2 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3. 步骤"></a>3. 步骤</h2><h3 id="3-1-搭建hexo博客"><a href="#3-1-搭建hexo博客" class="headerlink" title="3.1 搭建hexo博客"></a>3.1 搭建hexo博客</h3><p>安装nodejs，hexo，git等<br>初始化hexo </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>
<p>然后测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;firstBlog&quot;</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>在本地查看博客效果，是默认主题</p>
<h3 id="3-2-更换主题"><a href="#3-2-更换主题" class="headerlink" title="3.2 更换主题"></a>3.2 更换主题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>然后在站点配置文件中修改theme为next<br>在本地进行测试，是否成功</p>
<h3 id="3-3-修改语言，博客名，作者名"><a href="#3-3-修改语言，博客名，作者名" class="headerlink" title="3.3 修改语言，博客名，作者名"></a>3.3 修改语言，博客名，作者名</h3><p>语言，博客名，作者名在站点配置文件中</p>
<h3 id="3-4，开启目录，标签等"><a href="#3-4，开启目录，标签等" class="headerlink" title="3.4，开启目录，标签等"></a>3.4，开启目录，标签等</h3><p>目录和标签需要根据next主题的要求进行设置</p>
<h3 id="3-5-推送到远程服务器上"><a href="#3-5-推送到远程服务器上" class="headerlink" title="3.5 推送到远程服务器上"></a>3.5 推送到远程服务器上</h3><p>以github为例，建立仓库，通过clone占到git地址，并放置到站点主题中。<br>然后git d -g即可</p>
<h2 id="4-markdown-常用"><a href="#4-markdown-常用" class="headerlink" title="4. markdown 常用"></a>4. markdown 常用</h2><p>注意事项：回车很重要的一个标志</p>
<h3 id="4-1文字常用"><a href="#4-1文字常用" class="headerlink" title="4.1文字常用"></a>4.1文字常用</h3><p><strong>加粗</strong> </p>
<blockquote>
<p>引用</p>
</blockquote>
<p>==标黄文字== </p>
<p><del>删除线</del></p>
<ul>
<li><input disabled="" type="checkbox"> 任务1</li>
<li><input checked="" disabled="" type="checkbox"> 任务2</li>
</ul>
<ul>
<li>无序列表1</li>
<li>无序列表2</li>
</ul>
<h3 id="4-2快捷键和文章架构"><a href="#4-2快捷键和文章架构" class="headerlink" title="4.2快捷键和文章架构"></a>4.2快捷键和文章架构</h3><p>[toc] 生成目录，放在开头<br>ctrl+T插入表格 </p>
<h3 id="4-3图片"><a href="#4-3图片" class="headerlink" title="4.3图片"></a>4.3图片</h3><p>这种引用本地图片的形式，在本地的markdown编辑器里无法显示，但是在hexo博客里是可以的<br><img src="/images/%E5%9B%BEtest.jpg" alt="图test"><br>或者可以引用在线的图片，则在本地markdown，hexo博客均可显示。<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>
<p>使用PicGO工具，设置好图床后，即可使用。<br><img src="https://raw.githubusercontent.com/peacefullmind/Picture/main/v2-221ef98ff1449faf9775f240a67e74f3_720w.jpg" alt="图床测试"></p>
<h3 id="4-4表格"><a href="#4-4表格" class="headerlink" title="4.4表格"></a>4.4表格</h3><table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>html，css基础</title>
    <url>/2021/02/13/html/</url>
    <content><![CDATA[<h1 id="1-HTML基础"><a href="#1-HTML基础" class="headerlink" title="1.HTML基础"></a>1.HTML基础</h1><h2 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1  基本结构"></a>1.1  基本结构</h2><p>html下包裹head和body；<br>head 下包裹title<br>body下包裹正文</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		正文</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-标题"><a href="#1-2-标题" class="headerlink" title="1.2 标题"></a>1.2 标题</h2><p>在body内包裹标题<br> 一级标题 中间包裹标题内容，一级标题只能有一个</p>
<h1></h1>
<h2></h2>
一直到h6
## 1.3 段落
段落
<p></p> 包裹着中间的段落
注释
<!--注释内容-->

<h2 id="1-4-链接"><a href="#1-4-链接" class="headerlink" title="1.4 链接"></a>1.4 链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">hrep</span>=<span class="string">&quot;htttps://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a包裹这内容，<br>然后在首a 上 属性=“  ”这种内容，a的属性就是href</p>
<h2 id="1-5瞄点"><a href="#1-5瞄点" class="headerlink" title="1.5瞄点"></a>1.5瞄点</h2><p>页面跳转，href=没办法写成链接，可以在地方写成<br>需要找到的地方写id=””<br>href=”#”<br>这种方式进行连接</p>
<p>1、id是一个标签，用于区分不同的结构和内容；id是先找到结构/内容，再给它定义样式；class是一个样式，可以套在任何结构和内容上；class是先定义好一种样式，再套给多个结构/内容。<br>2、id是元素的名称，可以供js或其它脚本程序来访问该元素对象，而class是该元素的css类名。<br>3、定义样式时，id=”aa”的用#aa{…}，class=”bb”的用.bb{…}。<br>4、class是全局属性，id是局部属性。</p>
<h2 id="1-6表格"><a href="#1-6表格" class="headerlink" title="1.6表格"></a>1.6表格</h2><p>table 包裹整个表格，tr包裹行，td包裹列<br>表格常见属性<br>border=”1” 边框像素值1px<br>align=”center” 表格在浏览器中居中<br>cellpadding=”20” 文字和边框的距离<br>cellspacing=”0.1” 表格小单元格之间的距离</p>
<p>bgcolor=”blue” 属性如果在table后面，修饰的是整个表格，如果是在特定的td后面修饰的是单元格</p>
<p>不同的属性用空格隔开<br>合并单元格 行合并 rowsapan=”2” 列合并 colspan=”2”<br>始终为属性值加引号</p>
<h2 id="1-7图像标签"><a href="#1-7图像标签" class="headerlink" title="1.7图像标签"></a>1.7图像标签</h2><p>img 是单标签，属性有src,width height等，宽，高给一个，另外的等比例缩放就可以<br>如果要居中的话，需要有个父标签，让父标签居中<br>img的align指的是图片和周围文字的距离，不推荐使用，<br>title 属性 当鼠标悬停在图片上的提示文字<br>alt 当图片无法正常加载时，给的提示性文字。</p>
<h2 id="1-8-列表"><a href="#1-8-列表" class="headerlink" title="1.8 列表"></a>1.8 列表</h2><p>无序列表<br>ul li 可以嵌套使用<br>ul必须紧跟li</p>
<p>有序列表<br>ol li</p>
<p>定义列表<br>dl dt dd</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国的首都<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国的政治中心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-9常用标签"><a href="#1-9常用标签" class="headerlink" title="1.9常用标签"></a>1.9常用标签</h2><p>加粗 b strong<br>斜体 i em<br>下划线 u<br>删除线 s del</p>
<p>单标签<br>分割线hr<br>换行 br</p>
<p>下标 sub<br>上标 sup</p>
<h2 id="1-10-div-span标签"><a href="#1-10-div-span标签" class="headerlink" title="1.10 div span标签"></a>1.10 div span标签</h2><p>span包裹了一段文字，然后通过css，来设置格式。区分css这样设置格式，和直接html标签设置格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>很长的一段话，<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow;color: red;&quot;</span>&gt;</span>具体<span class="tag">&lt;/<span class="name">span</span>&gt;</span>内容如下<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>网页布局通过div+css实现</p>
<h2 id="1-11-表单"><a href="#1-11-表单" class="headerlink" title="1.11 表单"></a>1.11 表单</h2><p>表单有文本输入框，密码框，多选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	性别：</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于多选框，通过两个选择，都赋值一样的name来实现单选。<br>select 和option配合实现下拉框选择</p>
<h2 id="1-12转义"><a href="#1-12转义" class="headerlink" title="1.12转义"></a>1.12转义</h2><p>&amp;lt &amp;gt</p>
<h1 id="2-css基础"><a href="#2-css基础" class="headerlink" title="2.css基础"></a>2.css基础</h1><h2 id="2-1基本结构"><a href="#2-1基本结构" class="headerlink" title="2.1基本结构"></a>2.1基本结构</h2><p>css关键字 style，stytle写在head中，title后面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">		&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">		&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">			.content&#123;</span><br><span class="line">				color: red;</span><br><span class="line">			&#125;</span><br><span class="line">		&lt;&#x2F;style&gt;</span><br><span class="line">	&lt;&#x2F;head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;p class&#x3D;&quot;content&quot;&gt;正文内容&lt;&#x2F;p&gt;</span><br><span class="line">	&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-CSS选择器"><a href="#2-2-CSS选择器" class="headerlink" title="2.2 CSS选择器"></a>2.2 CSS选择器</h2><p>类选择器<br>id选择器<br>通配符选择器<br>标签选择器<br>逗号 标识并列<br>空格 标识父子关系<br>加号 紧挨着<br>大于号选择器</p>
<h2 id="2-3css浮动"><a href="#2-3css浮动" class="headerlink" title="2.3css浮动"></a>2.3css浮动</h2><p>float :left</p>
<h2 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h2><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#header&#123;</span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="css">	<span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="css">	<span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>:<span class="number">5px</span>;</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">#citys&#123;</span><br><span class="line"><span class="css">	<span class="attribute">line-height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:<span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>:<span class="number">10px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">#neirong&#123;</span><br><span class="line"><span class="css">	<span class="attribute">width</span>:<span class="number">350px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>:<span class="number">10px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">#footer&#123;</span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="css">	<span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="css">	<span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">	<span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>:<span class="number">5px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>城市列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;citys&quot;</span>&gt;</span></span><br><span class="line">北京<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">天津<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">保定<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;neirong&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>北京市（Běijīng Shì）简称京，是中华人民共和国的首都，中国中央四个直辖市之一，全国政治、经济、文化、科研、教育和国际交往中心。北京位于华北平原北端，东南局部地区与天津市相连，其余为河北省所环绕。以市区人口数相比，北京为次于上海的中国第二大城市，同时也是中国陆空交通的总枢纽。北京已经成功举办了2008年北京奥运会。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>全球只有极少数城市像北京一样长时间作为一个国家的政治和文化中心。其荟萃了自元明清以来的中华文化，拥有众多名胜古迹和人文景观。《不列颠百科全书》将北京形容为&quot;One of the world&#x27;s great cities&quot;。北京正以它古老又时尚的全新面貌，迎接每年超过1亿4700万的旅客。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">Copyright W3School.com.cn</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>bolck块级元素<br>比如div form p等都是块级元素，会新开始一行并尽可能撑满容器。</p>
<p>inline行内元素<br>span a标签等是常用的行业元素。不会打乱布局。</p>
<ul>
<li>diaplay值可以是none，一些特殊元素的display值是它，通常用来被JavaScript 用来在不删除元素的情况下隐藏或显示元素。</li>
<li> visibility 属性，把 display 设置成 none 元素不会占据它本来应该显示的空间，但是设置成 visibility: hidden; 还会占据空间。</li>
<li>  display 值，例如 list-item 和 table，到 inline-block 和 flex 。</li>
<li>  一个常用的：把 li 元素修改成 inline，制作成水平菜单。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>html基础</title>
    <url>/2021/08/22/html%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>VS新建html<br>第一步：在空文档中输入!<br>第二步：按下tab键。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>javascript基础</title>
    <url>/2021/10/27/javascript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>js是运行在客户端的脚本语言。<br>声明变量<br>外边是双引号，里面是单引号。<br>引入外部js 的script标签中间不可以写代码<br>let var</p>
<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><h3 id="2-1数据类型"><a href="#2-1数据类型" class="headerlink" title="2.1数据类型"></a>2.1数据类型</h3><p>变量的初始化，分号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="number">12</span>；</span><br></pre></td></tr></table></figure>

<ul>
<li><p>String</p>
</li>
<li><p>Number</p>
</li>
<li><p>Boolean</p>
</li>
<li><p> Array</p>
</li>
<li><p>Object<br>这种变量本身类型不固定的语言称之为动态语言。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">// a的值是整数123</span></span><br><span class="line">a = <span class="string">&#x27;ABC&#x27;</span>; <span class="comment">// a变为字符串</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>ParseInt 转换成<br>转换成string</p>
<h3 id="2-2数组"><a href="#2-2数组" class="headerlink" title="2.2数组"></a>2.2数组</h3><p>JavaScript的数组可以包括任意数据类型。数组用[]表示，元素之间用,分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure>
<p>slice()<br>push()<br>pop()<br>如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：<br>sort()可以对当前Array进行排序;<br>reverse()把整个Array的元素给调个个<br>splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：<br>concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：<br>join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串;<br>如果数组的某个元素又是一个Array，则可以形成多维数组;</p>
<h3 id="2-3字符串"><a href="#2-3字符串" class="headerlink" title="2.3字符串"></a>2.3字符串</h3><p>用加号连接字符串<br>用${}包裹变量名的形式<br>获取字符串长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line">s.length; <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
<p>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：<br>toUpperCase()把一个字符串全部变为大写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">s.toUpperCase(); <span class="comment">// 返回&#x27;HELLO&#x27;</span></span><br></pre></td></tr></table></figure>
<p>toLowerCase()把一个字符串全部变为小写：<br>indexOf()会搜索指定字符串出现的位置：<br>substring()返回指定索引区间的子串：</p>
<h3 id="2-4对象"><a href="#2-4对象" class="headerlink" title="2.4对象"></a>2.4对象</h3><p>JavaScript中一切皆对象。JavaScript的对象是一组由键-值组成的无序集合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    tags: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>],</span><br><span class="line">    city: <span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">    hasCar: <span class="literal">true</span>,</span><br><span class="line">    zipcode: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>要获取一个对象的属性，我们用对象变量.属性名的方式：<br>JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已。</p>
<h3 id="2-5运算符"><a href="#2-5运算符" class="headerlink" title="2.5运算符"></a>2.5运算符</h3><ul>
<li><p>%是求余运算</p>
</li>
<li><p>&amp;&amp;运算是与运算</p>
</li>
<li><p>||运算是或运算</p>
</li>
<li><p>!运算是非运算</p>
</li>
<li><p>===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。三个等号比较的是内存地址。</p>
<h3 id="2-6-json"><a href="#2-6-json" class="headerlink" title="2.6 json"></a>2.6 json</h3><p>json格式的字符串和对象的相互转化</p>
</li>
</ul>
<h2 id="3-逻辑判断"><a href="#3-逻辑判断" class="headerlink" title="3.逻辑判断"></a>3.逻辑判断</h2><h3 id="3-1循环"><a href="#3-1循环" class="headerlink" title="3.1循环"></a>3.1循环</h3><h3 id="3-2条件判断"><a href="#3-2条件判断" class="headerlink" title="3.2条件判断"></a>3.2条件判断</h3><h3 id="3-3结构"><a href="#3-3结构" class="headerlink" title="3.3结构"></a>3.3结构</h3><p>Map是一组键值对的结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;Michael&#x27;</span>, <span class="number">95</span>], [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>], [<span class="string">&#x27;Tracy&#x27;</span>, <span class="number">85</span>]]);</span><br><span class="line">m.get(<span class="string">&#x27;Michael&#x27;</span>); <span class="comment">// 95</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.set(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.set(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">59</span>);</span><br><span class="line">m.has(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 是否存在key &#x27;Adam&#x27;: true</span></span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 67</span></span><br><span class="line">m.delete(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// 删除key &#x27;Adam&#x27;</span></span><br><span class="line">m.get(<span class="string">&#x27;Adam&#x27;</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 空Set</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 含1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>]);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, &quot;3&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h2><h3 id="2-1-常用自带函数"><a href="#2-1-常用自带函数" class="headerlink" title="2.1 常用自带函数"></a>2.1 常用自带函数</h3><ul>
<li>唯一能判断NaN的方法是通过isNaN()函数<br>typeof <h3 id="2-2函数"><a href="#2-2函数" class="headerlink" title="2.2函数"></a>2.2函数</h3>匿名函数</li>
</ul>
<p>map()用法,调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果。<br>reduce()把结果继续和序列的下一个元素做累积计算。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>
<p>Array的filter()也接收一个函数。过滤<br>Array.filter(函数名)<br>Array的sort()方法默认把所有元素先转换为String再排序，原生的方法不能直接用来对数字排序，会不对。<br>every()方法可以判断数组的所有元素是否满足测试条件。<br>例如，给定一个包含若干字符串的数组，判断所有字符串是否满足指定的测试条件：<br>find()方法用于查找符合条件的第一个元素，如果找到了，返回这个元素，否则，返回undefined<br>findIndex()和find()类似，也是查找符合条件的第一个元素，不同之处在于findIndex()会返回这个元素的索引，如果没有找到，返回-1；<br>forEach()和map()类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组。forEach()常用于遍历数组，因此，传入的函数不需要返回值，</p>
<p>闭包</p>
<h2 id="3-事件"><a href="#3-事件" class="headerlink" title="3.事件"></a>3.事件</h2><p>比如 onclick<br>将事件与元素绑定有许多方法。</p>
<h2 id="4-浏览器对象"><a href="#4-浏览器对象" class="headerlink" title="4.浏览器对象"></a>4.浏览器对象</h2><p>window 浏览器窗口,window对象有innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。<br>screen对象表示屏幕的信息<br>location对象表示当前页面的URL信息<br>document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。<br>用document对象提供的getElementById()和getElementsByTagName()可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点.</p>
<h3 id="4-1操作dom"><a href="#4-1操作dom" class="headerlink" title="4.1操作dom"></a>4.1操作dom</h3><p>在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是document.getElementById()和document.getElementsByTagName()，以及CSS选择器document.getElementsByClassName()。<br>由于ID在HTML文档中是唯一的，所以document.getElementById()可以直接定位唯一的一个DOM节点。document.getElementsByTagName()和document.getElementsByClassName()总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。<br>选择节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回ID为&#x27;test&#x27;的节点：</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定位ID为&#x27;test-table&#x27;的节点，再返回其内部所有tr节点：</span></span><br><span class="line"><span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test-table&#x27;</span>).getElementsByTagName(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定位ID为&#x27;test-div&#x27;的节点，再返回其内部所有class包含red的节点：</span></span><br><span class="line"><span class="keyword">var</span> reds = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test-div&#x27;</span>).getElementsByClassName(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点test下的所有直属子节点:</span></span><br><span class="line"><span class="keyword">var</span> cs = test.children;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点test下第一个、最后一个子节点：</span></span><br><span class="line"><span class="keyword">var</span> first = test.firstElementChild;</span><br><span class="line"><span class="keyword">var</span> last = test.lastElementChild;</span><br></pre></td></tr></table></figure>
<p>第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过querySelector获取ID为q1的节点：</span></span><br><span class="line"><span class="keyword">var</span> q1 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#q1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过querySelectorAll获取q1节点内的符合条件的所有节点：</span></span><br><span class="line"><span class="keyword">var</span> ps = q1.querySelectorAll(<span class="string">&#x27;div.highlighted &gt; p&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>插入dom</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>linux2</title>
    <url>/2021/12/18/linux2/</url>
    <content><![CDATA[<h2 id="应用程序安装的原理"><a href="#应用程序安装的原理" class="headerlink" title="应用程序安装的原理"></a>应用程序安装的原理</h2><p>Windows下安装软件的大概过程如下：  </p>
<ol>
<li>在用户的安装目录下建立安装程序目录  </li>
<li>拷贝dll动态库到安装目录  </li>
<li>拷贝exe到安装目录  </li>
<li>拷贝配置文件如ini到安装目录  </li>
<li>把启动配置或程序依赖的配置放入注册表中</li>
<li>如果是服务程序，注册并且启动该服务</li>
</ol>
<p>linux安装软件的过程：  </p>
<ol>
<li>建立安装目录  </li>
<li>拷贝类库  </li>
<li>拷贝可执行程序  </li>
<li>根据需要选择性配置和启动服务  </li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode刷题之动态规划总结</title>
    <url>/2022/02/04/leetcode%E5%88%B7%E9%A2%98%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="1-动态规划步骤"><a href="#1-动态规划步骤" class="headerlink" title="1.动态规划步骤"></a>1.动态规划步骤</h1><ol>
<li>确定dp数组（dp table）以及下标的含义</li>
<li>确定递推公式</li>
<li>dp数组如何初始化</li>
<li>确定遍历顺序</li>
<li>举例推导dp数组</li>
</ol>
<h1 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h1><p>底层原理是递归<br>优化的空间，不希望反复计算子问题，可以用值将子问题的结果记录下来。</p>
<h1 id="3-消除重叠子问题"><a href="#3-消除重叠子问题" class="headerlink" title="3.消除重叠子问题"></a>3.消除重叠子问题</h1><p>以斐波拉契数列为例<br>f(1)=1,f(2)=1,f(n)等于前两项之和</p>
<h2 id="3-1暴力递归"><a href="#3-1暴力递归" class="headerlink" title="3.1暴力递归"></a>3.1暴力递归</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(n-<span class="number">1</span>)+f(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">res=f(<span class="number">10</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h2 id="3-2带备忘录的递归"><a href="#3-2带备忘录的递归" class="headerlink" title="3.2带备忘录的递归"></a>3.2带备忘录的递归</h2><p>带备忘录的，这种带备忘录的解法就是我们经常说的“剪枝”操作，以下把一颗非常冗余的树修剪的很干净，或者说就是减少了重叠子问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">back</span>(<span class="params">memory,n</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>):</span><br><span class="line">        memory[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>):</span><br><span class="line">        memory[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(memory[n]!=<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> memory[n]</span><br><span class="line">    res=back(memory,n-<span class="number">1</span>)+back(memory,n-<span class="number">2</span>)</span><br><span class="line">    memory[n]=res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    memory=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> back(memory,n)</span><br><span class="line"></span><br><span class="line">res=fib(<span class="number">10</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h2 id="3-3自底向上"><a href="#3-3自底向上" class="headerlink" title="3.3自底向上"></a>3.3自底向上</h2><p>通过数组来记录每个结果值，自底向上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_low</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span>  dp[n]</span><br><span class="line">n=<span class="number">10</span></span><br><span class="line">res=fib_low(n)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h2 id="3-4-迭代"><a href="#3-4-迭代" class="headerlink" title="3.4 迭代"></a>3.4 迭代</h2><p>迭代也是自底向上,当前状态仅仅和前两个状态有关，而前面无关，所以我们可以优化空间，不采用数组，直接两个变量，交替保存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_d</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    pre_pre=<span class="number">1</span></span><br><span class="line">    pre=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">        temp=pre+pre_pre</span><br><span class="line">        pre_pre=pre</span><br><span class="line">        pre=temp</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">n=<span class="number">10</span></span><br><span class="line">res=fib_d(n)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql使用</title>
    <url>/2021/02/13/mysql%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>显示所有的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<p>使用某数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test_db;</span><br></pre></td></tr></table></figure>
<p>显示数据库内所有的表格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<p>显示teble数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student</span><br></pre></td></tr></table></figure>
<h1 id="启动服务查看"><a href="#启动服务查看" class="headerlink" title="启动服务查看"></a>启动服务查看</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br><span class="line">mysql -u root</span><br><span class="line"> show databases;</span><br><span class="line"> show databases;</span><br><span class="line">show tables;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用命令 quit 或者 exit 退出 MySQL。</p>
<p>show columns from 表名; 查看表下面那些列<br>更便捷方式 是 describe</p>
<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><p>导入导出要在指定的文件路径下<br>查看指定的路径</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>导入sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source <span class="operator">/</span>home<span class="operator">/</span>...<span class="operator">/</span>XXX.sql;</span><br></pre></td></tr></table></figure>
<p>导入文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data infile <span class="string">&#x27;文件路径和文件名&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><p>导入导出要在指定的文件路径下<br>导出文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>，列<span class="number">2</span> <span class="keyword">into</span> outfile <span class="string">&#x27;文件路径和文件名&#x27;</span> <span class="keyword">from</span> 表名字;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy使用及日期</title>
    <url>/2021/02/13/numpy%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data=np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">data1=np.ones(<span class="number">3</span>)</span><br><span class="line">data2=np.zeros(<span class="number">3</span>)</span><br><span class="line">data3=np.random.random(<span class="number">3</span>)</span><br><span class="line">data4=np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br></pre></td></tr></table></figure>
<h1 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h1><p>元素之间的直接运算，不必写循环<br>这个叫做广播机制。</p>
<h1 id="时间的表示"><a href="#时间的表示" class="headerlink" title="时间的表示"></a>时间的表示</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="string">&#x27;2020-08-01&#x27;</span>, <span class="string">&#x27;2020-08-10&#x27;</span>, dtype=np.datetime64)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.arange(<span class="string">&#x27;2020-08-01 20:00&#x27;</span>,<span class="string">&#x27;2020-08-10&#x27;</span>,dtype=np.datetime64)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>pandas使用</title>
    <url>/2021/02/13/pandas%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h1><p>读取txt文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line">fpath=<span class="string">&#x27;./testdata.txt&#x27;</span></span><br><span class="line">datapd=pd.read_csv(fpath,sep=<span class="string">&#x27;\t&#x27;</span>,header=<span class="literal">None</span>,names=[<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>读取mysql数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">connection=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;tao123456&#x27;</span>,db=<span class="string">&#x27;test_db&#x27;</span>)</span><br><span class="line">datapd=pd.read_sql(<span class="string">&#x27;select * from student&#x27;</span>,con=connection)</span><br></pre></td></tr></table></figure>
<h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;月份&#x27;</span>].value_couts()</span><br></pre></td></tr></table></figure>
<h2 id="分组计数"><a href="#分组计数" class="headerlink" title="分组计数"></a>分组计数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;月份&#x27;</span>)[<span class="string">&#x27;搜索人数&#x27;</span>].<span class="built_in">sum</span>().reset_index()</span><br></pre></td></tr></table></figure>
<h2 id="列观察唯一值"><a href="#列观察唯一值" class="headerlink" title="列观察唯一值"></a>列观察唯一值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;关键词&#x27;</span>].unique()</span><br></pre></td></tr></table></figure>
<h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>类似于ctrl+f 的语法 str.find(“乐高”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;是否品牌词&#x27;</span>]=df[<span class="string">&#x27;关键词&#x27;</span>].<span class="built_in">str</span>.find(<span class="string">&#x27;乐高&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_value(by=<span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p>参数是个数，或者比例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sample(n=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sample(frac=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="判断是否为空"><a href="#判断是否为空" class="headerlink" title="判断是否为空"></a>判断是否为空</h2><h2 id="删除空值"><a href="#删除空值" class="headerlink" title="删除空值"></a>删除空值</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>office加载项</title>
    <url>/2021/05/26/office%E5%8A%A0%E8%BD%BD%E9%A1%B9/</url>
    <content><![CDATA[<p>Office 系列软件一直坚持开放的机制，为广大的开发人员提供了定制化的接口和能力，一共出现过主要三代的开发技术。他们分别是VBA加载宏，VSTO外接程序，以及现在的Web Add-in。</p>
<p>VBA非常容易学习，性能也很高，这是因为它是在Excel的进程里面直接运行的。它特别适合把一些日常的工作实现自动化。但VBA也有一些不太擅长的地方，就是它更多的是专注于Office 客户端（例如Excel）内部对象模型的访问和操作，如果需要访问外部的资源，例如数据库拉，网络资源等等，尤其是说你还想要有些操作计算机本地资源能力的话，相对来说就会困难一些。在2003年左右，微软推出了第一代的VSTO开发工具，那是作为Visual Studio .NET 2003的一个插件提供的，但那个时候就奠定了VSTO的一个架构，它允许开发人员用自己熟悉的C#或<a href="https://link.zhihu.com/?target=http://VB.NET">http://VB.NET</a>为Office 客户端编写插件，也称为外接程序。这些插件跟VBA写的加载宏完全不一样，它是运行在一个独立的进程的，实际上它运行的环境我们称之为托管环境，而且它是需要编译的，通常VSTO外接程序所生成的东西都是一个dll，这个dll需要在对应版本的.NET Framework中才能运行。因为这种设计，所以它能够使用到.NET Framework的全套能力，尤其是强大的网络访问和本地操作的能力，它是通过COM interop的方式与Office客户端进行互操作的。VSTO也存在一定的不足，就是它有对.NET Framework的依赖，那时候.NET Framework还不是默认安装的，所以有时候为了安装一个很小的插件，用户非得去装一个一两百兆的.NET Framework，这给部署带来了一定的挑战，而其它的版本更新又需要重新安装，这个也是限制他发展的一个原因之一，但总体来说，瑕不掩瑜，它把Office Add-in的开发能力提升了一个很大的台阶。</p>
<p>第三代技术，Office Web Add-in是为云而生的，它随着Office 365的面世和发展而逐渐进入我们的视野。由于Office 365是一个云平台，我们的Office客户端也不仅仅是在桌面端能够使用，而是既能够在浏览器中使用，也能够在手机端使用。这就给Add-in开发提出了新的课题。不管是VBA，还是VSTO，都很难做到跨平台，也不能在浏览器中运行，更不要说在手机里面运行了。所以，这一代技术是基于Web开发，使用HTML和Javscript来编写。它具有跨平台跨设备的好处，能够集中部署和更新，你甚至可以将他们发布到微软官方的应用商店Office Store中去销售你的Add-in。当然，这些好处也会有一定的代价，Office Web Add-in必须联机才能使用，事实上它还对浏览器版本有所依赖，而如果你在桌面版Office使用的话，至少需要Office 2013的版本哦。Office Web Add-in是由两个部分组成的，一个XML文件用来定义Add-in，而一套网站用来真正实现功能，其中如果需要跟宿主程序，例如Excel进行交互的话，会用到一套JavaScript的API，这些API相当于是把之前VBA对象模型进行了一个封装，以便Javascript能够调用。</p>
]]></content>
      <categories>
        <category>office加载项</category>
      </categories>
      <tags>
        <tag>office加载项</tag>
      </tags>
  </entry>
  <entry>
    <title>plt的bar图</title>
    <url>/2021/02/13/plt%E7%9A%84bar%E5%9B%BEdemo/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#绘制三张图，并且本程序提单量是2020-01-01之后的。</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================================================================================================</span></span><br><span class="line"><span class="comment">#读入提交报销单的表，绘制第一张图，提单量</span></span><br><span class="line">data=pd.read_excel(<span class="string">&#x27;RP31594372605000.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mydf=data</span><br><span class="line"><span class="comment">#对申请人所在公司名称进行简写</span></span><br><span class="line">mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>]=mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].replace(<span class="string">&#x27;中国光大银行股份有限公司&#x27;</span>,<span class="string">&#x27;总行&#x27;</span>)</span><br><span class="line">mydf.loc[:,<span class="string">&#x27;申请人所在公司&#x27;</span>]=mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;中国光大银行股份有限公司&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mydf.loc[:,<span class="string">&#x27;申请人所在公司&#x27;</span>]=mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;分行&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#提单日期筛选日期&gt;=2020-01-01的</span></span><br><span class="line">mydf.loc[:,<span class="string">&#x27;创建日期&#x27;</span>]=pd.to_datetime(mydf[<span class="string">&#x27;创建日期&#x27;</span>])</span><br><span class="line">s_date = datetime.datetime.strptime(<span class="string">&#x27;2020-01-01&#x27;</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">mydf=mydf[(mydf[<span class="string">&#x27;创建日期&#x27;</span>]&gt;= s_date)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印相关信息；</span></span><br><span class="line">print(mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].tail(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">print(mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].unique())</span><br><span class="line">print(mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment">#统计各分行数据</span></span><br><span class="line">mydata=mydf[<span class="string">&#x27;申请人所在公司&#x27;</span>].value_counts()</span><br><span class="line">X=<span class="built_in">list</span>(mydata.index)</span><br><span class="line">Y=mydata.tolist()</span><br><span class="line">print(X)</span><br><span class="line">print(Y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.facecolor&#x27;</span>] = <span class="string">&#x27;#F0F8FF&#x27;</span></span><br><span class="line">plt.grid(axis=<span class="string">&quot;y&quot;</span>,c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">plt.bar(X,Y,width = <span class="number">0.9</span>,facecolor=<span class="string">&#x27;#87CEEB&#x27;</span>,label=<span class="string">&#x27;日常报销单&#x27;</span>,zorder=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(X,Y):</span><br><span class="line">    plt.text(x,y+<span class="number">0.05</span>,<span class="string">&#x27;%.0f&#x27;</span> % y,ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # mydata.plot.bar()</span></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&quot;提单量&quot;</span>)</span><br><span class="line"><span class="comment"># plt.legend((&#x27;日常报销单&#x27;,))</span></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment">#===================================================================================================</span></span><br><span class="line"><span class="comment">#绘制第二张图，读入员工数据表，计算各个分行体量</span></span><br><span class="line">data2=pd.read_excel(<span class="string">&#x27;user_full_info.xlsx&#x27;</span>,header=<span class="number">3</span>)</span><br><span class="line">mydf2=data2</span><br><span class="line">mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>]=mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>].replace(<span class="string">&#x27;中国光大银行股份有限公司&#x27;</span>,<span class="string">&#x27;总行&#x27;</span>)</span><br><span class="line">mydf2.loc[:,<span class="string">&#x27;公司（必填）&#x27;</span>]=mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;中国光大银行股份有限公司&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mydf2.loc[:,<span class="string">&#x27;公司（必填）&#x27;</span>]=mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;分行&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(data2.columns.values)</span><br><span class="line">print(mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>].unique())</span><br><span class="line">print(mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>].value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment">#统计各分行体量</span></span><br><span class="line">mydata2=mydf2[<span class="string">&#x27;公司（必填）&#x27;</span>].value_counts()</span><br><span class="line">X2=<span class="built_in">list</span>(mydata2.index)</span><br><span class="line">Y2=mydata2.tolist()</span><br><span class="line">print(X2)</span><br><span class="line">print(Y2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.figure(<span class="number">2</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.facecolor&#x27;</span>] = <span class="string">&#x27;#F0F8FF&#x27;</span></span><br><span class="line">plt.grid(axis=<span class="string">&quot;y&quot;</span>,c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">plt.bar(X2,Y2,width = <span class="number">0.5</span>,facecolor=<span class="string">&#x27;#87CEEB&#x27;</span>,label=<span class="string">&#x27;各分行体量&#x27;</span>,zorder=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> x2,y2 <span class="keyword">in</span> <span class="built_in">zip</span>(X2,Y2):</span><br><span class="line">    plt.text(x2,y2+<span class="number">0.05</span>,<span class="string">&#x27;%.0f&#x27;</span> % y2,ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # mydata.plot.bar()</span></span><br><span class="line">plt.xticks(rotation=<span class="number">270</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;员工人数&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================================================</span></span><br><span class="line"><span class="comment">#绘制第三张图，将提单两和体量放在一起</span></span><br><span class="line">Y3=[<span class="number">0</span>]*<span class="built_in">len</span>(X)<span class="comment">#初始化list，Y3为长度和X相同，初始值为0</span></span><br><span class="line"><span class="keyword">for</span> ibank <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X)):</span><br><span class="line">    bankname=X[ibank]</span><br><span class="line">    k=X2.index(bankname)</span><br><span class="line">    Y3[ibank]=Y2[k]</span><br><span class="line"></span><br><span class="line">print(X)</span><br><span class="line">print(Y3)</span><br><span class="line"></span><br><span class="line">tick_label =X</span><br><span class="line">plt.figure(<span class="number">3</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.facecolor&#x27;</span>] = <span class="string">&#x27;#F0F8FF&#x27;</span></span><br><span class="line">plt.grid(axis=<span class="string">&quot;y&quot;</span>,c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">bar_width=<span class="number">0.45</span></span><br><span class="line">Xn=np.arange(<span class="built_in">len</span>(X))</span><br><span class="line">plt.bar(Xn,Y,width = bar_width,facecolor=<span class="string">&#x27;#87CEEB&#x27;</span>,label=<span class="string">&#x27;日常报销单提单量&#x27;</span>,zorder=<span class="number">100</span>)</span><br><span class="line">plt.bar(Xn+bar_width,Y3,width = bar_width,facecolor=<span class="string">&#x27;#B0C4DE&#x27;</span>,label=<span class="string">&#x27;员工人数&#x27;</span>,zorder=<span class="number">101</span>)</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(Xn,Y):</span><br><span class="line">    plt.text(x,y+<span class="number">0.05</span>,<span class="string">&#x27;%.0f&#x27;</span> % y,ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x3,y3 <span class="keyword">in</span> <span class="built_in">zip</span>(Xn,Y3):</span><br><span class="line">    plt.text(x3+bar_width,y3+<span class="number">0.05</span>,<span class="string">&#x27;%.0f&#x27;</span> % y3,ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # mydata.plot.bar()</span></span><br><span class="line">plt.xticks(Xn+bar_width/<span class="number">2</span>,tick_label)</span><br><span class="line">plt.ylabel(<span class="string">&quot;数量&quot;</span>)</span><br><span class="line"><span class="comment"># plt.legend((&#x27;日常报销单&#x27;,))</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>各种颜色的代码  <a href="https://blog.csdn.net/CD_Don/article/details/88070453">https://blog.csdn.net/CD_Don/article/details/88070453</a></p>
]]></content>
  </entry>
  <entry>
    <title>pythonRPA爬虫表格整理邮件</title>
    <url>/2021/02/13/puthonRPA%E7%88%AC%E8%99%AB%E8%A1%A8%E6%A0%BC%E6%95%B4%E7%90%86%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">import</span> pa</span><br><span class="line"><span class="keyword">import</span> getexcel</span><br><span class="line"><span class="keyword">import</span> SendEmail</span><br><span class="line"></span><br><span class="line">pa.pa()</span><br><span class="line">print(<span class="string">&#x27;爬取执行完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line">getexcel.getexcel()</span><br><span class="line">print(<span class="string">&#x27;得到输出文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">SendEmail.SendEmail()</span><br><span class="line">print(<span class="string">&quot;发送邮件完毕&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="子函数"><a href="#子函数" class="headerlink" title="子函数"></a>子函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pa</span>():</span></span><br><span class="line">    chromeDriver = <span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome(executable_path=chromeDriver)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开网址</span></span><br><span class="line">    <span class="comment"># driver.set_window_size(800,600)</span></span><br><span class="line">    url = <span class="string">&#x27;？？？/urll&#x27;</span></span><br><span class="line">    driver.get(url=url)</span><br><span class="line">    <span class="comment"># driver.maximize_window()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-user&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-user&#x27;</span>).send_keys(<span class="string">&#x27;？？？？？用户名&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-password&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-password&#x27;</span>).send_keys(<span class="string">&#x27;？？？密码&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;LOGON_BUTTON&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击我的活动</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 休眠2秒</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;home-view-navigation-activities&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 点击合并节点流程2</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;home-view-myactivities-main-VLayout-process-table-rows-row2-col0&#x27;</span>).click()</span><br><span class="line">    <span class="comment">#这里的row2代表第三个流程</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    soup = bs(driver.page_source, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># page_source得到当前网页的源代码</span></span><br><span class="line">    table = soup.find_all(<span class="string">&#x27;table&#x27;</span>)[<span class="number">1</span>].tbody;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试过程</span></span><br><span class="line">    <span class="comment"># print(table)</span></span><br><span class="line">    <span class="comment"># print(&#x27;===============================================&#x27;)</span></span><br><span class="line">    <span class="comment"># print(table.find_all(&#x27;tr&#x27;)[0])</span></span><br><span class="line">    <span class="comment"># print(&#x27;===============================================&#x27;)</span></span><br><span class="line">    <span class="comment"># print(table.find_all(&#x27;tr&#x27;)[0].find_all(&#x27;td&#x27;)[1].getText())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># df= pd.DataFrame(columns=[&#x27;流程名称&#x27;, &#x27;公司&#x27;, &#x27;状态&#x27;, &#x27;执行者&#x27;,&#x27;审核者&#x27;])</span></span><br><span class="line">    file = xlwt.Workbook()  <span class="comment"># 新建一个excel</span></span><br><span class="line">    outtable = file.add_sheet(<span class="string">&#x27;进度统计&#x27;</span>)</span><br><span class="line">    table_row = <span class="number">0</span>  <span class="comment"># 这是行数，从0行开始写</span></span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> table.find_all(<span class="string">&#x27;tr&#x27;</span>):</span><br><span class="line">        col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">&#x27;td&#x27;</span>):</span><br><span class="line">            tet = td.getText()</span><br><span class="line">            <span class="comment"># print(tet)</span></span><br><span class="line">            outtable.write(row, col, tet)</span><br><span class="line">            col = col + <span class="number">1</span>;</span><br><span class="line">        row = row + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;__label26-col2-row0&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        driver.execute_script(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">        ActionChains(driver).key_down(Keys.DOWN).perform()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    soup = bs(driver.page_source, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># page_source得到当前网页的源代码</span></span><br><span class="line">    table2 = soup.find_all(<span class="string">&#x27;table&#x27;</span>)[<span class="number">1</span>].tbody;</span><br><span class="line"></span><br><span class="line">    outtable2 = file.add_sheet(<span class="string">&#x27;进度统计2&#x27;</span>)</span><br><span class="line">    table_row = <span class="number">0</span>  <span class="comment"># 这是行数，从0行开始写</span></span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> table2.find_all(<span class="string">&#x27;tr&#x27;</span>):</span><br><span class="line">        col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">&#x27;td&#x27;</span>):</span><br><span class="line">            tet = td.getText()</span><br><span class="line">            <span class="comment"># print(tet)</span></span><br><span class="line">            outtable2.write(row, col, tet)</span><br><span class="line">            col = col + <span class="number">1</span>;</span><br><span class="line">        row = row + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    file.save(<span class="string">&#x27;进度统计.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并成一个表格，再去重</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pa</span>():</span></span><br><span class="line">    chromeDriver = <span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome(executable_path=chromeDriver)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开网址</span></span><br><span class="line">    <span class="comment"># driver.set_window_size(800,600)</span></span><br><span class="line">    url = <span class="string">&#x27;？？？？urll&#x27;</span></span><br><span class="line">    driver.get(url=url)</span><br><span class="line">    <span class="comment"># driver.maximize_window()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-user&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-user&#x27;</span>).send_keys(<span class="string">&#x27;？？？？？？&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-password&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;sap-password&#x27;</span>).send_keys(<span class="string">&#x27;？？？？？密码&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;LOGON_BUTTON&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击我的活动</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 休眠2秒</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;home-view-navigation-activities&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 点击合并节点流程2</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;home-view-myactivities-main-VLayout-process-table-rows-row2-col0&#x27;</span>).click()</span><br><span class="line">    <span class="comment">#这里的row2代表第三个流程</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    soup = bs(driver.page_source, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># page_source得到当前网页的源代码</span></span><br><span class="line">    table = soup.find_all(<span class="string">&#x27;table&#x27;</span>)[<span class="number">1</span>].tbody;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试过程</span></span><br><span class="line">    <span class="comment"># print(table)</span></span><br><span class="line">    <span class="comment"># print(&#x27;===============================================&#x27;)</span></span><br><span class="line">    <span class="comment"># print(table.find_all(&#x27;tr&#x27;)[0])</span></span><br><span class="line">    <span class="comment"># print(&#x27;===============================================&#x27;)</span></span><br><span class="line">    <span class="comment"># print(table.find_all(&#x27;tr&#x27;)[0].find_all(&#x27;td&#x27;)[1].getText())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># df= pd.DataFrame(columns=[&#x27;流程名称&#x27;, &#x27;公司&#x27;, &#x27;状态&#x27;, &#x27;执行者&#x27;,&#x27;审核者&#x27;])</span></span><br><span class="line">    file = xlwt.Workbook()  <span class="comment"># 新建一个excel</span></span><br><span class="line">    outtable = file.add_sheet(<span class="string">&#x27;进度统计&#x27;</span>)</span><br><span class="line">    table_row = <span class="number">0</span>  <span class="comment"># 这是行数，从0行开始写</span></span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> table.find_all(<span class="string">&#x27;tr&#x27;</span>):</span><br><span class="line">        col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">&#x27;td&#x27;</span>):</span><br><span class="line">            tet = td.getText()</span><br><span class="line">            <span class="comment"># print(tet)</span></span><br><span class="line">            outtable.write(row, col, tet)</span><br><span class="line">            col = col + <span class="number">1</span>;</span><br><span class="line">        row = row + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;__label26-col2-row0&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        driver.execute_script(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">        ActionChains(driver).key_down(Keys.DOWN).perform()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    soup = bs(driver.page_source, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># page_source得到当前网页的源代码</span></span><br><span class="line">    table2 = soup.find_all(<span class="string">&#x27;table&#x27;</span>)[<span class="number">1</span>].tbody;</span><br><span class="line"></span><br><span class="line">    outtable2 = file.add_sheet(<span class="string">&#x27;进度统计2&#x27;</span>)</span><br><span class="line">    table_row = <span class="number">0</span>  <span class="comment"># 这是行数，从0行开始写</span></span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> table2.find_all(<span class="string">&#x27;tr&#x27;</span>):</span><br><span class="line">        col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">&#x27;td&#x27;</span>):</span><br><span class="line">            tet = td.getText()</span><br><span class="line">            <span class="comment"># print(tet)</span></span><br><span class="line">            outtable2.write(row, col, tet)</span><br><span class="line">            col = col + <span class="number">1</span>;</span><br><span class="line">        row = row + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    file.save(<span class="string">&#x27;进度统计.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并成一个表格，再去重</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="整理表格子函数"><a href="#整理表格子函数" class="headerlink" title="整理表格子函数"></a>整理表格子函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getexcel</span>():</span></span><br><span class="line">    df1 = pd.read_excel(<span class="string">&#x27;进度统计.xls&#x27;</span>, sheet_name=<span class="number">0</span>, header=<span class="literal">None</span>)</span><br><span class="line">    df2 = pd.read_excel(<span class="string">&#x27;进度统计.xls&#x27;</span>, sheet_name=<span class="number">1</span>, header=<span class="literal">None</span>)</span><br><span class="line">    df1 = pd.concat([df1, df2], axis=<span class="number">0</span>, ignore_index=<span class="literal">False</span>)  <span class="comment"># 将df2数据与df1合并</span></span><br><span class="line">    df1 = df1.drop_duplicates()  <span class="comment"># 去重</span></span><br><span class="line">    df1 = df1.reset_index(drop=<span class="literal">True</span>) <span class="comment">#重新生成index</span></span><br><span class="line">    outdf = df1</span><br><span class="line"></span><br><span class="line">    outdf.columns = [<span class="string">&#x27;流程名称&#x27;</span>, <span class="string">&#x27;公司&#x27;</span>, <span class="string">&#x27;状态&#x27;</span>, <span class="string">&#x27;备注列&#x27;</span>, <span class="string">&#x27;执行者&#x27;</span>, <span class="string">&#x27;审核者&#x27;</span>]</span><br><span class="line">    outdf = outdf.loc[:,[<span class="string">&#x27;公司&#x27;</span>, <span class="string">&#x27;状态&#x27;</span>]]</span><br><span class="line">    <span class="comment"># print(outdf)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(outdf)):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;打开 - 待执行&#x27;</span> <span class="keyword">in</span> outdf.loc[i, <span class="string">&#x27;状态&#x27;</span>]:</span><br><span class="line">            outdf.loc[i, <span class="string">&#x27;状态&#x27;</span>] = <span class="string">&#x27;未提交&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;已提交 - 待审核&#x27;</span> <span class="keyword">in</span> outdf.loc[i, <span class="string">&#x27;状态&#x27;</span>]:</span><br><span class="line">            outdf.loc[i, <span class="string">&#x27;状态&#x27;</span>] = <span class="string">&#x27;已提交&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;已拒绝 - 待执行&#x27;</span> <span class="keyword">in</span> outdf.loc[i, <span class="string">&#x27;状态&#x27;</span>]:</span><br><span class="line">            outdf.loc[i, <span class="string">&#x27;状态&#x27;</span>] = <span class="string">&#x27;已拒绝&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># #月报合并 不体现A,b,B</span></span><br><span class="line">    <span class="comment"># print(&#x27;here&#x27;)</span></span><br><span class="line">    outdf=outdf.drop(outdf[(outdf[<span class="string">&#x27;公司&#x27;</span>]==<span class="string">&#x27;A？？？&#x27;</span>)|(outdf[<span class="string">&#x27;公司&#x27;</span>]==<span class="string">&#x27;？？？？&#x27;</span>)|(outdf[<span class="string">&#x27;公司&#x27;</span>]==<span class="string">&#x27;？？？？？&#x27;</span>)|(outdf[<span class="string">&#x27;公司&#x27;</span>]==<span class="string">&#x27;？？？？？？&#x27;</span>)].index)</span><br><span class="line">    print(outdf)</span><br><span class="line">    outdf.to_excel(<span class="string">&quot;输出版进度统计表.xls&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h1 id="发送邮件子函数"><a href="#发送邮件子函数" class="headerlink" title="发送邮件子函数"></a>发送邮件子函数</h1><p>配置一个邮件地址表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendEmail</span>():</span></span><br><span class="line">    dfmail = pd.read_excel(<span class="string">&#x27;邮箱表.xlsx&#x27;</span>, sheet_name=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 发送者邮箱</span></span><br><span class="line">    sender = <span class="string">&#x27;tao1????@163.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送者的登陆用户名和密码</span></span><br><span class="line">    user = <span class="string">&#x27;tao13131265081@163.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    password = <span class="string">&#x27;KG?????&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送者邮箱的SMTP服务器地址</span></span><br><span class="line">    smtpserver = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收者的邮箱地址</span></span><br><span class="line">    receiver = <span class="built_in">list</span>(dfmail[<span class="string">&#x27;邮箱地址&#x27;</span>])  <span class="comment"># receiver 可以是一个list</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造纯文本邮件内容</span></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&#x27;月报统计进度&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;tj&#x27;</span> + <span class="string">&#x27;&lt;tao13131265081@163.com&gt;&#x27;</span></span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&#x27;;&#x27;</span>.join(receiver)</span><br><span class="line"></span><br><span class="line">    part = MIMEText(<span class="string">&quot;月报统计结果如附件所示&quot;</span>)</span><br><span class="line">    msg.attach(part)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---这是附件部分---</span></span><br><span class="line">    <span class="comment"># xls类型附件</span></span><br><span class="line">    part = MIMEApplication(<span class="built_in">open</span>(<span class="string">&#x27;输出版进度统计表.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">    part.add_header(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;attachment&#x27;</span>, filename=<span class="string">&#x27;输出版进度统计表.xls&#x27;</span>)</span><br><span class="line">    msg.attach(part)</span><br><span class="line"></span><br><span class="line">    smtp = smtplib.SMTP()  <span class="comment"># 实例化SMTP对象</span></span><br><span class="line">    smtp.connect(smtpserver, <span class="number">25</span>)  <span class="comment"># （缺省）默认端口是25 也可以根据服务器进行设定</span></span><br><span class="line">    smtp.login(user, password)  <span class="comment"># 登陆smtp服务器</span></span><br><span class="line">    smtp.sendmail(sender, receiver, msg.as_string())  <span class="comment"># 发送邮件 ，这里有三个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    login()方法用来登录SMTP服务器，sendmail()方法就是发邮件，由于可以一次发给多个人，所以传入一个list，邮件正文</span></span><br><span class="line"><span class="string">    是一个str，as_string()把MIMEText对象变成str。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    smtp.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬取51job职位信息</title>
    <url>/2021/02/13/python%20%E7%88%AC%E5%8F%9651job%20%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>python 爬取51job 职位信息<br>将前10页的内容放在excel表中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬虫+表格+可视化</span></span><br><span class="line"><span class="comment">#将前10页的内容放在excel表中</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;51job信息&#x27;</span>)</span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">page=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> page&lt;<span class="number">10</span>:</span><br><span class="line">    url = <span class="string">&quot;https://search.51job.com/list/000000,000000,0000,00,9,99,python,2,&quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">        page) + <span class="string">&quot;.html?lang=c&amp;stype=&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;providesalary=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare=&quot;</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    text = r.text.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    bs = BeautifulSoup(text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    jobs = bs.select(<span class="string">&quot;#resultList &gt; .el&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> jobs:</span><br><span class="line">        job_name = i.select(<span class="string">&quot;.t1&quot;</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">        table.write(table_row, <span class="number">0</span>, job_name)  <span class="comment"># 将职位名写入</span></span><br><span class="line"></span><br><span class="line">        company_name = i.select(<span class="string">&quot;.t2&quot;</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">        table.write(table_row, <span class="number">1</span>, company_name)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        work_space = i.select(<span class="string">&quot;.t3&quot;</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">        table.write(table_row, <span class="number">2</span>, work_space)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        salary = i.select(<span class="string">&quot;.t4&quot;</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">        table.write(table_row, <span class="number">3</span>, salary)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        table_row = table_row + <span class="number">1</span></span><br><span class="line">        print(job_name, company_name, work_space, salary)</span><br><span class="line">    page = page + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">file.save(<span class="string">&#x27;职位信息.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="BeautifulSoup-使用select方法详解"><a href="#BeautifulSoup-使用select方法详解" class="headerlink" title="BeautifulSoup 使用select方法详解"></a>BeautifulSoup 使用select方法详解</h2><ol>
<li>通过标签名查找<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bs.select(<span class="string">&#x27;title&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>通过类名查找<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bs.select(<span class="string">&#x27;.sister&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>通过id查找<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bs.select(<span class="string">&#x27;#link1&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>子标签查找<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bs.select(<span class="string">&#x27;head &gt; title&#x27;</span>)</span><br></pre></td></tr></table></figure>





</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python面向对象于leetcode刷穿</title>
    <url>/2021/02/13/python%20%E7%B1%BB%E4%BA%8Eleetcode%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典也是 Python 提供的一种常用的数据结构，它用于存放具有映射关系的数据。</p>
<p>比如有份成绩表数据，语文：79，数学：80，英语：92，这组数据看上去像两个列表，但这两个列表的元素之间有一定的关联关系。如果单纯使用两个列表来保存这组数据，则无法记录两组数据之间的关联关系。</p>
<p>为了保存具有映射关系的数据，Python 提供了字典，字典相当于保存了两组数据，其中一组数据是关键数据，被称为 key；另一组数据可通过 key 来访问，被称为 value。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Manni&#x27;</span>&#125; </span><br></pre></td></tr></table></figure>
<p>dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</p>
<p>dict.keys()<br>以列表返回一个字典所有的键</p>
<p>dict.values()<br>以列表返回字典中的所有值</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python分析银行报销数据经验</title>
    <url>/2021/02/13/python%E5%88%86%E6%9E%90GD%E9%93%B6%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="调用子函数的方法"><a href="#调用子函数的方法" class="headerlink" title="调用子函数的方法"></a>调用子函数的方法</h1><p>**主函数中调用子函数</p>
<p>import 子函数名<br>调用格式：<br>文件名.子函数名(参数)</p>
<p>import的包如果只是子函数中用，写在子函数中即可，不用写在主函数中。<br><strong>子函数中定义</strong><br>def 函数名(参数)：</p>
<p> return</p>
<h1 id="pycharm使用相关"><a href="#pycharm使用相关" class="headerlink" title="pycharm使用相关"></a>pycharm使用相关</h1><p>ctrl + R 查找 替换等<br>ctrl +/ 注释 ，反注释</p>
<h1 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h1><p>将多个list ，先转换成字典，再转换成dataframe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(X)</span><br><span class="line">   print(Yjine)</span><br><span class="line">   print(listSTR1)</span><br><span class="line">   print(YFK2)</span><br><span class="line">   print(listSTR2)</span><br><span class="line">   print(YTD2)</span><br><span class="line"></span><br><span class="line">   <span class="comment">#=========================生成表================================</span></span><br><span class="line">   mydic = &#123;<span class="string">&quot;单据名称&quot;</span>: X,</span><br><span class="line">        <span class="string">&quot;金额&quot;</span>: listSTR1,</span><br><span class="line">        <span class="string">&quot;已付款金额&quot;</span>: listSTR2,</span><br><span class="line">        <span class="string">&quot;提单量&quot;</span>: YTD2&#125;  <span class="comment"># 将列表a，b转换成字典</span></span><br><span class="line">   outdf = DataFrame(mydic)  <span class="comment"># 将字典转换成为数据框</span></span><br></pre></td></tr></table></figure>
<h1 id="输出word"><a href="#输出word" class="headerlink" title="输出word"></a>输出word</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在生成图的地方，先保存一份图片，为后面输出图片做准备。</span></span><br><span class="line">   plt.savefig(<span class="string">&quot;filename.png&quot;</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 新建空白文档</span></span><br><span class="line">   doc1 = Document()</span><br><span class="line">   <span class="comment"># 新增文档标题</span></span><br><span class="line">   ss=fhstr+<span class="string">&#x27;分行&#x27;</span></span><br><span class="line">   doc1.add_heading(ss, <span class="number">0</span>)</span><br><span class="line">   <span class="comment"># doc1_add_table()</span></span><br><span class="line">   t = doc1.add_table(outdf.shape[<span class="number">0</span>] + <span class="number">1</span>, outdf.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment"># add the header rows.</span></span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(outdf.shape[-<span class="number">1</span>]):</span><br><span class="line">       t.cell(<span class="number">0</span>, j).text = outdf.columns[j]</span><br><span class="line"></span><br><span class="line">   <span class="comment"># add the rest of the data frame</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(outdf.shape[<span class="number">0</span>]):</span><br><span class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(outdf.shape[-<span class="number">1</span>]):</span><br><span class="line">           t.cell(i + <span class="number">1</span>, j).text = <span class="built_in">str</span>(outdf.values[i, j])</span><br><span class="line">   doc1.add_picture(<span class="string">&quot;filename.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 保存文件,这里是特定路径下的，写法，练成一个字符串；</span></span><br><span class="line">    doc1.save(<span class="string">&#x27;./myout/&#x27;</span>+ss+<span class="string">&#x27;.docx&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>


<p>​    </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python+selenium自动登录163邮箱</title>
    <url>/2021/02/13/python+Selenium%20%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95163%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p>python+Selenium 自动登录163邮箱<br>Selenium 是一个 Web 应用的自动化框架。</p>
<h2 id="安装selenium包"><a href="#安装selenium包" class="headerlink" title="安装selenium包"></a>安装selenium包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<h2 id="安装浏览器驱动"><a href="#安装浏览器驱动" class="headerlink" title="安装浏览器驱动"></a>安装浏览器驱动</h2><p>注意配合浏览器版本，我们以chrome为例</p>
<h2 id="打开某个url"><a href="#打开某个url" class="headerlink" title="打开某个url"></a>打开某个url</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">chromeDriver=<span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#等号右边 返回的是 WebDriver 类型的对象，我们可以通过这个对象来操控浏览器，比如 打开网址、选择界面元素等。</span></span><br><span class="line">driver=webdriver.Chrome(executable_path=chromeDriver)</span><br><span class="line"><span class="comment">#driver.set_window_size(800,600)</span></span><br><span class="line">url=<span class="string">&quot;https://mail.163.com&quot;</span></span><br><span class="line">driver.get(url=url)</span><br><span class="line">driver.maximize_window()</span><br></pre></td></tr></table></figure>
<p>执行完自动化代码，如果想关闭浏览器窗口可以调用WebDriver对象的 quit 方法，像这样 driver.quit()</p>
<h2 id="将浏览器驱动加入环境变量"><a href="#将浏览器驱动加入环境变量" class="headerlink" title="将浏览器驱动加入环境变量"></a>将浏览器驱动加入环境变量</h2><p>我们把浏览器驱动 所在目录 加入环境变量 Path， 再写代码时，就可以无需指定浏览器驱动路径了，像下面这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wd = webdriver.Chrome()</span><br></pre></td></tr></table></figure>
<p>加入环境变量的是chromedriver.exe所在位置的上层目录</p>
<h2 id="python路径问题"><a href="#python路径问题" class="headerlink" title="python路径问题"></a>python路径问题</h2><p>直接写windows路径，斜杠不能识别，误认为转义而报错<br>1.在windows路径写法前面写r,”&quot;为字符串中的特殊字符，加上r后变为原始字符串，则不会对字符串中的”\t”、”\r” 进行字符串转义；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wd = webdriver.Chrome(<span class="string">r&#x27;d:\webdrivers\chromedriver.exe&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>2.斜杠前再加一个斜杠,用一个”&quot;取消第二个”&quot;的特殊转义作用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chromeDriver=<span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>3.用正斜杠做目录分隔符也可以转到对应目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chromeDriver=<span class="string">&quot;D:/chromedriver_win32/chromedriver.exe&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="web页面元素定位"><a href="#web页面元素定位" class="headerlink" title="web页面元素定位"></a>web页面元素定位</h2><p>按F12去分析163登录界面的元素<br>难点在于iframe，name为空，并且id是变化的，没办法固定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iframe = driver.find_elements_by_tag_name(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">driver.switch_to.frame(iframe)</span><br></pre></td></tr></table></figure>
<p>另外设置延时，防止没有加载出来，完整版代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">chromeDriver=<span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br><span class="line">driver=webdriver.Chrome(executable_path=chromeDriver)</span><br><span class="line"><span class="comment">#driver.set_window_size(800,600)</span></span><br><span class="line">url=<span class="string">&quot;https://mail.163.com&quot;</span></span><br><span class="line">driver.get(url=url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#driver.switch_to.frame(&#x27;x-URS-iframe&#x27;)</span></span><br><span class="line">iframe = driver.find_elements_by_tag_name(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">driver.switch_to.frame(iframe)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&#x27;email&#x27;</span>).send_keys(<span class="string">&#x27;XXXXX邮箱地址&#x27;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;XXXXX邮箱密码&#x27;</span>)</span><br><span class="line">loginButton=driver.find_element_by_id(<span class="string">&#x27;dologin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">loginButton.click()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python类</title>
    <url>/2021/02/13/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="python-类"><a href="#python-类" class="headerlink" title="python 类"></a>python 类</h1><p>定义函数：<br>def myfun(a,b,c):</p>
<p>调用函数：<br>myfun(a=1,b=2,c=3)<br>如果不是一个py文件，需要先import</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>Python中私有化的方法也比较简单，即在准备私有化的属性（包括方法、数据）名字前面加两个下划线。<br>注意在Python中，函数名前后各带两个下划线<strong>的函数叫做魔法函数(Magic Methods)__init</strong>()就是一个典型的魔法函数，它的作用是在我们将类实例化给一个对象后，立即就要执行该函数让该对象完成初始化配置，<strong>init</strong>()中的参数self代表实例本身</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>直接用class Router(父类)来继承已有的类</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Excel 相关</title>
    <url>/2016/07/13/python%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install opencv-python -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>pip 和pip3 不同<br>换个源，这样网速快些<br>如果报错 通常是因为超时，这时可以换个源</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>EXCEL</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础练习</title>
    <url>/2021/02/13/python%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="os输出路径"><a href="#os输出路径" class="headerlink" title="os输出路径"></a>os输出路径</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">mypath=<span class="string">&#x27;D:/1ATJ/正式文件&#x27;</span></span><br><span class="line">filename=os.listdir(mypath)</span><br><span class="line">name=os.listdir(mypath)</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    <span class="keyword">if</span> i.endswith(<span class="string">&#x27;.pdf&#x27;</span>):</span><br><span class="line">        result.append(i)</span><br><span class="line">result_table=pd.DataFrame(result)</span><br><span class="line">result_table.to_csv(<span class="string">&#x27;rel.csv&#x27;</span>,encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意路径的写法<br>windows默认的：<br>D:\1ATJ\正式文件</p>
<p>写到python代码中的:<br>** 斜杠反过来就可以**</p>
<p>endswith用来判断文件是否以XX结尾的<br>先用一个空的list容器，然后append循环里的值，最后将list转换成dataframe，再变成表格</p>
<p>调用sweetviz输出html格式的报告</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sweetviz <span class="keyword">as</span> sv</span><br><span class="line">data=pd.read_csv(<span class="string">&#x27;sampled_dataset.csv&#x27;</span>)</span><br><span class="line">report=sv.analyze(data)</span><br><span class="line">report.show_html()</span><br></pre></td></tr></table></figure>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>单引号，双引号，三引号，转义符<br>切片<br>str[3:]</p>
<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>切片 list1[2:5:2]<br>遍历 for name in list:<br>追加数据 list.append(num)<br>追加数组 list.extend(list2)<br>数据插入 list.insert(1,3)<br>列表删除 del list[0] list.remove(1)<br>弹出列表尾部元素 list.pop()<br>查是否是成员 2 in list<br>排序 sort<br>反转list.reverse()</p>
<p>删除数组中的0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for l in list:</span><br><span class="line">	list.remove(l)</span><br></pre></td></tr></table></figure>


<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">i=random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseRule</span>(<span class="params">C</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(C)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;you win!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">        <span class="keyword">if</span> c==<span class="number">0</span>:</span><br><span class="line">            C.remove(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    n=<span class="built_in">len</span>(C)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">and</span> C[<span class="number">0</span>]&gt;<span class="number">1</span>:</span><br><span class="line">        j = C[<span class="number">0</span>]-<span class="number">1</span></span><br><span class="line">        C[<span class="number">0</span>]=C[<span class="number">0</span>]-j</span><br><span class="line">        print(C)</span><br><span class="line">        print(<span class="string">&quot;触发了留一策略：最后一叠留一&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">2</span>)<span class="keyword">and</span>(C[<span class="number">0</span>]==<span class="number">1</span> <span class="keyword">or</span> C[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> C[<span class="number">0</span>]==<span class="number">1</span>:</span><br><span class="line">            chosen=C[<span class="number">1</span>]</span><br><span class="line">            C[<span class="number">1</span>]=C[<span class="number">1</span>]-chosen</span><br><span class="line">            print(C)</span><br><span class="line">            print(<span class="string">&quot;触发了留一策略：最后两叠留一&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> C[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">            chosen=C[<span class="number">0</span>]</span><br><span class="line">            C[<span class="number">0</span>]=C[<span class="number">0</span>]-chosen</span><br><span class="line">            print(C)</span><br><span class="line">            print(<span class="string">&quot;触发了留一策略：最后两叠留一&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选中C[i]</span></span><br><span class="line">    i=random.randint(<span class="number">0</span>,n-<span class="number">1</span>)</span><br><span class="line">    chosen=C[i]</span><br><span class="line">    j=random.randint(<span class="number">1</span>,chosen)</span><br><span class="line">    C[i]=C[i]-j</span><br><span class="line">    print(C)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">sum</span>(C)&gt;<span class="number">0</span>:</span><br><span class="line">    baseRule(C)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python操作数据库</title>
    <url>/2021/02/13/python%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;test_db&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;select * from student&#x27;</span>)</span><br><span class="line">results = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">    print(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>python爬虫小说</title>
    <url>/2021/02/13/python%E7%88%AC%E8%99%AB%E5%B0%8F%E8%AF%B4/</url>
    <content><![CDATA[<p>python爬虫<br>爬取小说</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one_chapter</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 先爬取一章</span></span><br><span class="line">    <span class="comment"># 请求网页，获取数据</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="comment"># print(response.text)</span></span><br><span class="line">    sel = parsel.Selector(response.text)</span><br><span class="line">    title = sel.css(<span class="string">&#x27;h1::text&#x27;</span>)</span><br><span class="line">    contect = sel.css(<span class="string">&#x27;#content::text&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(title.get())</span></span><br><span class="line">    lines = contect.getall()</span><br><span class="line">    mytext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        mytext += line.strip() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(mytext)</span></span><br><span class="line">    mtemp: <span class="built_in">str</span>=<span class="built_in">str</span>(title.get())</span><br><span class="line">    <span class="comment">#mtemp2=mtemp+&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="comment">#print(mtemp2)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">&#x27;./output/&#x27;</span> + mtemp + <span class="string">&#x27;.txt&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf -8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(mtemp)</span><br><span class="line">        f.write(mytext)</span><br><span class="line"></span><br><span class="line"><span class="comment">#download_one_chapter(&#x27;http://www.shuquge.com/txt/63542/31289840.html&#x27;)</span></span><br><span class="line"><span class="comment">#download_one_chapter(&#x27;http://www.shuquge.com/txt/63542/31289840.html&#x27;)</span></span><br><span class="line"></span><br><span class="line">response=requests.get(<span class="string">&#x27;http://www.shuquge.com/txt/63542/index.html&#x27;</span>)</span><br><span class="line">sel = parsel.Selector(response.text)</span><br><span class="line">urls=sel.css(<span class="string">&#x27;dd &gt; a::attr(href)&#x27;</span>).getall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="comment">#print(&#x27;http://www.shuquge.com/txt/63542/&#x27;+url)</span></span><br><span class="line">    download_one_chapter(<span class="string">&#x27;http://www.shuquge.com/txt/63542/&#x27;</span>+url)</span><br></pre></td></tr></table></figure>
<p>Python 爬虫架构主要由五个部分组成，分别是调度器、URL管理器、网页下载器、网页解析器、应用程序（爬取的有价值数据）。</p>
<ul>
<li>调度器：相当于一台电脑的CPU，主要负责调度URL管理器、下载器、解析器之间的协调工作。</li>
<li>URL管理器：包括待爬取的URL地址和已爬取的URL地址，防止重复抓取URL和循环抓取URL，实现URL管理器主要用三种方式，通过内存、数据库、缓存数据库来实现。</li>
<li>网页下载器：通过传入一个URL地址来下载网页，将网页转换成一个字符串，网页下载器有urllib2（Python官方基础模块）包括需要登录、代理、和cookie，requests(第三方包)</li>
<li>网页解析器：将一个网页字符串进行解析，可以按照我们的要求来提取出我们有用的信息，也可以根据DOM树的解析方式来解析。网页解析器有正则表达式（直观，将网页转成字符串通过模糊匹配的方式来提取有价值的信息，当文档比较复杂的时候，该方法提取数据的时候就会非常的困难）、html.parser（Python自带的）、beautifulsoup（第三方插件，可以使用Python自带的html.parser进行解析，也可以使用lxml进行解析，相对于其他几种来说要强大一些）、lxml（第三方插件，可以解析 xml 和 HTML），html.parser 和 beautifulsoup 以及 lxml 都是以 DOM 树的方式进行解析的。</li>
<li>应用程序：就是从网页中提取的有用数据组成的一个应用。</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>python操作文件</title>
    <url>/2021/02/13/python%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="读取txt文件"><a href="#读取txt文件" class="headerlink" title="读取txt文件"></a>读取txt文件</h1><p>f = open(‘ip_list.txt’)<br>for row in f.readlines():</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>使用Paramiko来SSH登录一台网络设备</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&#x27;Enter your username: &#x27;</span>)</span><br><span class="line">password = getpass(<span class="string">&#x27;Enter you password: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;ip_list.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ips <span class="keyword">in</span> f.readlines():</span><br><span class="line">    ip = ips.strip()</span><br><span class="line">    ssh_client = paramiko.SSHClient()</span><br><span class="line">    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh_client.connect(hostname=ip, username=username, password=password, look_for_keys=<span class="literal">False</span>)</span><br><span class="line">    command = ssh_client.invoke_shell()</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">f&#x27;Sucessfully login to <span class="subst">&#123;ip&#125;</span>&#x27;</span>)</span><br><span class="line">    command.send(<span class="string">&#x27;term len 0\n&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>python病毒</title>
    <url>/2021/02/13/python%E7%97%85%E6%AF%92/</url>
    <content><![CDATA[<p>死循环打开网址：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    webbrowser.<span class="built_in">open</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>死循环弹窗：</p>
<p>删除C盘：</p>
<p>断网：</p>
<p>暴破解密码：<br>selenium 登录<br>密码本 测试</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>sql函数</title>
    <url>/2021/02/13/sql%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1-SQL-聚合-函数"><a href="#1-SQL-聚合-函数" class="headerlink" title="1.SQL 聚合 函数"></a>1.SQL 聚合 函数</h2><p>SQL Aggregate 函数计算从列中取得的值，返回一个单一的值。</p>
<p>有用的 Aggregate 函数：</p>
<ul>
<li>AVG() - 返回平均值</li>
<li>COUNT() - 返回行数,不包括null</li>
<li>FIRST() - 返回第一个记录的值,access用法不同，不同数据库有不同方法实现同样的效果；</li>
<li>LAST() - 返回最后一个记录的值，只有 MS Access 支持 LAST() 函数，不同数据库有不同实现方法；</li>
<li>MAX() - 返回最大值</li>
<li>MIN() - 返回最小值</li>
<li>SUM() - 返回总和</li>
</ul>
<p>SQL Scalar 函数基于输入值，返回一个单一的值。</p>
<p>有用的 Scalar 函数：</p>
<ul>
<li>UCASE() - 将某个字段转换为大写</li>
<li>LCASE() - 将某个字段转换为小写</li>
<li>MID() - 从某个文本字段提取字符，MySql 中使用</li>
<li>SubString(字段，1，end) - 从某个文本字段提取字符</li>
<li>LEN() - 返回某个文本字段的长度</li>
<li>ROUND() - 对某个数值字段进行指定小数位数的四舍五入</li>
<li>NOW() - 返回当前的系统日期和时间</li>
<li>FORMAT() - 格式化某个字段的显示方式</li>
</ul>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cout(<span class="keyword">distinct</span> col) <span class="keyword">from</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 计算去除重复数据后的数据行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> product_type)</span><br><span class="line"> <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure>
<p>COUNT(<em>)会得到包含NULL的数据行数，而COUNT(&lt;列名&gt;)会得到NULL之外的数据行数。<br>聚合函数会将NULL排除在外。但COUNT(</em>)例外，并不会排除NULL。<br>MAX/MIN函数几乎适用于所有数据类型的列。SUM/AVG函数只适用于数值类型的列。<br>想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT。<br>在聚合函数的参数中使用DISTINCT，可以删除重复数据。</p>
<h2 id="2-视图"><a href="#2-视图" class="headerlink" title="2.视图"></a>2.视图</h2><p>定义视图时不能使用ORDER BY语句，因为视图和表一样，数据行都是没有顺序的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productsum (product_type, cnt_product)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type ;</span><br></pre></td></tr></table></figure>
<h2 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3.子查询"></a>3.子查询</h2><p>子查询是一次性的，所以子查询不会像视图那样保存在存储介质中， 而是在 SELECT 语句执行之后就消失了。<br>查询出销售单价高于平均销售单价的商品<br>标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> sale_price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price) <span class="keyword">FROM</span> product);</span><br></pre></td></tr></table></figure>
<p>取出各商品种类中高于该商品种类的平均销售单价的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type, product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product ASp1</span><br><span class="line"> <span class="keyword">WHERE</span> sale_price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price)</span><br><span class="line">   <span class="keyword">FROM</span> product ASp2</span><br><span class="line">                      <span class="keyword">WHERE</span> p1.product_type <span class="operator">=</span>p2.product_type</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type);</span><br></pre></td></tr></table></figure>
<p>关联子查询中我们将外面的product表标记为p1，将内部的product设置为p2，而且通过WHERE语句连接了两个查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> AvgPriceByType (product_id, product_name,product_type,sale_price,avg_sale_price)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name,product_type <span class="keyword">as</span> py,sale_price,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price) <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> py<span class="operator">=</span>product_type  <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type)</span><br><span class="line"><span class="keyword">as</span> avg_sale_price</span><br><span class="line"><span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure>
<p>技巧主要是子查询，as等等 要有表，然后通过navicat一点点试</p>
<h2 id="4-字符串函数"><a href="#4-字符串函数" class="headerlink" title="4.字符串函数"></a>4.字符串函数</h2><p>CONCAT – 拼接<br>语法：CONCAT(str1, str2, str3)</p>
<p>MySQL中使用 CONCAT 函数进行拼接。</p>
<p>LENGTH – 字符串长度<br>语法：LENGTH( 字符串 )</p>
<p>LOWER – 小写转换<br>LOWER 函数只能针对英文字母使用，它会将参数中的字符串全都转换为小写。该函数不适用于英文字母以外的场合，不影响原本就是小写的字符。</p>
<p>类似的， UPPER 函数用于大写转换。</p>
<p>REPLACE – 字符串的替换<br>语法：REPLACE( 对象字符串，替换前的字符串，替换后的字符串 )</p>
<p>SUBSTRING – 字符串的截取<br>语法：SUBSTRING （对象字符串 FROM 截取的起始位置 FOR 截取的字符数）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DDL ：创建表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> samplestr;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> samplestr</span><br><span class="line">(str1 <span class="type">VARCHAR</span> (<span class="number">40</span>),</span><br><span class="line">str2 <span class="type">VARCHAR</span> (<span class="number">40</span>),</span><br><span class="line">str3 <span class="type">VARCHAR</span> (<span class="number">40</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- DML：插入数据</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;opx&#x27;</span>,	<span class="string">&#x27;rt&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;太阳&#x27;</span>,	<span class="string">&#x27;月亮&#x27;</span>, <span class="string">&#x27;火星&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;aaa&#x27;</span>,	<span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;xyz&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;@!#$%&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;ABC&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;aBC&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;abc哈哈&#x27;</span>,  <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;abcdefabc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplestr (str1, str2, str3) <span class="keyword">VALUES</span> (<span class="string">&#x27;micmic&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<h2 id="5-日期函数"><a href="#5-日期函数" class="headerlink" title="5.日期函数"></a>5.日期函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">as</span> now,</span><br><span class="line"><span class="built_in">EXTRACT</span>(<span class="keyword">YEAR</span>   <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">year</span>,</span><br><span class="line"><span class="built_in">EXTRACT</span>(<span class="keyword">MONTH</span>  <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">month</span>,</span><br><span class="line"><span class="built_in">EXTRACT</span>(<span class="keyword">DAY</span>    <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">day</span>,</span><br><span class="line"><span class="built_in">EXTRACT</span>(<span class="keyword">HOUR</span>   <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line"><span class="built_in">EXTRACT</span>(<span class="keyword">MINUTE</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">MINute</span>,</span><br><span class="line"><span class="built_in">EXTRACT</span>(<span class="keyword">SECOND</span> <span class="keyword">FROM</span> <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">second</span>;</span><br></pre></td></tr></table></figure>
<h2 id="6-表连接"><a href="#6-表连接" class="headerlink" title="6.表连接"></a>6.表连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.in_dpt &#x3D; department.dpt_name</span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure>
<p>刚才的语句等同于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee JOIN department</span><br><span class="line">ON employee.in_dpt &#x3D; department.dpt_name</span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure>
<h2 id="7-窗函数"><a href="#7-窗函数" class="headerlink" title="7.窗函数"></a>7.窗函数</h2><p>函数名 over(partition  by order by) 名字</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>python自动化办公</title>
    <url>/2021/02/13/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</url>
    <content><![CDATA[<h1 id="1-word模板"><a href="#1-word模板" class="headerlink" title="1. word模板"></a>1. word模板</h1><p>python-docx是一个操作Word文档非常好用的python模块，入门也非常简单。它把一个Word文档像一层层剥洋葱一样拆分为Document,Paragraph,Run三层。<br>Run又是对段落的拆分。一个run对象是相同样式文本的延续，只要文本的格式（大小、颜色等）没有改变，那么就是一个run，一旦改变就是另外一个run了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docx</span><br><span class="line">document = Document(<span class="string">&#x27;/Users/cuiyingdan/Desktop/邀请函模版.docx&#x27;</span>)</span><br><span class="line">all_paragraphs = document.paragraphs</span><br></pre></td></tr></table></figure>
<p>文本替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_text</span>(<span class="params">old_text, new_text</span>):</span></span><br><span class="line">    <span class="comment">#读取所有的自然段</span></span><br><span class="line">    all_paragraphs = document.paragraphs</span><br><span class="line">    <span class="keyword">for</span> paragraph <span class="keyword">in</span> all_paragraphs:</span><br><span class="line">        <span class="keyword">for</span> run <span class="keyword">in</span> paragraph.runs:</span><br><span class="line">            run_text = run.text.replace(old_text, new_text)</span><br><span class="line">            run.text = run_text</span><br></pre></td></tr></table></figure>
<h1 id="2-表格处理"><a href="#2-表格处理" class="headerlink" title="2.表格处理"></a>2.表格处理</h1><p>表格的处理工作用到Python的openpyxl模块【只能操作新版本】，或者xlwt xlrd [推荐，对于老版本适用]<br>Workbook(工作簿，一个包含多个Sheet的Excel文件)<br>Worksheet（工作表，一个Workbook有多个Worksheet，如“Sheet1”,“Sheet2”等）<br>Cell（单元格，存储具体的数据对象）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wb = load_workbook(<span class="string">&#x27;/Users/cuiyingdan/Desktop/data.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.active <span class="comment">#用wb.active获取第一张Worksheet工作表：</span></span><br></pre></td></tr></table></figure>
<p>库的官网<br><a href="https://xlrd.readthedocs.io/en/latest/">xlrd</a></p>
<h2 id="2-1例子"><a href="#2-1例子" class="headerlink" title="2.1例子"></a>2.1例子</h2><p>人名的拼音</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin, Style</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># style = Style.TONE3</span></span><br><span class="line"></span><br><span class="line">data1=pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>)</span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;输出结果&#x27;</span>)</span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line">table.write(table_row, <span class="number">0</span>, <span class="string">&#x27;姓名&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">1</span>, <span class="string">&#x27;拼音&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table_row=table_row+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data1)):</span><br><span class="line">    print(i)</span><br><span class="line">    name = data1.iloc[i, <span class="number">0</span>]</span><br><span class="line">    Pname=lazy_pinyin(name)</span><br><span class="line">    P2name = <span class="string">&#x27;&#x27;</span>.join(Pname)</span><br><span class="line">    print(name)</span><br><span class="line">    print(Pname)</span><br><span class="line">    print(P2name)</span><br><span class="line">    <span class="comment"># 杨蕾</span></span><br><span class="line">	<span class="comment">#[&#x27;yang&#x27;, &#x27;lei&#x27;]</span></span><br><span class="line">    <span class="comment">#yanglei</span></span><br><span class="line">    table.write(table_row, <span class="number">0</span>, name)  <span class="comment"># 将,,写入</span></span><br><span class="line">    table.write(table_row, <span class="number">1</span>, P2name)  <span class="comment"># 将,,写入</span></span><br><span class="line">    table_row = table_row + <span class="number">1</span></span><br><span class="line">    <span class="comment"># author=dfS.iloc[i, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(lazy_pinyin(&#x27;聪明的小兔子&#x27;))</span></span><br><span class="line">file.save(<span class="string">&#x27;查询结果.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="3-系统文件"><a href="#3-系统文件" class="headerlink" title="3.系统文件"></a>3.系统文件</h1><p>文件夹下批量改名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件夹下批量改名</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path=<span class="string">r&quot;D:/&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span><span class="string">&quot;3A&quot;</span> <span class="keyword">in</span> file:</span><br><span class="line">        <span class="comment"># print(file)</span></span><br><span class="line">        str1=os.path.join(path,file)</span><br><span class="line">        str2=str1.replace(<span class="string">&quot;3A_&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        os.rename(str1,str2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>自动化办公</tag>
      </tags>
  </entry>
  <entry>
    <title>sklearn初探</title>
    <url>/2022/01/29/skearn%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>sql刷题</title>
    <url>/2022/01/28/sql%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>窗口函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">PARTITION</span> <span class="keyword">by</span> `课程` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `成绩` <span class="keyword">DESC</span>) <span class="keyword">as</span> `课程排名`</span><br></pre></td></tr></table></figure>
<ul>
<li><p>错误1<br>==注意PARTITION by和ORDER BY之间是个空格，没有逗号==。</p>
</li>
<li><p>错误2<br>==注意select后面的字段用逗号隔开，但是最后不要有多余的逗号==<br><img src="https://raw.githubusercontent.com/peacefullmind/Picture/main/%E9%94%99%E8%AF%AF2.png"><br>此问题易发在复制字段上。</p>
</li>
</ul>
<h2 id="补充小的语法点"><a href="#补充小的语法点" class="headerlink" title="补充小的语法点"></a>补充小的语法点</h2><ul>
<li><p>对于空值的处理<br>ifnull(a,b)a是单列，b是当a为空时的值，如null,避免报错。<br>==当a是个查询语句的时候，应该整体用括号括起来==</p>
</li>
<li><p>排名<br>limit n子句表示查询结果返回前n条数据<br>offset n表示跳过x条语句<br>limit y offset x 分句表示查询结果跳过 x 条数据，读取前 y 条数据<br>limit y,x<br>配合order by 使用<br>或者新增一列表示排名，然后用 where r=n</p>
</li>
<li><p>日期函数求差值<br>==diffdate(a.日期, b.日期) = 1”或者“timestampdiff(day, a.日期, b.日期) = -1”，以此为基准，提取表中的数据==</p>
</li>
<li><p>cross join<br>找出前一天</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>sql基本语句</title>
    <url>/2021/02/13/sql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="1-选择列"><a href="#1-选择列" class="headerlink" title="1. 选择列"></a>1. 选择列</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> col_name,col_name <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<h2 id="2-返回唯一不同的值"><a href="#2-返回唯一不同的值" class="headerlink" title="2. 返回唯一不同的值"></a>2. 返回唯一不同的值</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> country <span class="keyword">from</span> Websites;</span><br></pre></td></tr></table></figure>
<h2 id="3-select-where子句"><a href="#3-select-where子句" class="headerlink" title="3.select where子句"></a>3.select where子句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Websites <span class="keyword">where</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>where中的运算符<br>等于 =<br>不等于 &lt;&gt;<br>在某个范围内 between<br>搜索某种模式 like<br>指定针对某个列的多个可能值 in</p>
<h2 id="4-and-以及or运算符"><a href="#4-and-以及or运算符" class="headerlink" title="4.and 以及or运算符"></a>4.and 以及or运算符</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Websites <span class="keyword">where</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span> <span class="keyword">and</span> alexa <span class="operator">&gt;</span><span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<h2 id="5-order-by用法"><a href="#5-order-by用法" class="headerlink" title="5.order by用法"></a>5.order by用法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> num；</span><br></pre></td></tr></table></figure>
<p>省略默认升序</p>
<p>order by ,,,desc<br>desc 降序</p>
<p>ORDER BY 多列的时候，先按照第一个column name排序，在按照第二个column name排序；例子：<br> 1）、先将country值这一列排序，同为CN的排前面，同属USA的排后面；<br> 2）、然后在同属CN的这些多行数据中，再根据alexa值的大小排列。<br> 3）、ORDER BY 排列时，不写明ASC DESC的时候，默认是ASC</p>
<p>order by A,B        这个时候都是默认按升序排列<br>order by A desc,B   这个时候 A 降序，B 升序排列<br>order by A ,B desc  这个时候 A 升序，B 降序排列。<br>即 desc 或者 asc 只对它紧跟着的第一个列名有效，其他不受影响，仍然是默认的升序。</p>
<h2 id="6-insert-into语句"><a href="#6-insert-into语句" class="headerlink" title="6.insert into语句"></a>6.insert into语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span>(col,col,col)</span><br><span class="line"><span class="keyword">values</span>(<span class="keyword">value</span>,<span class="keyword">value</span>,<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure>
<h2 id="7-update语句"><a href="#7-update语句" class="headerlink" title="7.update语句"></a>7.update语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">table</span></span><br><span class="line"><span class="keyword">set</span> col<span class="operator">=</span>val,col2<span class="operator">=</span>val2</span><br><span class="line"><span class="keyword">where</span> col3<span class="operator">=</span>val3;</span><br></pre></td></tr></table></figure>
<p>如果不加where会会将特定列的所有值设置为更新值</p>
<h2 id="8-delete语句"><a href="#8-delete语句" class="headerlink" title="8.delete语句"></a>8.delete语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">where</span> col<span class="operator">=</span>val;</span><br></pre></td></tr></table></figure>
<p>删除特定行</p>
<p>删除所有行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure>
<h2 id="9-select-top语句"><a href="#9-select-top语句" class="headerlink" title="9.select top语句"></a>9.select top语句</h2><p>有的数据库系统都支持 SELECT TOP 语句。 MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。</p>
<h2 id="10-like语句"><a href="#10-like语句" class="headerlink" title="10.like语句"></a>10.like语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">where</span> col <span class="keyword">like</span> <span class="string">&#x27;q%&#x27;</span></span><br></pre></td></tr></table></figure>
<p>q% col中以q开始的<br>%q 以q结尾的<br>%q%  中间是q的</p>
<p>not like</p>
<h2 id="11-通配符"><a href="#11-通配符" class="headerlink" title="11.通配符"></a>11.通配符</h2><p>SQL 中的通配符是 _ 和 % 。其中 _ 代表一个未指定字符，% 代表不定个未指定字符</p>
<p>表示一个字符 _</p>
<p>MySQL 中使用 REGEXP 或 NOT REGEXP 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">where</span> name REGEXP <span class="string">&#x27;^[ABC]&#x27;</span></span><br></pre></td></tr></table></figure>
<p>选取name中所有以ABC开始的<br>MySQL 中使用 REGEXP 或 NOT REGEXP 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[A-H]&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> birthday REGEXP <span class="string">&#x27;^199[1-5]&#x27;</span></span><br></pre></td></tr></table></figure>
<p>或者 注意birthdayday字段设置为date，然后运用比较</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">WHERE</span> birthdayday <span class="operator">&gt;=</span><span class="number">19910101</span> <span class="keyword">and</span> birthdayday <span class="operator">&lt;=</span> <span class="number">19951231</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DDL ：创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> samplelike</span><br><span class="line">( strcol <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (strcol)</span><br><span class="line">samplelike);</span><br><span class="line"><span class="comment">-- DML ：插入数据</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION; <span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplelike (strcol) <span class="keyword">VALUES</span> (<span class="string">&#x27;abcddd&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplelike (strcol) <span class="keyword">VALUES</span> (<span class="string">&#x27;dddabc&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplelike (strcol) <span class="keyword">VALUES</span> (<span class="string">&#x27;abdddc&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplelike (strcol) <span class="keyword">VALUES</span> (<span class="string">&#x27;abcdd&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplelike (strcol) <span class="keyword">VALUES</span> (<span class="string">&#x27;ddabc&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> samplelike (strcol) <span class="keyword">VALUES</span> (<span class="string">&#x27;abddc&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务</span></span><br></pre></td></tr></table></figure>
<p>其中的%是代表“零个或多个任意字符串”的特殊符号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> samplelike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;ddd%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> samplelike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;%ddd%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> samplelike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;%ddd&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>_下划线匹配任意 1 个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> samplelike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;abc__&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="12-where-in"><a href="#12-where-in" class="headerlink" title="12.where in"></a>12.where in</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;小绿&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="13-where-between-and"><a href="#13-where-between-and" class="headerlink" title="13.where between and"></a>13.where between and</h2><p>数字，字母，日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> web_log</span><br><span class="line"><span class="keyword">where</span> <span class="type">date</span> <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-12-31&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>BETWEEN 的特点就是结果中会包含 100 和 1000 这两个临界值<br>not between and</p>
<h2 id="14-别名"><a href="#14-别名" class="headerlink" title="14.别名"></a>14.别名</h2><p>列的别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,concat(url, <span class="string">&#x27;,&#x27;</span>,alexa, <span class="string">&#x27;,&#x27;</span>, country)<span class="keyword">AS</span> site_info</span><br><span class="line"><span class="keyword">from</span> Wrbsites;</span><br></pre></td></tr></table></figure>
<p>表的别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> w.name, w.url, a.count, a.date</span><br><span class="line"><span class="keyword">FROM</span> Websites <span class="keyword">AS</span> w, access_log <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.site_id<span class="operator">=</span>w.id <span class="keyword">and</span> w.name<span class="operator">=</span>&quot;菜鸟教程&quot;;</span><br></pre></td></tr></table></figure>
<p>因为from先执行；</p>
<h2 id="15-group-by"><a href="#15-group-by" class="headerlink" title="15.group by"></a>15.group by</h2><p>group by 分组后展示分组后的第一组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cout(<span class="number">1</span>),classid <span class="keyword">from</span> stu</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> classid</span><br></pre></td></tr></table></figure>
<p>在 GROUP BY 子句中指定的列称为聚合键或者分组列。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> purchase_price, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> purchase_price;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="16-having"><a href="#16-having" class="headerlink" title="16.having"></a>16.having</h2><p>HAVING子句用于对分组进行过滤，可以使用数字、聚合函数和GROUP BY中指定的列名（聚合键）。<br>WHERE子句只能指定记录（行）的条件，而不能用来指定组的条件（例如，“数据行数为 2 行”或者“平均值为 500”等）。</p>
<p>可以在GROUP BY后使用HAVING子句。</p>
<p>HAVING的用法类似WHERE</p>
<h2 id="17-总结"><a href="#17-总结" class="headerlink" title="17.总结"></a>17.总结</h2><p>总结</p>
<p>==写的顺序==<br>insert delete update select<br>select from where group by having order by limit</p>
<p>==实际执行顺序==<br>from where group by select having order by limit</p>
<ul>
<li><p>SQL中可以随意使用换行符，不影响语句执行（但不可插入空行）。</p>
</li>
<li><p>设定汉语别名时需要使用双引号（”）括起来。</p>
</li>
<li><p>注释是SQL语句中用来标识说明或者注意事项的部分。分为1行注释”– “和多行注释两种”/* */“。</p>
</li>
<li><p>在SELECT语句中使用DISTINCT可以删除重复行。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type,<span class="built_in">COUNT</span>(product_id)</span><br><span class="line"><span class="keyword">FROM</span> product </span><br><span class="line"><span class="keyword">WHERE</span> regist_date <span class="operator">&gt;</span> <span class="string">&#x27;2009-09-01&#x27;</span></span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>vscode使用</title>
    <url>/2021/03/15/vscode%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Hbuilder比较<br>VScode设置和插件</p>
<p>右键 新建html文件后</p>
<p>感叹号加回车 自动生成html文件</p>
<p>shift+alt+下箭头 复制本行到下一行</p>
<p>ctrl+X 删除本行</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow安装</title>
    <url>/2021/02/13/tensorflow%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="tensorflow-安装"><a href="#tensorflow-安装" class="headerlink" title="tensorflow 安装"></a>tensorflow 安装</h1><p>选择是安装GPU版本，还是CPU版本，<br>选择GPU<br>下载cuda，cnnti，然后注意将下载的cnnti版本的内容拷贝到cudn<br>注意 cuda cnnti tensorflow版本适配，最好不要太高版本</p>
]]></content>
  </entry>
  <entry>
    <title>sql语句表结构</title>
    <url>/2021/02/13/sql%E8%AF%AD%E5%8F%A5%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="1-查看表结构"><a href="#1-查看表结构" class="headerlink" title="1.查看表结构"></a>1.查看表结构</h1><p>查看表结构，字段类型<br>describe 或者desc</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> table_name;</span><br></pre></td></tr></table></figure>
<p>查询建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br></pre></td></tr></table></figure>
<p>查询出表的列信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> COLUMNS <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>
<h1 id="2-表创建和修改"><a href="#2-表创建和修改" class="headerlink" title="2.表创建和修改"></a>2.表创建和修改</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Person</span><br><span class="line">(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>重命名一张表的语句有多种形式，以下 3 种格式效果是一样的：</p>
<p>RENAME TABLE 原名 TO 新名字;</p>
<p>ALTER TABLE 原名 RENAME 新名;</p>
<p>ALTER TABLE 原名 RENAME TO 新名;</p>
<h1 id="3-列的增加，删除，修改"><a href="#3-列的增加，删除，修改" class="headerlink" title="3.列的增加，删除，修改"></a>3.列的增加，删除，修改</h1><p>增加列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu</span><br><span class="line"><span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">255</span>)</span><br></pre></td></tr></table></figure>
<p>删除列【某些数据库不允许这样】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">COLUMN</span> address</span><br></pre></td></tr></table></figure>
<p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">COLUMN</span> 列名;</span><br></pre></td></tr></table></figure>
<p>修改字段类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> student MODIFY birthdayday <span class="type">date</span></span><br></pre></td></tr></table></figure>

<h1 id="4-约束"><a href="#4-约束" class="headerlink" title="4.约束"></a>4.约束</h1><p>创建表时，<br>列名，字段类型，约束<br>在 SQL 中，我们有如下约束：</p>
<p>NOT NULL - 指示某列不能存储 NULL 值。<br>UNIQUE - 保证某列的每行必须有唯一的值。<br>PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。<br>FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。<br>CHECK - 保证列中的值符合指定的条件。<br>DEFAULT - 规定没有给列赋值时的默认值。</p>
<p>AUTO_INCREMENT</p>
<h1 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5.数据类型"></a>5.数据类型</h1><p>数值类型<br>日期类型<br>字符串类型</p>
<p>bigint 能满足整数存储的需求<br>varchar(N) 能满足字符串的需求</p>
<p>SQL关键字总是大写，以示突出，表名和列名均使用小写。<br>int<br>float<br>double<br>enum 单选 ENUM(‘a’,’b’,’c’)<br>set 多选 SET(‘1’,’2’,’3’)<br>date 日期<br>time 时间点<br>year<br>char<br>varchar<br>text 长本文</p>
<h1 id="6-sql语句实例"><a href="#6-sql语句实例" class="headerlink" title="6.sql语句实例"></a>6.sql语句实例</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product</span><br><span class="line">(product_id <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> product_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> product_type <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> sale_price <span class="type">INTEGER</span> ,</span><br><span class="line"> purchase_price <span class="type">INTEGER</span> ,</span><br><span class="line"> regist_date <span class="type">DATE</span> ,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (product_id));</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0002&#x27;</span>, <span class="string">&#x27;打孔器&#x27;</span>, <span class="string">&#x27;办公用品&#x27;</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">&#x27;2009-09-11&#x27;</span>),</span><br><span class="line">                              (<span class="string">&#x27;0003&#x27;</span>, <span class="string">&#x27;运动T恤&#x27;</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="keyword">NULL</span>),</span><br><span class="line">                              (<span class="string">&#x27;0004&#x27;</span>, <span class="string">&#x27;菜刀&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">&#x27;2009-09-20&#x27;</span>);  </span><br></pre></td></tr></table></figure>
<h1 id="7-问题"><a href="#7-问题" class="headerlink" title="7.问题"></a>7.问题</h1><p>sql中列名和关键字冲突<br>在oracle中使用双引号””，将冲突的列名括起来<br>MYSQL中使用反引号(`)将数据括起来（Esc下的按键）<br>SQL Server中使用方括号[]或者双引号都可以</p>
<p>注释sql的快捷键：Ctrl+/        取消注释：Shift+Ctrl+/<br>刷新</p>
<h1 id="8-实例"><a href="#8-实例" class="headerlink" title="8.实例"></a>8.实例</h1><h2 id="按照映射连接"><a href="#按照映射连接" class="headerlink" title="按照映射连接"></a>按照映射连接</h2><p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> data04</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">COLUMN</span> f2</span><br></pre></td></tr></table></figure>
<p>修改列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> data04 RENAME <span class="keyword">COLUMN</span> f3 <span class="keyword">TO</span> 指标编码;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> data04 RENAME <span class="keyword">COLUMN</span> f5 <span class="keyword">TO</span> 周期;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> data04 RENAME <span class="keyword">COLUMN</span> f7 <span class="keyword">TO</span> 公司编码;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> data04 RENAME <span class="keyword">COLUMN</span> f9 <span class="keyword">TO</span> 币种编码;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> data04 RENAME <span class="keyword">COLUMN</span> f11 <span class="keyword">TO</span> 值;</span><br></pre></td></tr></table></figure>
<p>左联，将查询结果保存到新表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> outTable (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> data04 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `机构` <span class="keyword">ON</span> data04.`公司编码`<span class="operator">=</span>`机构`.`机构代码`);</span><br></pre></td></tr></table></figure>
<p>左联，将查询结果2保存到新表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> outtable2(</span><br><span class="line"><span class="keyword">SELECT</span> outtable.`日期`,outtable.`机构代码`,outtable.`机构名称`,outtable.`指标编码`,b.`指标名称`,outtable.`周期`,outtable.`币种编码`,outtable.`数值`</span><br><span class="line"><span class="keyword">FROM</span> outtable </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `指标` <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> outtable.`指标编码`<span class="operator">=</span>b.ACCOUNT);</span><br></pre></td></tr></table></figure>
<h2 id="比较两个表"><a href="#比较两个表" class="headerlink" title="比较两个表"></a>比较两个表</h2><p>比较两个表的差异</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t2.<span class="operator">*</span> <span class="keyword">FROM</span> t2 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t1 <span class="keyword">ON</span> t2.id<span class="operator">=</span>t1.id <span class="keyword">WHERE</span> t1.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, `描述`</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"> <span class="keyword">SELECT</span> id,`描述` <span class="keyword">FROM</span> `entity生产`</span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"> <span class="keyword">SELECT</span> id,`描述` <span class="keyword">FROM</span> `entity测试`</span><br><span class="line">) tb1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> id,`描述`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DDL</tag>
      </tags>
  </entry>
  <entry>
    <title>web开发</title>
    <url>/2021/04/10/web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="从url输入到返回请求的过程"><a href="#从url输入到返回请求的过程" class="headerlink" title="从url输入到返回请求的过程"></a>从url输入到返回请求的过程</h2><p>用户在浏览器输入url，url通过dns解析成ip+端口的形式，这个是http请求的目标地址，发送http请求至server端【三次握手】，server端根据接收到的参数返回，前端页面（浏览器渲染）和数据。</p>
<p>url为什么要解析？dns查询规则是什么？<br>因为url是人类认识的，真正的server地址是IP加端口。<br>先hosts文件，本地dns解析器，计算机配置的dns服务器，根服务器。</p>
<p>应用层抓包工具：fiddler，postman，F12</p>
<h2 id="从网卡把数据包传输出去到服务器发生了什么？参考OSI模型"><a href="#从网卡把数据包传输出去到服务器发生了什么？参考OSI模型" class="headerlink" title="从网卡把数据包传输出去到服务器发生了什么？参考OSI模型"></a>从网卡把数据包传输出去到服务器发生了什么？参考OSI模型</h2><p>网卡——&gt;交换机——&gt;路由器——&gt;服务器<br>mac——&gt;ip——&gt;端口——&gt;应用协议<br>物理层  数据链路层 网络层  传输层 应用层</p>
<p>包含网络层的抓包<br>wireshark<br>网络拓扑模拟软件 Packet Tracer</p>
<p>OSI模型，TCP/IP模型</p>
<p>Ip出于TCP/IP的网络层，网络层的主要作用是：实现主机与主机之间的通信，也叫点对点（end to end）通信。<br>分不清IP（网络层）和MAC（数据链路层）之间的区别和关系。<br>其实很容易区分，在上面我们知道IP的作用是主机之间通信用的，而MAC的作用则是实现「直连」<br>的两个设备之间通信，而IP则负责在「没有直连」的两个网络之间进行通信传输。<br>源IP地址和目标IP地址在传输过程中是不会变化的，只有源MAC地址和目标MAC一直在变化。<br>P地址（IPv4地址）由32位正整数来表示，IP地址在计算机是以二进制的方式处理的。<br>而人类为了方便记忆采用了点分十进制的标记方式，也就是将32位IP地址以每8位为组，共分为2组，每组以「.」隔开，再将每组转换成十进制。<br>10.100.122.2/24 标识前24位是网络号，剩余的8位是主机号。<br>另外一种划分网络号和主机号的形式就是子网掩码，掩码的意思是覆盖掉主机号，剩余的是网络号。</p>
<h2 id="http常见的状态码"><a href="#http常见的状态码" class="headerlink" title="http常见的状态码"></a>http常见的状态码</h2><p>1XX 中间状态<br>2XX 成功<br>3XX 重定向<br>4XX 客户端错误<br>5XX 服务器错误</p>
<p>https是在http与tcp层之间层架了SSL/TLS安全传输层。<br>HTTP连接建立相对简单，TCP三次握手之后便可进行HTTP的文传输.而HTTPS在TCP三次握手之后，还需进行SSLTLS的握手过程，才可进入加密报文传输。<br>HTTP的端口号是80，HTTPS的端口号是443.<br>HTTPS协议需要向CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>xgboost</title>
    <url>/2021/02/13/xgboost/</url>
    <content><![CDATA[<p>xgboost所有的树都是二叉的。</p>
]]></content>
  </entry>
  <entry>
    <title>二维表转换与透视表python</title>
    <url>/2021/04/24/%E4%BA%8C%E7%BB%B4%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%8E%E9%80%8F%E8%A7%86%E8%A1%A8python/</url>
    <content><![CDATA[<h2 id="二维表转换"><a href="#二维表转换" class="headerlink" title="二维表转换"></a>二维表转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.read_excel(<span class="string">&quot;data.xlsx&quot;</span>,<span class="string">&quot;Sheet1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>df数据为<br><img src="/images/df%E6%95%B0%E6%8D%AE.jpg" alt="df数据"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将二维表转换成一维表</span></span><br><span class="line">new_data=df.set_indwx(<span class="string">&quot;地区&quot;</span>) <span class="comment"># 将df中的地区一列设置为索引列</span></span><br><span class="line">df1 = new_data.stack()  <span class="comment"># stack的返回对象df1是一个二级索引Series对象</span></span><br><span class="line">df2 = df1.reset_index() <span class="comment"># 通过reset_index函数将Series对象的二级索引均转化为DataFrame对象的列值</span></span><br><span class="line"> df2.columns = [<span class="string">&#x27;地区&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;金额&#x27;</span>]</span><br><span class="line">df2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 将一维数据表转化为二维数据表：</span></span><br><span class="line">s = pd.Series(<span class="built_in">list</span>(df2[<span class="string">&#x27;金额&#x27;</span>]),index=[df2[<span class="string">&#x27;地区&#x27;</span>],df2[<span class="string">&#x27;时间&#x27;</span>]])  <span class="comment"># 利用一维数据表df2构造一个二级索引Series对象</span></span><br><span class="line">df3 = s.unstack() <span class="comment"># 对s执行stack的逆操作unstack</span></span><br><span class="line">df3</span><br></pre></td></tr></table></figure>
<h2 id="分类型数据"><a href="#分类型数据" class="headerlink" title="分类型数据"></a>分类型数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&quot;状态&quot;</span>] = df[<span class="string">&quot;状态&quot;</span>].astype(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">df[<span class="string">&quot;状态&quot;</span>].cat.set_categories([<span class="string">&quot;完成&quot;</span>,<span class="string">&quot;待供&quot;</span>,<span class="string">&quot;提供&quot;</span>,<span class="string">&quot;被拒供&quot;</span>],inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="透视数据"><a href="#透视数据" class="headerlink" title="透视数据"></a>透视数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df,index=[<span class="string">&quot;经理&quot;</span>,<span class="string">&quot;销售代表&quot;</span>])</span><br></pre></td></tr></table></figure>
<p>通过将“销售代表”与其“经理”分组来开始汇总数据并进行汇总,其他列我们暂时不想看。那我们通过显式定义 values 字段来指定要显示的列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df,index=[<span class="string">&quot;经理&quot;</span>,<span class="string">&quot;销售代表&quot;</span>],values=[<span class="string">&quot;价格&quot;</span>])</span><br></pre></td></tr></table></figure>
<p>价格会自动对数据进行平均，但我们可以进行计数或总和。使用aggfunc和添加np.sum。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df,index=[<span class="string">&quot;经理&quot;</span>,<span class="string">&quot;销售代表&quot;</span>],values=[<span class="string">&quot;价格&quot;</span>],aggfunc=np.<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>
<p>aggfunc可以添加不同的聚合函数。可以使用numpy.mean函数求平均值并len计数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df,index=[<span class="string">&quot;经理&quot;</span>,<span class="string">&quot;销售代表&quot;</span>],values=[<span class="string">&quot;价格&quot;</span>],aggfunc=[np.mean,<span class="built_in">len</span>])</span><br></pre></td></tr></table></figure>
<p>透视表pivot_table()是一种进行分组统计的函数，参数aggfunc决定统计类型。</p>
<h2 id="多层索引与转换"><a href="#多层索引与转换" class="headerlink" title="多层索引与转换"></a>多层索引与转换</h2><p>stack<br>unstack</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>使用openyxl来处理表格</title>
    <url>/2021/04/24/%E4%BD%BF%E7%94%A8openyxl%E6%9D%A5%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> transData</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;MNT_000_快报(集团汇总查看)202103期从系统下载数据2.xlsm&#x27;</span>,data_only=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#源数据</span></span><br><span class="line">mysheet = wb.get_sheet_by_name(<span class="string">&#x27;M03-集团汇总输出给快报&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wb2=load_workbook(<span class="string">&#x27;202102.xlsx&#x27;</span>,data_only=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#目标数据模板,模板格式要设置对，百分比等</span></span><br><span class="line">mysheet2=wb2.get_sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">transData.tranData(mysheet[<span class="string">&#x27;M43&#x27;</span>:<span class="string">&#x27;P63&#x27;</span>],mysheet2[<span class="string">&#x27;D11&#x27;</span>:<span class="string">&#x27;G31&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranData</span>(<span class="params">tuple1,tuple2</span>):</span></span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> row_obj <span class="keyword">in</span> tuple1:</span><br><span class="line">        l = []</span><br><span class="line">        <span class="keyword">for</span> cell_obj <span class="keyword">in</span> row_obj:</span><br><span class="line">            myvalue = cell_obj.value</span><br><span class="line">            l.append(myvalue)</span><br><span class="line">        <span class="built_in">list</span>.append(l)</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row_obj <span class="keyword">in</span> tuple2:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> cell_obj <span class="keyword">in</span> row_obj:</span><br><span class="line">            cell_obj.value = <span class="built_in">list</span>[i][j]</span><br><span class="line">            print(cell_obj.value)</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>openyxl</tag>
      </tags>
  </entry>
  <entry>
    <title>二手车预测分析</title>
    <url>/2021/02/13/%E4%BA%8C%E6%89%8B%E8%BD%A6%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><h2 id="1-生成dataframe"><a href="#1-生成dataframe" class="headerlink" title="1. 生成dataframe"></a>1. 生成dataframe</h2><ol>
<li>先生成list，再转换成dataframe<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="literal">None</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">data=pd.DataFrame(a)</span><br></pre></td></tr></table></figure></li>
<li>先生成字典类型(dict)，再转换成dataframe<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>] * <span class="number">3</span>,</span><br><span class="line">   <span class="string">&#x27;b&#x27;</span>: [<span class="literal">True</span>, <span class="literal">False</span>] * <span class="number">3</span>,</span><br><span class="line">   <span class="string">&#x27;c&#x27;</span>: [<span class="number">1.0</span>, <span class="number">2.0</span>] * <span class="number">3</span>&#125;</span><br><span class="line">data = pd.DataFrame(a)</span><br></pre></td></tr></table></figure>
简化写法，两句并入一句<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="literal">None</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>] * <span class="number">3</span>,</span><br><span class="line">                   <span class="string">&#x27;b&#x27;</span>: [<span class="literal">True</span>, <span class="literal">False</span>] * <span class="number">3</span>,</span><br><span class="line">                   <span class="string">&#x27;c&#x27;</span>: [<span class="number">1.0</span>, <span class="number">2.0</span>] * <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>
注意：list 类型再转换成dataframe,如下，是个列<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">data = pd.DataFrame(a)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
增加行名，列名的方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="string">&#x27;Alex&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Clarke&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">data = pd.DataFrame(a,index=[<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;h2&#x27;</span>,<span class="string">&#x27;h3&#x27;</span>],columns=[<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure></li>
<li>字典列表<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line">data = pd.DataFrame(a)</span><br></pre></td></tr></table></figure></li>
<li>从外部读入数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;used_car_train_20200313.csv&#x27;</span>, sep=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
read_csv() 函数默认分隔符是逗号<br>对应地，最后写入csv<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myresult.to_csv(<span class="string">&quot;predictions.csv&quot;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-数据查看"><a href="#2-数据查看" class="headerlink" title="2. 数据查看"></a>2. 数据查看</h2><h3 id="2-1-数据类型查看"><a href="#2-1-数据类型查看" class="headerlink" title="2.1  数据类型查看"></a>2.1  数据类型查看</h3>查看每一列的数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure>
如果一列中含有多个类型,则该列的类型会是object,同样字符串类型的列也会被当成object类型.<br>不同的数据类型也会被当成object,比如int32,float32<br>查看数据大小<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure>
数据简要概览<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>
通过info()可以查看数据列名，<strong>缺失信息</strong>和数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>
查看列名<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns</span><br></pre></td></tr></table></figure>
数据统计信息浏览<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure>
<h3 id="进行数值型和object区分"><a href="#进行数值型和object区分" class="headerlink" title="进行数值型和object区分"></a>进行数值型和object区分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_col=df.select_dtypes(exclude=<span class="string">&#x27;object&#x27;</span>).columns</span><br></pre></td></tr></table></figure>
<h2 id="3-数据预处理"><a href="#3-数据预处理" class="headerlink" title="3. 数据预处理"></a>3. 数据预处理</h2><h3 id="3-1-空值处理"><a href="#3-1-空值处理" class="headerlink" title="3.1 空值处理"></a>3.1 空值处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="literal">None</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">data=pd.DataFrame(a)</span><br><span class="line">print(a)</span><br><span class="line">print(data)</span><br><span class="line">print(data.mean())</span><br><span class="line">print(data.fillna(data.mean))</span><br></pre></td></tr></table></figure>
data.mean() 按列取平均值<br>data.fillna()填充空值<br>data.fillna(data.mean)使用列的平均值进行填充<h2 id="4-选择特征列"><a href="#4-选择特征列" class="headerlink" title="4. 选择特征列"></a>4. 选择特征列</h2>通过列类型选取列<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.select_dtypes(include=<span class="string">&#x27;&#x27;</span>, exclude=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
返回的是dataframe类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_col=df.select_dtypes(exclude=<span class="string">&#x27;object&#x27;</span>).columns</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>返回index,用法为 dataframe.columns</strong></p>
<p>获取列名称</p>
<p>dataframe—&gt;index—&gt;ndarry—&gt;list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataframe.columns.values.tolist()</span><br></pre></td></tr></table></figure>

<p>选择特征列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feature_cols=[col <span class="keyword">for</span> col <span class="keyword">in</span> numerical_cols <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;SaleID&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;regDate&#x27;</span>,<span class="string">&#x27;creatDate&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;model&#x27;</span>,<span class="string">&#x27;brand&#x27;</span>,<span class="string">&#x27;regionCode&#x27;</span>,<span class="string">&#x27;seller&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<p>根据特征列构造样本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_data = Train_data[feature_cols]</span><br></pre></td></tr></table></figure>
<h2 id="5-模型"><a href="#5-模型" class="headerlink" title="5. 模型"></a>5. 模型</h2><p>回归</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line">xgbr=xgb.XGBRegressor()<span class="comment">#调用XGBRegressor函数‍</span></span><br><span class="line">xgbr.fit(X_data,Y_data) <span class="comment">#拟合</span></span><br><span class="line">xgbr_y_predict=xgbr.predict(X_test)<span class="comment">#预测</span></span><br></pre></td></tr></table></figure>
<h2 id="6-输出结果"><a href="#6-输出结果" class="headerlink" title="6.输出结果"></a>6.输出结果</h2><p>向pandas中增加列<br>方法1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Import pandas package  </span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Define a dictionary containing Students data </span></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Jai&#x27;</span>, <span class="string">&#x27;Princi&#x27;</span>, <span class="string">&#x27;Gaurav&#x27;</span>, <span class="string">&#x27;Anuj&#x27;</span>], </span><br><span class="line">        <span class="string">&#x27;Height&#x27;</span>: [<span class="number">5.1</span>, <span class="number">6.2</span>, <span class="number">5.1</span>, <span class="number">5.2</span>], </span><br><span class="line">        <span class="string">&#x27;Qualification&#x27;</span>: [<span class="string">&#x27;Msc&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;Msc&#x27;</span>, <span class="string">&#x27;Msc&#x27;</span>]&#125; </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Convert the dictionary into DataFrame </span></span><br><span class="line">df = pd.DataFrame(data) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Declare a list that is to be converted into a column </span></span><br><span class="line">address = [<span class="string">&#x27;Delhi&#x27;</span>, <span class="string">&#x27;Bangalore&#x27;</span>, <span class="string">&#x27;Chennai&#x27;</span>, <span class="string">&#x27;Patna&#x27;</span>] </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Using &#x27;Address&#x27; as the column name </span></span><br><span class="line"><span class="comment"># and equating it to the list </span></span><br><span class="line">df[<span class="string">&#x27;Address&#x27;</span>] = address </span><br></pre></td></tr></table></figure>
<p>方法2 使用pandas.insert()函数可向任意位置插入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Define a dictionary containing Students data </span></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Jai&#x27;</span>, <span class="string">&#x27;Princi&#x27;</span>, <span class="string">&#x27;Gaurav&#x27;</span>, <span class="string">&#x27;Anuj&#x27;</span>], </span><br><span class="line">        <span class="string">&#x27;Height&#x27;</span>: [<span class="number">5.1</span>, <span class="number">6.2</span>, <span class="number">5.1</span>, <span class="number">5.2</span>], </span><br><span class="line">        <span class="string">&#x27;Qualification&#x27;</span>: [<span class="string">&#x27;Msc&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;Msc&#x27;</span>, <span class="string">&#x27;Msc&#x27;</span>]&#125; </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Convert the dictionary into DataFrame </span></span><br><span class="line">df = pd.DataFrame(data) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Using DataFrame.insert() to add a column </span></span><br><span class="line">df.insert(<span class="number">2</span>, <span class="string">&quot;Age&quot;</span>, [<span class="number">21</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">21</span>], <span class="literal">True</span>) </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myresult=TestA_data.loc[:,(<span class="string">&#x27;SaleID&#x27;</span>)]</span><br><span class="line">myresult=pd.DataFrame(myresult)</span><br><span class="line">myresult.insert(<span class="number">1</span>, <span class="string">&#x27;price&#x27;</span>, xgbr_y_predict)</span><br><span class="line">print(myresult)</span><br><span class="line">myresult.to_csv(<span class="string">&quot;predictions.csv&quot;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>人物动漫调用百度AI接口</title>
    <url>/2021/02/13/%E4%BA%BA%E7%89%A9%E5%8A%A8%E6%BC%AB%E7%94%BB%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6AI%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>():</span></span><br><span class="line">    <span class="comment">#host = &#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=【官网获取的AK】&amp;client_secret=【官网获取的SK】&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;https://aip.baidubce.com/oauth/2.0/token&quot;</span></span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&#x27;grant_type&#x27;</span>:<span class="string">&#x27;client_credentials&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;client_id&#x27;</span>:<span class="string">&#x27;??????????&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;client_secret&#x27;</span>:<span class="string">&#x27;??????????&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url,params)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response:</span><br><span class="line">       <span class="comment"># print(response.json(),type(response))</span></span><br><span class="line">        access_token = <span class="built_in">eval</span>(response.text)[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">        <span class="comment">#print(access_token)</span></span><br><span class="line">        <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">人物动漫化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">request_url = <span class="string">&quot;https://aip.baidubce.com/rest/2.0/image-process/v1/selfie_anime&quot;</span></span><br><span class="line"><span class="comment"># 二进制方式打开图片文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.jpeg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">img = base64.b64encode(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">params = &#123;<span class="string">&quot;image&quot;</span>:img&#125;</span><br><span class="line">access_token = get_token()</span><br><span class="line">request_url = request_url + <span class="string">&quot;?access_token=&quot;</span> + access_token</span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">response = requests.post(request_url, data=params, headers=headers)</span><br><span class="line"><span class="keyword">if</span> response:</span><br><span class="line">    <span class="built_in">print</span> (response.json())</span><br><span class="line">    img_base64 = <span class="built_in">eval</span>(response.text)[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    print(img_base64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    f2=<span class="built_in">open</span>(<span class="string">&#x27;testout.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    img = base64.b64decode(img_base64)</span><br><span class="line">    f2.write(img)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>-百度AI接口的调用<br>-request.post(),request.post()的使用<br>-文件读取和写入的方法<br>-base64编码</p>
]]></content>
  </entry>
  <entry>
    <title>使用xlwt模块操作excel表</title>
    <url>/2021/02/13/%E4%BD%BF%E7%94%A8xlwt%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9Cexcel%E8%A1%A8/</url>
    <content><![CDATA[<p>使用xlwt模块，操作excel表<br>导入xlwt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br></pre></td></tr></table></figure>
<p>新建excel文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file=xlwt.Workbook()<span class="comment"># 首字母大写</span></span><br></pre></td></tr></table></figure>
<p>新建一个sheet</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=file.add_sheet(<span class="string">&#x27;sheet name&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>写入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table.write(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>保存文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.save(<span class="string">&#x27;EXCEL文件名字.xls&#x27;</span>)<span class="comment">#注意后缀</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>信息转录</title>
    <url>/2021/06/27/%E4%BF%A1%E6%81%AF%E8%BD%AC%E5%BD%95/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span>  pd</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://211.144.37.34/TxLogin&#x27;</span></span><br><span class="line">acc=<span class="string">&#x27;李冰&#x27;</span></span><br><span class="line">password=<span class="string">&#x27;libing13398951206&#x27;</span></span><br><span class="line">data=pd.read_excel(<span class="string">&#x27;PD质控数据汇总表.xlsx&#x27;</span>,skiprows=<span class="number">1</span>)</span><br><span class="line">name_list=data[<span class="string">&#x27;患者姓名&#x27;</span>]</span><br><span class="line"><span class="comment"># print(name_list)</span></span><br><span class="line">result=pd.DataFrame()</span><br><span class="line">mylist=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#============================================================================================================</span></span><br><span class="line">chromeDriver = <span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=chromeDriver)</span><br><span class="line">driver.get(url=url)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;form1&quot;]/div[3]/div[2]/div[2]/div[1]/div[2]/label&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;tbUser&quot;]&#x27;</span>).send_keys(acc)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;tbPwd&quot;]&#x27;</span>).send_keys(password)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;btnLogin&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;topNavRecord&quot;]/a&#x27;</span>).click()</span><br><span class="line"><span class="comment">#============================================================================================================</span></span><br><span class="line">name=name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;searchKey&quot;]&#x27;</span>).send_keys(name)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;searchKey&quot;]&#x27;</span>).send_keys(Keys.ENTER)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;recordsViewTable&quot;]/tbody/tr&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意切换窗口</span></span><br><span class="line">windows = driver.window_handles</span><br><span class="line">driver.switch_to.window(windows[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">js=<span class="string">&quot;var q=document.documentElement.scrollTop=10000&quot;</span></span><br><span class="line">js3=<span class="string">&quot;window.scrollTo(100,450);&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/ul/li[3]/a&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[2]/div/button&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[2]/div/ul/li[3]/a&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意没有小括号</span></span><br><span class="line"><span class="comment">#第一季度</span></span><br><span class="line">text=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[4]/div[1]/p[2]/span[3]&#x27;</span>).text</span><br><span class="line">print(text)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;本季度已登记&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">    <span class="comment"># temp=[]</span></span><br><span class="line">    print(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[4]/div[1]/p[2]/span[2]&#x27;</span>).click()</span><br><span class="line">    js = <span class="string">&#x27;window.scrollBy(0,150)&#x27;</span></span><br><span class="line">    driver.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    tbody=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[4]/div[1]/div/table/tbody&#x27;</span>)</span><br><span class="line">    rowCount = <span class="built_in">len</span>(driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[4]/div[1]/div/table/tbody/tr&#x27;</span>))</span><br><span class="line">    <span class="comment"># print(rowCount)</span></span><br><span class="line"></span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rowCount):</span><br><span class="line">        print(i)</span><br><span class="line">        zhi=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[4]/div[1]/div/table/tbody/tr[%s]/td[1]&#x27;</span>%i).text</span><br><span class="line">        print(zhi)</span><br><span class="line">        value=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;overviewContainer&quot;]/div[11]/div[4]/div[1]/div/table/tbody/tr[%s]/td[2]&#x27;</span>%i).text</span><br><span class="line">        print(value)</span><br><span class="line">        temp=temp.append([zhi,value])</span><br><span class="line">    print(temp)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>八皇后问题</title>
    <url>/2021/08/14/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>八皇后问题<br>MATLAB 暴力循环 蒙塔卡洛模拟</p>
<p>主程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line">N&#x3D;5;</span><br><span class="line">k&#x3D;0;</span><br><span class="line">while k&lt;&#x3D;1000000000</span><br><span class="line">X&#x3D;zeros(N,N);</span><br><span class="line">for i&#x3D;1:N</span><br><span class="line">    for j&#x3D;1:N</span><br><span class="line">        t&#x3D;rand(1);</span><br><span class="line">        if t&gt;0.5</span><br><span class="line">            X(i,j)&#x3D;1;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if(isValid(N,X))</span><br><span class="line">    X</span><br><span class="line">    break;</span><br><span class="line">end</span><br><span class="line">k&#x3D;k+1;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>判断是否有效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function [ff] &#x3D; isValid(N,X)</span><br><span class="line">    a&#x3D;sum(X);</span><br><span class="line">    b&#x3D;sum(X,2);</span><br><span class="line">    if sum(sum(X))~&#x3D;N</span><br><span class="line">        ff&#x3D;0;</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line">    for i&#x3D;1:length(a)</span><br><span class="line">        if a(i)&gt;1</span><br><span class="line">            ff&#x3D;0;</span><br><span class="line">            return </span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    for i&#x3D;1:length(b)</span><br><span class="line">        if b(i)&gt;1</span><br><span class="line">            ff&#x3D;0;</span><br><span class="line">            return</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    for j&#x3D;1:N</span><br><span class="line">        temp&#x3D;0;</span><br><span class="line">        i&#x3D;1;</span><br><span class="line">        jj&#x3D;j;</span><br><span class="line">        while (i&lt;&#x3D;N) &amp; (jj&lt;&#x3D;N)</span><br><span class="line">            temp&#x3D;temp+X(i,j);</span><br><span class="line">            i&#x3D;i+1;</span><br><span class="line">            jj&#x3D;j+1;</span><br><span class="line">        end</span><br><span class="line">        if temp&gt;1</span><br><span class="line">            ff&#x3D;0;</span><br><span class="line">            return</span><br><span class="line">        end    </span><br><span class="line">    end</span><br><span class="line">     for j&#x3D;1:N</span><br><span class="line">        temp&#x3D;0;</span><br><span class="line">        i&#x3D;1;</span><br><span class="line">        jj&#x3D;j;</span><br><span class="line">        while (i&gt;&#x3D;1) &amp; (jj&lt;&#x3D;N)</span><br><span class="line">            temp&#x3D;temp+X(i,j);</span><br><span class="line">            i&#x3D;i-1;</span><br><span class="line">            jj&#x3D;j+1;</span><br><span class="line">        end</span><br><span class="line">        if temp&gt;1</span><br><span class="line">            ff&#x3D;0;</span><br><span class="line">            return</span><br><span class="line">        end</span><br><span class="line">         </span><br><span class="line">     end</span><br><span class="line">    </span><br><span class="line">     ff&#x3D;1;</span><br><span class="line">     return </span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>遍历太多，甚至把八皇后放到了是否正好是8个，放到了函数里面去验证；应该是在主程序里面去验证的。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>刷题和笔试</title>
    <url>/2022/01/27/%E5%88%B7%E9%A2%98%E5%92%8C%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<p>为什么笔试结果远远低于自己真实水平？<br>或者说面试当场答题为什么表现不好？</p>
<p>1.本地Pycharm，navicat的话，更熟悉，可以不断测试结果。<br>2.基于网页的考试环境，不够好使。<br>3.一些基础语法需要现场百度。</p>
<p>我觉得牛客网的话，还不如面试的时候，共享屏幕，在自己的IDE中做，因为随时可以输出。<br>然后现场做，不会的语法当场查。</p>
<p>积累自己的常用代码库，或者说代码片段更准确些。<br>很小的东西也值得记录，因为下一次就不是从0开始，而是从上次的成果上开始的。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>加密算法</title>
    <url>/2021/03/30/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>对称加密<br>彩虹表<br>一个实例<br>直接修改密文</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题常用数据结构基于python</title>
    <url>/2022/02/05/%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E4%BA%8Epython/</url>
    <content><![CDATA[<h2 id="链表之节点"><a href="#链表之节点" class="headerlink" title="链表之节点"></a>链表之节点</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,data,<span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data=data</span><br><span class="line">        self.<span class="built_in">next</span>=<span class="built_in">next</span></span><br></pre></td></tr></table></figure>
<p>如果有需要，再建立ListNode类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,head</span>):</span></span><br><span class="line">        self.head=head</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        my_node=self.head</span><br><span class="line">        print(my_node.data,end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span>(my_node.<span class="built_in">next</span>):</span><br><span class="line">            my_node=my_node.<span class="built_in">next</span></span><br><span class="line">            print(my_node.data,end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self,head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> head==<span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span>==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre=head</span><br><span class="line">            n=head.<span class="built_in">next</span></span><br><span class="line">            ll=self.reverseList(n)</span><br><span class="line">            n.<span class="built_in">next</span>=pre</span><br><span class="line">            pre.<span class="built_in">next</span>=<span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> ll</span><br></pre></td></tr></table></figure>
<h2 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2.二叉树"></a>2.二叉树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/2021/08/19/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        LinkNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LinkNode</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val=val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(LinkNode head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinkNode fast=head;</span><br><span class="line">        LinkNode slow=head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next!=<span class="keyword">null</span>&amp;&amp;fast.next.next!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkNode <span class="title">CycleNode</span><span class="params">(LinkNode head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Queue&lt;LinkNode&gt; q=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkNode cur=head;</span><br><span class="line">        q.offer(cur);</span><br><span class="line">        <span class="keyword">while</span> (cur.next!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            <span class="keyword">if</span>(q.contains(cur))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            q.offer(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;出错&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkNode n1= <span class="keyword">new</span> LinkNode(<span class="number">1</span>);</span><br><span class="line">        LinkNode n2= <span class="keyword">new</span> LinkNode(<span class="number">2</span>);</span><br><span class="line">        LinkNode n3= <span class="keyword">new</span> LinkNode(<span class="number">3</span>);</span><br><span class="line">        LinkNode n4= <span class="keyword">new</span> LinkNode(<span class="number">4</span>);</span><br><span class="line">        LinkNode n5= <span class="keyword">new</span> LinkNode(<span class="number">5</span>);</span><br><span class="line">        LinkNode n6= <span class="keyword">new</span> LinkNode(<span class="number">6</span>);</span><br><span class="line">        n1.next=n2;</span><br><span class="line">        n2.next=n3;</span><br><span class="line">        n3.next=n4;</span><br><span class="line">        n4.next=n5;</span><br><span class="line">        n5.next=n6;</span><br><span class="line">        n6.next=n4;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b=hasCycle(n1);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        LinkNode nn=CycleNode(n1);</span><br><span class="line">        System.out.println(nn.val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>可视化大屏仪表盘</title>
    <url>/2021/02/13/%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%A4%A7%E5%B1%8F_%E4%BB%AA%E8%A1%A8%E7%9B%98/</url>
    <content><![CDATA[<h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><p>数据可视化包括：<br>local分析<br>PC端数据可视化<br>移动端数据可视化<br>大屏可视化</p>
<h2 id="本地离线分析"><a href="#本地离线分析" class="headerlink" title="本地离线分析"></a>本地离线分析</h2><p>使用excel做图，做表。<br>可以使用python的Matplotlib、Seaborn等工具等作图<br>使用MATLAB作图，如3维图等。<br>也可以用tableue，power bi等产品来作图。<br>tableue的优点在于大大缩短了拿到数据到出图，出报告的时间，大大提高了效率 。<br>不管用什么作图，都是要导出图片，然后放到PPT，word报告中的，<br>最后的输出成果就是ppt，word报告，这类报告是图文并茂的。</p>
<h2 id="PC端数据可视化"><a href="#PC端数据可视化" class="headerlink" title="PC端数据可视化"></a>PC端数据可视化</h2><p>PC端数据可视化分成轻度的数据可视化，和重度的数据可视化。<br>前者是报表展示，兼顾用户体验，展示的比较无感，信息密度低，镶嵌在其他功能中，后者更接近于驾驶舱的概念，有一种很硬核，一股脑要告诉用户很多东西的感觉，整张网页都是图展示。<br>有一个简单的区别方法，就是前者一般是白色的，数据展示的比较自然，无感。<br>后者一般是黑色背景，一种强烈的炫技的感觉。</p>
<p>现在制作可视化大屏的方法我遇见的主要有两种：一是使用Python flask+ajax+ECharts绘图库，二就是使用tableau。当然使用power bi和fine bi的话也是可以绘制的</p>
<h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><h2 id="大屏"><a href="#大屏" class="headerlink" title="大屏"></a>大屏</h2>]]></content>
  </entry>
  <entry>
    <title>反转表和按照层级制表</title>
    <url>/2021/07/13/%E5%8F%8D%E8%BD%AC%E8%A1%A8%E5%92%8C%E6%8C%89%E7%85%A7%E5%B1%82%E7%BA%A7%E5%88%B6%E8%A1%A8/</url>
    <content><![CDATA[<p>初始思路，只有一个根节点，先想办法把其他root去掉<br>然后将节点按照行列写入excel，这样避免思考数据结构，怎样表示树</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;整理公司表按层级&#x27;</span>)</span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;ENTITY.csv&#x27;</span>,encoding=<span class="string">&quot;ANSI&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示H1为空的个数</span></span><br><span class="line"><span class="comment"># print(df[&#x27;H1&#x27;].isnull().value_counts())</span></span><br><span class="line"><span class="comment"># # 显示H1为空的具体行</span></span><br><span class="line"><span class="comment"># print(df[df[&#x27;H1&#x27;].isnull()])</span></span><br><span class="line"><span class="comment">#获取H1为空的具体行的索引，并转换成list</span></span><br><span class="line"></span><br><span class="line">print(df[(df[<span class="string">&#x27;H1&#x27;</span>].isnull()) | (df[<span class="string">&#x27;H1&#x27;</span>]==<span class="string">&#x27;CON&#x27;</span>)|(df[<span class="string">&#x27;H1&#x27;</span>]==<span class="string">&#x27;MGT&#x27;</span>)] )</span><br><span class="line">Mylist=df[(df[<span class="string">&#x27;H1&#x27;</span>].isnull()) | (df[<span class="string">&#x27;H1&#x27;</span>]==<span class="string">&#x27;CON&#x27;</span>)|(df[<span class="string">&#x27;H1&#x27;</span>]==<span class="string">&#x27;MGT&#x27;</span>)|(df[<span class="string">&#x27;H1&#x27;</span>]==<span class="string">&#x27;DELETE&#x27;</span>)] .index.tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将父节点为空的顶层排除掉,依赖项</span></span><br><span class="line">Mylist.remove(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># print(Mylist)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mylist2=df[len(df[&#x27;ID&#x27;])!=11]</span></span><br><span class="line"></span><br><span class="line">df22=df.copy()</span><br><span class="line">df22.drop(labels=Mylist,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df3=pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> df22.iterrows():</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(row[<span class="string">&#x27;ID&#x27;</span>])==<span class="number">11</span>):</span><br><span class="line">        df3=df3.append(row)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;here==============================here==============&#x27;</span>)</span><br><span class="line">print(df3)</span><br><span class="line">df3.to_excel(<span class="string">&#x27;df3.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df2=df3.copy()</span><br><span class="line"><span class="comment"># df2=df2[len(df2[&#x27;ID&#x27;])==11]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># df2.reset_index(inplace=True)#索引重新排列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dfE=df2.copy()</span></span><br><span class="line"><span class="comment"># dfC=df2.copy()</span></span><br><span class="line">dfE=df2[df2[<span class="string">&#x27;ID&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;E&#x27;</span>)]</span><br><span class="line">dfC=df2[df2[<span class="string">&#x27;ID&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">print(dfE)</span><br><span class="line">print(dfC)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;=================================================================&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> dfE.iterrows():</span><br><span class="line">    e1=row[<span class="string">&#x27;ID&#x27;</span>]</span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    print(<span class="string">&quot;写入row为%d列为%d,数值为%s&quot;</span> %(table_row,j,e1))</span><br><span class="line">    table.write(table_row, j, e1)</span><br><span class="line">    e2=row[<span class="string">&#x27;H1&#x27;</span>]</span><br><span class="line">    ename=row[<span class="string">&#x27;描述&#x27;</span>]</span><br><span class="line">    eall=e2+ename</span><br><span class="line">    j=j+<span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;写入row为%d列为%d,数值为%s&quot;</span> % (table_row, j, eall))</span><br><span class="line">    table.write(table_row, j, eall)</span><br><span class="line">    nowE=e2</span><br><span class="line">    <span class="keyword">while</span>(nowE!=<span class="string">&#x27;C0100000000&#x27;</span> <span class="keyword">and</span> nowE!=<span class="literal">None</span>):</span><br><span class="line">        e1=nowE</span><br><span class="line">        print(<span class="string">&#x27;e1为&#x27;</span>)</span><br><span class="line">        print(e1)</span><br><span class="line">        print(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">        e2=dfC[dfC[<span class="string">&#x27;ID&#x27;</span>]==e1][<span class="string">&#x27;H1&#x27;</span>].values[<span class="number">0</span>]</span><br><span class="line">        ename = dfC[dfC[<span class="string">&#x27;ID&#x27;</span>] == e1][<span class="string">&#x27;描述&#x27;</span>].values[<span class="number">0</span>]</span><br><span class="line">        eall=e2+ename</span><br><span class="line">        print(<span class="string">&#x27;e2为&#x27;</span>)</span><br><span class="line">        print(e2)</span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;写入row为%d列为%d,数值为%s&quot;</span> % (table_row, j, eall))</span><br><span class="line">        table.write(table_row, j, eall)</span><br><span class="line">        nowE = e2</span><br><span class="line"></span><br><span class="line">    table_row=table_row+<span class="number">1</span></span><br><span class="line">file.save(<span class="string">&#x27;整理公司表按层级.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>反转表格<br>采用xlrd和xlwt<br>核心是 newlist=list(reversed(rowdata))</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table2=file.add_sheet(<span class="string">&#x27;反转后表格&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = xlrd.open_workbook(<span class="string">&#x27;整理公司表按层级.xls&#x27;</span>)</span><br><span class="line">table = data.sheet_by_name(<span class="string">&#x27;整理公司表按层级&#x27;</span>)<span class="comment">#通过名称获取</span></span><br><span class="line">row_num =table.nrows</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,row_num-<span class="number">1</span>):</span><br><span class="line">    rowdata = table.row_values(row)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> rowdata:</span><br><span class="line">        rowdata.remove(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(rowdata)</span></span><br><span class="line">    <span class="comment"># print(&quot;===========反转后====================&quot;)</span></span><br><span class="line">    newlist=<span class="built_in">list</span>(<span class="built_in">reversed</span>(rowdata))</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> newlist:</span><br><span class="line">        table2.write(row,i,temp)</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">    <span class="comment"># print(newlist)</span></span><br><span class="line">file.save(<span class="string">&#x27;反转后表格.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>新的写法，更简单，可以有更多的root<br>判断不为空的方法很有技巧性，为空时，只能用math.isnan 来判断为空的情况是有效的，不为空时，str类型又不能用这个函数。所以用了try except来做。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">col_name=<span class="string">&#x27;H3&#x27;</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;整理科目表按层级&#x27;</span>+col_name)</span><br><span class="line"></span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line"></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;ACCOUNT.csv&#x27;</span>,encoding=<span class="string">&quot;ANSI&quot;</span>)</span><br><span class="line">data=df[[<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;描述&#x27;</span>, col_name]]</span><br><span class="line">root=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> data.iterrows():</span><br><span class="line">    acc=row[<span class="string">&#x27;ID&#x27;</span>]</span><br><span class="line">    name=row[<span class="string">&#x27;描述&#x27;</span>]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    print(<span class="string">&quot;写入row为%d,列为%d,数值为%s&quot;</span> % (table_row, j, acc))</span><br><span class="line">    table.write(table_row, j, acc+<span class="string">&#x27;  &#x27;</span>+name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       only = data[data[<span class="string">&#x27;ID&#x27;</span>] == acc].reset_index().loc[<span class="number">0</span>][col_name]</span><br><span class="line">       only=<span class="built_in">float</span>(only)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       print(<span class="string">&#x27;expect&#x27;</span>)</span><br><span class="line">       only=<span class="number">100</span></span><br><span class="line">       <span class="comment"># acc对应的parent 不为空</span></span><br><span class="line">    <span class="keyword">while</span>(math.isnan(only)!=<span class="literal">True</span>):</span><br><span class="line">        print(<span class="string">&#x27;==================&#x27;</span>)</span><br><span class="line">        data2=data[data[<span class="string">&#x27;ID&#x27;</span>] == acc]</span><br><span class="line">        data2=data2.reset_index()</span><br><span class="line">        print(<span class="string">&#x27;data2&#x27;</span>)</span><br><span class="line">        print(data2)</span><br><span class="line"></span><br><span class="line">        acc=data2.loc[<span class="number">0</span>][col_name]</span><br><span class="line">        name=data[data[<span class="string">&#x27;ID&#x27;</span>] == acc].reset_index().loc[<span class="number">0</span>][<span class="string">&#x27;描述&#x27;</span>]</span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">        print(acc)</span><br><span class="line">        print(<span class="string">&quot;写入row为%d列为%d,数值为%s&quot;</span> % (table_row, j, acc))</span><br><span class="line">        table.write(table_row, j, acc+<span class="string">&#x27;  &#x27;</span>+name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;acc&#x27;</span>)</span><br><span class="line">        print(acc)</span><br><span class="line">        print(<span class="built_in">type</span>(acc))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            only = data[data[<span class="string">&#x27;ID&#x27;</span>] == acc].reset_index().loc[<span class="number">0</span>][col_name]</span><br><span class="line">            only = <span class="built_in">float</span>(only)</span><br><span class="line">            print(<span class="string">&#x27;only&#x27;</span>)</span><br><span class="line">            print(only)</span><br><span class="line">            print(math.isnan(only))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&#x27;expect&#x27;</span>)</span><br><span class="line">            only = <span class="number">100</span></span><br><span class="line">    root.append(acc)</span><br><span class="line">    root=<span class="built_in">list</span>(<span class="built_in">set</span>(root))</span><br><span class="line">    print(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">    print(root)</span><br><span class="line">    table_row = table_row + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">file.save(<span class="string">&#x27;整理公司表按层级H3.xls&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希表</title>
    <url>/2021/06/27/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<p>哈希函数<br>“键”转换成“索引”</p>
<p>哈希函数的设计</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>回归分析</title>
    <url>/2022/01/25/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>相关分析研究的是现象之间是否相关、相关的方向和密切程度，一般不区别自变量或因变量。<br>而回归分析则要分析现象之间相关的具体形式，确定其因果关系，并用数学模型来表现其具体关系。比如说，从相关分析中可以得知“质量”和“用户满意度”变量密切相关，但是这两个变量之间到底是哪个变量受哪个变量的影响，影响程度如何，则需要通过回归分析方法来确定。</p>
<ol>
<li>线性回归</li>
<li>多元回归</li>
<li>逻辑回归</li>
<li>多项式回归</li>
</ol>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><ul>
<li>分类变量的处理<br>One-Hot 编码</li>
</ul>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>回归分析</tag>
      </tags>
  </entry>
  <entry>
    <title>多个表格合并</title>
    <url>/2021/02/13/%E5%A4%9A%E4%B8%AA%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h2 id="成功了的方法："><a href="#成功了的方法：" class="headerlink" title="成功了的方法："></a>成功了的方法：</h2><p>1.先保留原来的excel，格式，不用转换成csv格式<br>2.用python代码合并，保存为csv<br>3.用记事本打开乱码csv，另存为编码方式选择ANSI</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;./222&#x27;</span>   <span class="comment">#设置csv所在文件夹</span></span><br><span class="line">files = os.listdir(path)  <span class="comment">#获取文件夹下所有文件名</span></span><br><span class="line"></span><br><span class="line">df1 = pd.read_excel(path + <span class="string">&#x27;/&#x27;</span> + files[<span class="number">0</span>])  <span class="comment">#读取首个csv文件，保存到df1中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files[<span class="number">1</span>:]:</span><br><span class="line">  df2 = pd.read_excel(path +<span class="string">&#x27;/&#x27;</span> +  file)  <span class="comment">#打开csv文件，注意编码问题，保存到df2中</span></span><br><span class="line">  df1 = pd.concat([df1,df2],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>)  <span class="comment">#将df2数据与df1合并</span></span><br><span class="line"></span><br><span class="line">df1 = df1.drop_duplicates()   <span class="comment">#去重</span></span><br><span class="line">df1 = df1.reset_index(drop=<span class="literal">True</span>) <span class="comment">#重新生成index</span></span><br><span class="line">df1.to_csv(path + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;total.csv&#x27;</span>) <span class="comment">#将结果保存为新的csv文件</span></span><br></pre></td></tr></table></figure>
<h2 id="过程的坑："><a href="#过程的坑：" class="headerlink" title="过程的坑："></a>过程的坑：</h2><p>1.最后一步，csv乱码问题，用excel打开然后保存编码，或者用naotepad++改变编码另存为，其实都没起作用。<br>2.用python代码合并，保存一直提示是读入的那一句，实际上是编码问题，改最后一句另存为。前面反而不报错了。<br>3.一开始想通过windows的批处理文件自动合并，网上说先换成csv然后再</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy *.csv out.csv</span><br></pre></td></tr></table></figure>
<p>但是编码怎么都弄不对。</p>
<h1 id="第二个需求经验更新"><a href="#第二个需求经验更新" class="headerlink" title="第二个需求经验更新"></a>第二个需求经验更新</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;./表格文件夹名字&#x27;</span>   <span class="comment">#设置表格所在文件夹</span></span><br><span class="line">files = os.listdir(path)  <span class="comment">#获取文件夹下所有文件名</span></span><br><span class="line"></span><br><span class="line">df1 = pd.read_excel(path + <span class="string">&#x27;/&#x27;</span> + files[<span class="number">0</span>],sheet_name=<span class="string">&#x27;收入支出类报表项目&#x27;</span>,skiprows=<span class="number">3</span>)  <span class="comment">#读取首个表格文件，保存到df1中</span></span><br><span class="line"><span class="comment">#收入支出类报表项目</span></span><br><span class="line"><span class="comment">#负债和权益类报表项目</span></span><br><span class="line"><span class="comment"># print(df1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files[<span class="number">1</span>:]:</span><br><span class="line">  df2 = pd.read_excel(path +<span class="string">&#x27;/&#x27;</span> +  file,sheet_name=<span class="string">&#x27;收入支出类报表项目&#x27;</span>,skiprows=<span class="number">3</span>)  <span class="comment">#打开表格文件，注意编码问题，保存到df2中</span></span><br><span class="line">  df1 = pd.concat([df1,df2],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>)  <span class="comment">#将df2数据与df1合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#df1 = df1.drop_duplicates()   #去重,没有用到</span></span><br><span class="line">df1 = df1.reset_index(drop=<span class="literal">True</span>) <span class="comment">#重新生成index</span></span><br><span class="line">df1.to_csv(<span class="string">&#x27;total表3.csv&#x27;</span>) <span class="comment">#将结果保存为新的csv文件</span></span><br><span class="line">df1.to_excel(<span class="string">&#x27;total表3.xls&#x27;</span>) <span class="comment">#将结果保存为新的csv文件</span></span><br></pre></td></tr></table></figure>
<h2 id="经验："><a href="#经验：" class="headerlink" title="经验："></a>经验：</h2><p>1.遇到问题，先合并两个，看是否成功<br>2.合并多个不行，要输出，方便定位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files[<span class="number">1</span>:]:</span><br><span class="line">  print(<span class="string">&quot;要读入&quot;</span>+file.title())<span class="comment">#为了方便定位进度，遇到问题知道出在哪里</span></span><br><span class="line">  df2 = pd.read_excel(path +<span class="string">&#x27;/&#x27;</span> +  file,sheet_name=<span class="string">&#x27;收入支出类报表项目&#x27;</span>,skiprows=<span class="number">3</span>)  <span class="comment">#打开表格文件，注意编码问题，保存到df2中</span></span><br><span class="line">  print(<span class="string">&quot;已经读入&quot;</span>+file.title())<span class="comment">#为了方便定位进度，遇到问题知道出在哪里</span></span><br><span class="line">  print(df2)<span class="comment">#为了方便定位进度，遇到问题知道出在哪里</span></span><br><span class="line">  df1 = pd.concat([df1,df2],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>)  <span class="comment">#将df2数据与df1合并</span></span><br></pre></td></tr></table></figure>
<p>3.遇到一个问题执行程序卡住，并且没有报错，原因是：<br>就是个别文件读入很多列，但是实际只有13列，后面的是空的。<br>然后读入下一个文件后，再做合并时卡住了。</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>进行同一目录下所有的表格合并是非常常用自动化的场景，如：</p>
<ul>
<li>分发表格模板让多个分行填报网络访问关系，然后合并表格成一份，进行统一申请</li>
<li>分发表格让多个公司/机构填报XX数据，然后合并表格成一份，方便自己筛选查看，和一次性导入系统等。<br>更加拓展场景和应用，关键点注意：</li>
</ul>
<p>1.用户只需要给出目录路径，不需要指定文件<br>2.格式 csv ，xls，xlsx<br>3.剔除空的，清洗，去重等等。<br>4.增加一列，用来保存表格名，方便对比源文件和程序合并后的，看是否有遗漏的现象。<br>5.可看uistroe上的一些自动化应用场景，获取一些灵感。除了场景还有解决方法上的。</p>
<h1 id="再改进"><a href="#再改进" class="headerlink" title="再改进"></a>再改进</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;./路径名字&#x27;</span>   <span class="comment">#设置表格所在文件夹</span></span><br><span class="line">files = os.listdir(path)  <span class="comment">#获取文件夹下所有文件名</span></span><br><span class="line"></span><br><span class="line">df1 = pd.read_excel(path + <span class="string">&#x27;/&#x27;</span> + files[<span class="number">0</span>],sheet_name=<span class="string">&#x27;负债和权益类报表项目&#x27;</span>,skiprows=<span class="number">4</span>)  <span class="comment">#读取首个表格文件，保存到df1中</span></span><br><span class="line"><span class="comment">#资产类报表项目 表1</span></span><br><span class="line"><span class="comment">#收入支出类报表项目 表3</span></span><br><span class="line"><span class="comment">#负债和权益类报表项目 表2</span></span><br><span class="line"><span class="comment"># print(df1)</span></span><br><span class="line">df1[<span class="string">&#x27;表名&#x27;</span>]=files[<span class="number">0</span>].title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files[<span class="number">1</span>:]:</span><br><span class="line">  print(<span class="string">&quot;要读入&quot;</span>+file.title())</span><br><span class="line">  df2 = pd.read_excel(path +<span class="string">&#x27;/&#x27;</span> +  file,sheet_name=<span class="string">&#x27;负债和权益类报表项目&#x27;</span>,skiprows=<span class="number">4</span>)  <span class="comment">#打开表格文件，注意编码问题，保存到df2中</span></span><br><span class="line">  df2[<span class="string">&#x27;表名&#x27;</span>]=file.title()</span><br><span class="line">  print(<span class="string">&quot;已经读入&quot;</span>+file.title())</span><br><span class="line">  print(df2)</span><br><span class="line">  df1 = pd.concat([df1,df2],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>)  <span class="comment">#将df2数据与df1合并</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># df1 = df1.drop_duplicates()   #去重</span></span><br><span class="line">df1 = df1.reset_index(drop=<span class="literal">True</span>) <span class="comment">#重新生成index</span></span><br><span class="line">df1.to_csv(<span class="string">&#x27;total表2.csv&#x27;</span>) <span class="comment">#将结果保存为新的csv文件</span></span><br><span class="line">df1.to_excel(<span class="string">&#x27;total表2.xls&#x27;</span>) <span class="comment">#将结果保存为新的csv文件</span></span><br></pre></td></tr></table></figure>
<p>增加一列，保存表格名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2[<span class="string">&#x27;表名&#x27;</span>]=file.title()</span><br></pre></td></tr></table></figure>
<h1 id="又遇到一个更简单的写法"><a href="#又遇到一个更简单的写法" class="headerlink" title="又遇到一个更简单的写法"></a>又遇到一个更简单的写法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">file_path=<span class="string">&#x27;课程/名单表格/&#x27;</span></span><br><span class="line">file_names=os.listdir(file_path)</span><br><span class="line">file_merge=pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file_names:</span><br><span class="line">    df=pd.read_excel(file_path+name)</span><br><span class="line">    file_merge=file_merge.append(df)</span><br><span class="line">file_merge.to_excel(<span class="string">&#x27;./tmp/file_merge.xlsx&#x27;</span>,index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>常见业务模型</title>
    <url>/2022/01/25/%E5%B8%B8%E8%A7%81%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="1-常用业务模型"><a href="#1-常用业务模型" class="headerlink" title="1.常用业务模型"></a>1.常用业务模型</h1><h2 id="1-AARRR模型"><a href="#1-AARRR模型" class="headerlink" title="1.AARRR模型"></a>1.AARRR模型</h2><p>用户增长领域：获客、激活、留存、收益、传播。</p>
<ul>
<li>获客<br>推广活动的获客数量和质量；</li>
<li>激活<br>获客后，购买一次算激活成功。</li>
<li>留存<br>需分析流失原因，挽留召回已有客户</li>
<li>收益<br>用户活跃度：低活跃用户、普通用户、会员</li>
<li>传播<br>K值=（每个用户向他的朋友发出的邀请数量）* （收到邀请后转换为新用户的转换率）<h2 id="2-转化漏斗模型"><a href="#2-转化漏斗模型" class="headerlink" title="2.转化漏斗模型"></a>2.转化漏斗模型</h2>通过<strong>转化率</strong>来分析整个业务流程中吃的转化和流失情况。<h2 id="3-RFM模型"><a href="#3-RFM模型" class="headerlink" title="3.RFM模型"></a>3.RFM模型</h2><h3 id="3-1-解释"><a href="#3-1-解释" class="headerlink" title="3.1 解释"></a>3.1 解释</h3>客户分析方法</li>
<li>R（最近一次消费的时间）<br>沉默期</li>
<li>F（最近一段时间内消费频次）<br>忠诚度</li>
<li>M（最近一段时间内消费金额）<br>消费能力<h3 id="3-2用户分层"><a href="#3-2用户分层" class="headerlink" title="3.2用户分层"></a>3.2用户分层</h3></li>
<li>重要价值客户（111）：最近消费时间近、消费频次和消费金额都很高，必须是VIP啊！</li>
<li>重要保持客户（011）：最近消费时间较远，但消费频次和金额都很高，说明这是个一段时间没来的忠诚客户，我们需要主动和他保持联系。</li>
<li>重要发展客户（101）：最近消费时间较近、消费金额高，但频次不高，忠诚度不高，很有潜力的用户，必须重点发展。</li>
<li>重要挽留客户（001）：最近消费时间较远、消费频次不高，但消费金额高的用户，可能是将要流失或者已经要流失的用户，应当给予挽留措施。</li>
</ul>
<h2 id="4-波士顿矩阵"><a href="#4-波士顿矩阵" class="headerlink" title="4. 波士顿矩阵"></a>4. 波士顿矩阵</h2><ul>
<li>销售增长率</li>
<li>市场占有率<br>交叉象限分析<h2 id="5-购物篮分析"><a href="#5-购物篮分析" class="headerlink" title="5.购物篮分析"></a>5.购物篮分析</h2><h2 id="6-KANO模型"><a href="#6-KANO模型" class="headerlink" title="6.KANO模型"></a>6.KANO模型</h2>根据用户需求对用户满意的影响，四象限分析。<br>必备型&gt;期望型&gt;兴奋型&gt;无差异<h2 id="7-ABC分析法"><a href="#7-ABC分析法" class="headerlink" title="7.ABC分析法"></a>7.ABC分析法</h2>ABC分析法的核心思想就是<strong>少数项目贡献了大部分价值</strong>。</li>
</ul>
<h2 id="8-杜邦分析法"><a href="#8-杜邦分析法" class="headerlink" title="8.杜邦分析法"></a>8.杜邦分析法</h2><p>对ROE（净资产收益率）进行分解，从盈利能力、运营能力和偿债能力三个方面去衡量企业经营业绩。</p>
<h1 id="2-业务常识和指标"><a href="#2-业务常识和指标" class="headerlink" title="2.业务常识和指标"></a>2.业务常识和指标</h1><h2 id="2-1用户留存"><a href="#2-1用户留存" class="headerlink" title="2.1用户留存"></a>2.1用户留存</h2><p>“留存率”很重要，是因为留存率的作用在于：衡量不同渠道获得的用户的质量，新用户的使用效果，老用户的使用产品的频次（用户黏性）等。</p>
<h2 id="2-2活跃用户数指标"><a href="#2-2活跃用户数指标" class="headerlink" title="2.2活跃用户数指标"></a>2.2活跃用户数指标</h2><ul>
<li>DAU(Daily Active User)日活</li>
<li>WAU(Weekly Active User)周活</li>
<li>MAU(Monthly Active User)月活</li>
</ul>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
  </entry>
  <entry>
    <title>多维分析与辛普森悖论</title>
    <url>/2022/01/25/%E5%A4%9A%E7%BB%B4%E5%88%86%E6%9E%90%E4%B8%8E%E8%BE%9B%E6%99%AE%E6%A3%AE%E6%82%96%E8%AE%BA/</url>
    <content><![CDATA[<p>我们对不同维度进行交叉分析时，需要注意辛普森悖论。</p>
<h2 id="辛普森悖论"><a href="#辛普森悖论" class="headerlink" title="辛普森悖论"></a>辛普森悖论</h2><ul>
<li>辛普森悖论<br>在分组比较中都占优势的一方，在总评中有时反而是失势的一方。<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3>辛普森悖论就像是比赛100场篮球以总胜率评价好坏。<br>于是有人专找高手挑战20 场而胜1场，另外80场找平手挑战而胜40场，结果胜率41%；<br>另一人则专挑高手挑战80场而胜8场，而剩下20场平手打个全胜，结果胜率为28%；</li>
</ul>
<p>如果我们只看胜率，那么胜率41%的队伍赢了，但仔细观察挑战对象，我们会发现后者明显实力更强。<br>量和质不是等价的。</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2021/02/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h1><ul>
<li>一组小的服务</li>
<li>独立的进程</li>
<li>轻量级通信</li>
<li>基于业务能力</li>
<li>独立部署</li>
<li>无集中式管理</li>
</ul>
<p>松散耦合</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li>强模块化边界</li>
<li> 可独立部署</li>
<li> 技术多样性<h1 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h1></li>
<li>分布式复杂性</li>
<li>最终一致性</li>
<li>运维复杂性</li>
<li>测试复杂性</li>
</ul>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>批处理命令</title>
    <url>/2021/02/13/%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="dos命令"><a href="#dos命令" class="headerlink" title="dos命令"></a>dos命令</h1><h1 id="单个常用命令"><a href="#单个常用命令" class="headerlink" title="单个常用命令"></a>单个常用命令</h1><p>查看命令使用参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy &#x2F;?</span><br></pre></td></tr></table></figure>
<p>dir 查看文件下内容 类似于shell的ls<br>cd .. 返回上一级<br>cd \ 返回根目录<br>cd 目录 进入指定目录<br>d: 进入d文件夹</p>
<p>copy<br>move 移动，重命名<br>del<br>md 新建文件夹<br>ren 重命名<br>xcopy 复制文件和目录树<br>rd 删除<br>rd 目录 /S 删除目录下的所有的<br>/Q 安静模式 </p>
<p>systeminfo 显示计算机配置<br>msinfo32显示计算机配置图形化界面</p>
<h1 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h1><p>打开计算器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd C:\Windows\System32\</span><br><span class="line">calc.exe</span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>echo 输出内容<br>echo off 关闭回显</p>
]]></content>
  </entry>
  <entry>
    <title>抓取雪球</title>
    <url>/2021/02/13/%E6%8A%93%E5%8F%96%E9%9B%AA%E7%90%83/</url>
    <content><![CDATA[<h1 id="静态页面和动态页面的区别是什么？"><a href="#静态页面和动态页面的区别是什么？" class="headerlink" title="静态页面和动态页面的区别是什么？"></a>静态页面和动态页面的区别是什么？</h1><p>右击 查看源代码，ctrl+f无法搜到元素内容，说明是动态加载的，需要通过request的接口方法来抓取。</p>
<h1 id="怎么获取接口数据？注意什么"><a href="#怎么获取接口数据？注意什么" class="headerlink" title="怎么获取接口数据？注意什么"></a>怎么获取接口数据？注意什么</h1><p>1.在浏览器F12中network 刷新后，筛选出XHR类型为接口数据。过滤方法。<br>2.在代码获取requson中吗，如果是403，说明不成功，只有2打头的才成功。缺少headers<br>3.注意代码写法，url为响应中的长url。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response=requests.get(url=url,headers=headers)</span><br></pre></td></tr></table></figure>
<h1 id="获取接口数据后怎么解析？"><a href="#获取接口数据后怎么解析？" class="headerlink" title="获取接口数据后怎么解析？"></a>获取接口数据后怎么解析？</h1><p>1.善用print剥洋葱<br>2.ppprint 看数据两层剥键值对。<br>3.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NextData=RawData[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;list&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">url=<span class="string">&#x27;https://xueqiu.com/service/v5/stock/screener/quote/list?page=1&amp;size=30&amp;order=desc&amp;orderby=percent&amp;order_by=percent&amp;market=CN&amp;type=sh_sz&amp;_=1603124566528&#x27;</span></span><br><span class="line">response=requests.get(url=url,headers=headers)</span><br><span class="line">print(response)</span><br><span class="line">RawData=response.json()</span><br><span class="line"><span class="comment"># pprint.pprint(RawData)</span></span><br><span class="line">NextData=RawData[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;list&#x27;</span>]</span><br><span class="line">print(<span class="built_in">type</span>(NextData))</span><br><span class="line"><span class="comment"># print(NextData)</span></span><br><span class="line"><span class="comment"># print(NextData[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pprint.pprint(NextData[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> myrow <span class="keyword">in</span> NextData:</span><br><span class="line">    data1=myrow[<span class="string">&#x27;symbol&#x27;</span>]</span><br><span class="line">    data2= myrow[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    data3 = myrow[<span class="string">&#x27;current&#x27;</span>]</span><br><span class="line">    print(data1,data2,data3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="可以再探索的"><a href="#可以再探索的" class="headerlink" title="可以再探索的"></a>可以再探索的</h1><ul>
<li>保存至EXCEL</li>
<li>数据可视化</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>按照word模板批量输出</title>
    <url>/2021/02/13/%E6%8C%89%E7%85%A7word%E6%A8%A1%E6%9D%BF%E6%89%B9%E9%87%8F%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_data</span>(<span class="params">title,name,time</span>):</span></span><br><span class="line">    document=Document(<span class="string">&#x27;模板.docx&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> document.paragraphs:</span><br><span class="line">        i.text=i.text.replace(<span class="string">&#x27;**&#x27;</span>,title)</span><br><span class="line">        i.text=i.text.replace(<span class="string">&#x27;XX&#x27;</span>,name)</span><br><span class="line">        i.text = i.text.replace(<span class="string">&#x27;position3&#x27;</span>, time)</span><br><span class="line"></span><br><span class="line">    title=<span class="built_in">str</span>(random.randint(<span class="number">9999</span>,<span class="number">9999</span>))+title</span><br><span class="line">    document.save(title+<span class="string">&#x27;.docx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">excel=xlrd.open_workbook(<span class="string">&#x27;数据.xls&#x27;</span>)</span><br><span class="line">table=excel.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">nows=table.nrows</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nows):</span><br><span class="line">    title=table.cell(i,<span class="number">0</span>).value</span><br><span class="line">    name=table.cell(i,<span class="number">1</span>).value</span><br><span class="line">    time=xlrd.xldate_as_datetime(table.cell(i,<span class="number">2</span>).value,<span class="number">0</span>)</span><br><span class="line">    time=<span class="built_in">str</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>))</span><br><span class="line">    <span class="comment"># print(title,name,time)</span></span><br><span class="line">    change_data(title,name,time)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>排序算法及JAVA程序实现</title>
    <url>/2021/02/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8F%8AJAVA%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h1><p>针对有序数组，不断二分缩小查找范围。</p>
<ul>
<li>从数组的中间元素开始，如果中间元素正好是x，而查找成功</li>
<li>否则我们利用中间位 置将数组分为前、后两个子数组0如果x小于中间位置的元素，则进一 步查找前一个子数组否则进一步查找后-个子数组，</li>
<li>重复以上步骤，直到找到满足条件的元素，或直到子数组不存在为止，代表查找不成功。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right=array.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid =left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(array[mid]==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;array[mid])&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
调用<br>建立SearchMethon.java，类中包括binarySearch（）方法。<br>在主函数中，如下调用:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] caseArray= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>&#125;;</span><br><span class="line">        SearchMethod searchMethod=<span class="keyword">new</span> SearchMethod();</span><br><span class="line">        <span class="keyword">int</span> result=searchMethod.binarySearch(caseArray,<span class="number">11</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;二分查找的结果是：&quot;</span>+result);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
时间复杂度：对数级别<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1>逐一比较<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1>相邻的两个比较<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1>插入排序 对于每个元素，我们将它与之前排好序的元素进行比较，找到对应的位置后并插入</li>
</ul>
<p> 1.从第二个元素（第一个要被排序的新元素）开始，从后向前扫描之前的元素序列<br> 2.如果当前扫描的元素大于新元素，将扫描元素移动到下一位<br> 3.重复步骤2，直到找到一个小于或者等于新元素的位置<br> 4.将新元素插入到该位置<br>5.对于之后的元素重复步骤1~4<br>时间复杂度，在此算法中就是计算比较的次数，第一个元素我们需要比较1次，第二个元素2次，对于第n个元素，我们需要和之前的元素比较n次，比较总数量也就是 1 + 2 + … + n = n(n + 1) / 2 ≈ n^2。因为我们调换位置时采用「原地操作」(in place)，所以不需要额外空间，既空间复杂度为O(1)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">       <span class="comment">//从第二个元素开始扫描</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=array.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> cur=array[i];</span><br><span class="line">           <span class="keyword">int</span> j=i-<span class="number">1</span>;</span><br><span class="line">           <span class="comment">//寻找位置和后移位操作</span></span><br><span class="line">           <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;array[j]&gt;cur)&#123;</span><br><span class="line">               array[j+<span class="number">1</span>]=array[j];</span><br><span class="line">               j--;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//插入操作</span></span><br><span class="line">           array[j+<span class="number">1</span>]=cur;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><p>快排 选取一个目标元素，然后将目标元素放到数组中正确的位置。然后根据排好序后的元素，将数组切分为两个子数组，用相同的方法，在没有排好序的范围使用相同的操作。<br>分治递归<br>对于当前的数组，取最后一个元素当做基准数（pivot）<br>将所有比基准数小的元素排到基准数之前，比基准数大的排在基准数之后<br>当基准数被放到准确的位置之后，根据基数数的位置将元素切分为前后两个子数组<br>对子数组采用步骤1~4的递归操作，直到子数组的长度小于等于1为止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(iStart&gt;=iEnd) <span class="keyword">return</span> ;</span><br><span class="line">       <span class="keyword">int</span> iFind=findAndPut(array,iStart,iEnd);</span><br><span class="line">       quickSort(array,iStart,iFind-<span class="number">1</span>);</span><br><span class="line">       quickSort(array,iFind+<span class="number">1</span>,iEnd);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAndPut</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> holdNum=array[iEnd];</span><br><span class="line">       <span class="keyword">int</span> left=iStart;</span><br><span class="line">       <span class="keyword">int</span> right=iEnd-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">           <span class="keyword">while</span> (left&lt;=right&amp;array[left]&lt;=holdNum)&#123;</span><br><span class="line">               left++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">while</span>((right&gt;=left) &amp;&amp; (array[right]&gt;holdNum))&#123;</span><br><span class="line">               right--;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(left&gt;right) <span class="keyword">break</span>;</span><br><span class="line">           change(array,left,right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       change(array,left,iEnd);</span><br><span class="line">       <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp=array[i];</span><br><span class="line">       array[i]=array[j];</span><br><span class="line">       array[j]=temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>快排这里有些难以理解，有一个更好理解的版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAndPut</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line"><span class="comment">//更好理解的版本</span></span><br><span class="line">        <span class="keyword">int</span> holdNum=array[iEnd];<span class="comment">//选择右边的，则左边的指针先走；</span></span><br><span class="line">        <span class="keyword">int</span> left=iStart;</span><br><span class="line">        <span class="keyword">int</span> right=iEnd;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span>(array[left]&lt;=holdNum&amp;&amp;(left&lt;right))&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(array[right]&gt;=holdNum&amp;&amp;(left&lt;right))&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">                change(array,left,right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//跳出的结果是left==right；</span></span><br><span class="line">        change(array,left,iEnd);</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序<br>先通过递归拆分，然后再合并两个有序数组<br>调试方法：测试样本尽可能小，方便定位问题，然后利用端点调试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> len= array.length-<span class="number">1</span>;</span><br><span class="line">       mergeSort(array,<span class="number">0</span>,len);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (j&gt;i)&#123;</span><br><span class="line">           <span class="keyword">int</span> mid=(i+j)/<span class="number">2</span>;</span><br><span class="line">           mergeSort(array,i,mid);</span><br><span class="line">           mergeSort(array,mid+<span class="number">1</span>,j);</span><br><span class="line">           merge(array,i,mid,j);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i, <span class="keyword">int</span> mid,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">       <span class="comment">//合并两个有序数组</span></span><br><span class="line">       <span class="keyword">int</span>[] temp=(<span class="keyword">int</span>[])array.clone();</span><br><span class="line">       <span class="keyword">int</span> irun=i;</span><br><span class="line">       <span class="keyword">int</span> jrun=mid+<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> krun=i;</span><br><span class="line">       <span class="keyword">while</span>(irun&lt;=mid&amp;&amp;jrun&lt;=j)&#123;</span><br><span class="line">           <span class="keyword">if</span>(array[irun]&lt;=array[jrun])&#123;</span><br><span class="line">               temp[krun]=array[irun];</span><br><span class="line">               irun++;</span><br><span class="line">               krun++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span>&#123;</span><br><span class="line">               temp[krun]=array[jrun];</span><br><span class="line">               jrun++;</span><br><span class="line">               krun++;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(irun&lt;=mid)&#123;</span><br><span class="line">           temp[krun]=array[irun];</span><br><span class="line">           krun++;</span><br><span class="line">           irun++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(jrun&lt;=j)&#123;</span><br><span class="line">           temp[krun]=array[jrun];</span><br><span class="line">           krun++;</span><br><span class="line">           jrun++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> myi=i;myi&lt;=j;myi++)&#123;</span><br><span class="line">           array[myi]=temp[myi];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入排序 对于每个元素，我们将它与之前排好序的元素进行比较，找到对应的位置后并插入</span></span><br><span class="line">    <span class="comment">//1.从第二个元素（第一个要被排序的新元素）开始，从后向前扫描之前的元素序列</span></span><br><span class="line">    <span class="comment">//2.如果当前扫描的元素大于新元素，将扫描元素移动到下一位</span></span><br><span class="line">    <span class="comment">//3.重复步骤2，直到找到一个小于或者等于新元素的位置</span></span><br><span class="line">    <span class="comment">//4.将新元素插入到该位置</span></span><br><span class="line">    <span class="comment">//5.对于之后的元素重复步骤1~4</span></span><br><span class="line">    <span class="comment">//「时间复杂度」在此算法中就是计算比较的次数，第一个元素我们需要比较1次，第二个元素2次，对于第n个元素，我们需要和之前的元素比较n次，比较总数量也就是 1 + 2 + … + n = n(n + 1) / 2</span></span><br><span class="line">    <span class="comment">//≈ n^2。因为我们调换位置时采用「原地操作」(in place)，所以不需要额外空间，既空间复杂度为O(1)。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//从第二个元素开始扫描</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=array.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur=array[i];</span><br><span class="line">            <span class="keyword">int</span> j=i-<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//寻找位置和后移位操作</span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;array[j]&gt;cur)&#123;</span><br><span class="line">                array[j+<span class="number">1</span>]=array[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//插入操作</span></span><br><span class="line">            array[j+<span class="number">1</span>]=cur;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//快排 选取一个目标元素，然后将目标元素放到数组中正确的位置。然后根据排好序后的元素，将数组切分为两个子数组，用相同的方法，在没有排好序的范围使用相同的操作。</span></span><br><span class="line">    <span class="comment">//分治递归</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于当前的数组，取最后一个元素当做基准数（pivot）</span></span><br><span class="line">    <span class="comment">//将所有比基准数小的元素排到基准数之前，比基准数大的排在基准数之后</span></span><br><span class="line">    <span class="comment">//当基准数被放到准确的位置之后，根据基数数的位置将元素切分为前后两个子数组</span></span><br><span class="line">    <span class="comment">//对子数组采用步骤1~4的递归操作，直到子数组的长度小于等于1为止</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(iStart&gt;=iEnd) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> iFind=findAndPut(array,iStart,iEnd);</span><br><span class="line">        quickSort(array,iStart,iFind-<span class="number">1</span>);</span><br><span class="line">        quickSort(array,iFind+<span class="number">1</span>,iEnd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAndPut</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> holdNum=array[iEnd];</span><br><span class="line">        <span class="keyword">int</span> left=iStart;</span><br><span class="line">        <span class="keyword">int</span> right=iEnd-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (left&lt;=right&amp;array[left]&lt;=holdNum)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>((right&gt;=left) &amp;&amp; (array[right]&gt;holdNum))&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left&gt;right) <span class="keyword">break</span>;</span><br><span class="line">            change(array,left,right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        change(array,left,iEnd);</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=array[i];</span><br><span class="line">        array[i]=array[j];</span><br><span class="line">        array[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并排序</span></span><br><span class="line">    <span class="comment">//先通过递归拆分，然后再合并两个有序数组</span></span><br><span class="line">    <span class="comment">//调试方法：测试样本尽可能小，方便定位问题，然后利用端点调试。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len= array.length-<span class="number">1</span>;</span><br><span class="line">        mergeSort(array,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j&gt;i)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(i+j)/<span class="number">2</span>;</span><br><span class="line">            mergeSort(array,i,mid);</span><br><span class="line">            mergeSort(array,mid+<span class="number">1</span>,j);</span><br><span class="line">            merge(array,i,mid,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i, <span class="keyword">int</span> mid,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="comment">//合并两个有序数组</span></span><br><span class="line">        <span class="keyword">int</span>[] temp=(<span class="keyword">int</span>[])array.clone();</span><br><span class="line">        <span class="keyword">int</span> irun=i;</span><br><span class="line">        <span class="keyword">int</span> jrun=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> krun=i;</span><br><span class="line">        <span class="keyword">while</span>(irun&lt;=mid&amp;&amp;jrun&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[irun]&lt;=array[jrun])&#123;</span><br><span class="line">                temp[krun]=array[irun];</span><br><span class="line">                irun++;</span><br><span class="line">                krun++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp[krun]=array[jrun];</span><br><span class="line">                jrun++;</span><br><span class="line">                krun++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(irun&lt;=mid)&#123;</span><br><span class="line">            temp[krun]=array[irun];</span><br><span class="line">            krun++;</span><br><span class="line">            irun++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(jrun&lt;=j)&#123;</span><br><span class="line">            temp[krun]=array[jrun];</span><br><span class="line">            krun++;</span><br><span class="line">            jrun++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> myi=i;myi&lt;=j;myi++)&#123;</span><br><span class="line">            array[myi]=temp[myi];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分搜索</span></span><br><span class="line">    <span class="comment">//●从数组的中间元素开始，如果中间元素正好是x，而查找成功</span></span><br><span class="line">    <span class="comment">//●否则我们利用中间位 置将数组分为前、后两个子数组0如果x小于中间位置的元素，则进一 步查找前一个子数组否则进一步查找后-个子数组，</span></span><br><span class="line">    <span class="comment">//●重复以上步骤，直到找到满足条件的元素，或直到子数组不存在为止，代表查找不成功。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid =left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;array[mid])&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//时间复杂度：对数级别</span></span><br><span class="line">    <span class="comment">//前提是排好序的数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] caseArray= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>&#125;;</span><br><span class="line">        SearchMethod searchMethod=<span class="keyword">new</span> SearchMethod();</span><br><span class="line">        <span class="keyword">int</span> result=searchMethod.binarySearch(caseArray,<span class="number">11</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;二分查找的结果是：&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] caseArray2= &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        SortMethod sortmethod=<span class="keyword">new</span> SortMethod();</span><br><span class="line">        sortmethod.insertSort(caseArray2);</span><br><span class="line">        System.out.println(<span class="string">&quot;插入排序的结果是：&quot;</span>+Arrays.toString(caseArray2));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] caseArray3= &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">22</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        SortMethod quickmethod=<span class="keyword">new</span> SortMethod();</span><br><span class="line">        sortmethod.quickSort(caseArray3,<span class="number">0</span>, caseArray3.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;快排的结果是：&quot;</span>+Arrays.toString(caseArray3));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] caseArray4= &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        SortMethod mergemethod=<span class="keyword">new</span> SortMethod();</span><br><span class="line">        sortmethod.mergeSort(caseArray4);</span><br><span class="line">        System.out.println(<span class="string">&quot;归并排序的结果是：&quot;</span>+Arrays.toString(caseArray4));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库</title>
    <url>/2021/04/12/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="数据仓库介绍"><a href="#数据仓库介绍" class="headerlink" title="数据仓库介绍"></a>数据仓库介绍</h2><p>数据库关系模型，数据仓库是维度模型。<br>分层，解耦<br>业务数据库的雪花模型到大宽表；<br>业务自身的源数据库是 <strong>面向事务处理</strong>  的<br>数据库是用来操作的，增删改查，【术语：面向事务的操作性数据库】；数据仓库是用来分析和支持决策的；另外数据仓库的数据可以是来自于多个异构的数据源。</p>
<h2 id="2-hadoop"><a href="#2-hadoop" class="headerlink" title="2. hadoop"></a>2. hadoop</h2><p>运行在linux上，hadoop集群<br>hdfs 分布式<br>mapreduce 离线分析<br>yarn 资源管理和调度框架</p>
<h2 id="3-spark"><a href="#3-spark" class="headerlink" title="3.spark"></a>3.spark</h2><p>批处理计算<br>mapreduce 替代品</p>
<h2 id="4-hive"><a href="#4-hive" class="headerlink" title="4.hive"></a>4.hive</h2><p>hive在mapReduce之上，将hive sql转换成mapReduce作业。</p>
]]></content>
      <categories>
        <category>数据仓库</category>
      </categories>
  </entry>
  <entry>
    <title>数据分析思路</title>
    <url>/2021/02/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="人货场"><a href="#人货场" class="headerlink" title="人货场"></a>人货场</h1><h1 id="数据敏感度"><a href="#数据敏感度" class="headerlink" title="数据敏感度"></a>数据敏感度</h1><p>主动提高数据敏感度的方法： 1.数字游戏。如24点，数独等 2.看财经类新闻报道，判断一下数据是否有问题，可通过搜过，查证，逻辑判断来证明 3.学会质疑，不要盲信专家的数据 4.记大数，关键数和异常数，业务中多记一些游泳的数据会显得更专业 </p>
<h1 id="数据分析报告"><a href="#数据分析报告" class="headerlink" title="数据分析报告"></a>数据分析报告</h1><p>1、不要试图面面俱到，一定要有重点。 2、不能写成记叙文，要写成议论文。 3、既要关注点，还要照顾线和面。 4、有逻辑性。 5、尽量图表化。 6、不要回避“不良结论”。 7、务必注明数据来源、数据单位、特殊指标的计算方法等</p>
<h1 id="数据分析思路和角度"><a href="#数据分析思路和角度" class="headerlink" title="数据分析思路和角度"></a>数据分析思路和角度</h1><p>常规思路：<br>数据总览作为第一part，一句话结论<br>如：一共多少条，总价是多少，平均单价是多少<br>分类分析<br>排序分析：单价最高的前几是：最高的几项是：<br>文字类的用词云图<br>常见的图：直方图等</p>
<h1 id="数据分析示例"><a href="#数据分析示例" class="headerlink" title="数据分析示例"></a>数据分析示例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line, Grid, Bar, Pie, Funnel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line"><span class="comment"># data_df = pd.read_csv(&#x27;./whole_dataset.csv&#x27;) </span></span><br><span class="line">data_df = pd.read_csv(<span class="string">&#x27;./sampled_dataset.csv&#x27;</span>) <span class="comment"># 加载精简版的数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预览</span></span><br><span class="line">data_df.head()</span><br><span class="line">data_df.info()</span><br><span class="line"><span class="comment"># 检查重复值</span></span><br><span class="line">data_df.duplicated().<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment"># 删除重复值</span></span><br><span class="line">data_df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 删除无用列</span></span><br><span class="line">data_df.drop(columns=[<span class="string">&#x27;user_geohash&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">data_df.shape</span><br><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line">data_df.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment"># 预览清洗后的数据集</span></span><br><span class="line">data_df.head()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加行为类型描述列</span></span><br><span class="line">behavior_type_dict = &#123;<span class="number">1</span>: <span class="string">&#x27;点击&#x27;</span>,</span><br><span class="line">                      <span class="number">2</span>: <span class="string">&#x27;收藏&#x27;</span>,</span><br><span class="line">                      <span class="number">3</span>: <span class="string">&#x27;加入购物车&#x27;</span>,</span><br><span class="line">                      <span class="number">4</span>: <span class="string">&#x27;支付&#x27;</span>&#125;</span><br><span class="line">data_df[<span class="string">&#x27;behavior_desc&#x27;</span>] = data_df[<span class="string">&#x27;behavior_type&#x27;</span>].<span class="built_in">map</span>(behavior_type_dict)</span><br><span class="line">data_df.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理时间列</span></span><br><span class="line">data_df[[<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;hour&#x27;</span>]] = data_df[<span class="string">&#x27;time&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>, expand=<span class="literal">True</span>)</span><br><span class="line">data_df.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改数据类型</span></span><br><span class="line">data_df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(data_df[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">data_df[<span class="string">&#x27;hour&#x27;</span>] = data_df[<span class="string">&#x27;hour&#x27;</span>].astype(<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line"><span class="comment"># 按时间排序</span></span><br><span class="line">data_df = data_df.sort_values(by=[<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;hour&#x27;</span>])</span><br><span class="line"><span class="comment"># 保存清洗处理的数据集</span></span><br><span class="line">data_df.to_csv(<span class="string">&#x27;./clean_dataset.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载处理的数据集</span></span><br><span class="line">data_df = pd.read_csv(<span class="string">&#x27;./clean_dataset.csv&#x27;</span>)</span><br><span class="line">data_df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(data_df[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">data_df.head()</span><br><span class="line"><span class="comment"># 总用户数量</span></span><br><span class="line">user_count = data_df[<span class="string">&#x27;user_id&#x27;</span>].nunique()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成交用户数</span></span><br><span class="line">paid_user_count = data_df[data_df[<span class="string">&#x27;behavior_desc&#x27;</span>] == <span class="string">&#x27;支付&#x27;</span>][<span class="string">&#x27;user_id&#x27;</span>].nunique()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;总用户数量：&#123;&#125;，成交用户数量：&#123;&#125;，成交用户占比：&#123;:.2%&#125;&#x27;</span></span><br><span class="line">      .<span class="built_in">format</span>(user_count, paid_user_count, paid_user_count / user_count))</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 日流量指标</span></span><br><span class="line"><span class="comment"># 日 PV</span></span><br><span class="line">daily_pv = data_df[data_df[<span class="string">&#x27;behavior_desc&#x27;</span>] == <span class="string">&#x27;点击&#x27;</span>].groupby(<span class="string">&#x27;date&#x27;</span>).count()[<span class="string">&#x27;user_id&#x27;</span>].reset_index().rename(columns = &#123;<span class="string">&#x27;user_id&#x27;</span>: <span class="string">&#x27;pv&#x27;</span>&#125;)</span><br><span class="line">daily_pv.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化日PV</span></span><br><span class="line">daily_pv_line = (</span><br><span class="line">    Line()</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(</span><br><span class="line">            title=<span class="string">&#x27;用户流量指标&#x27;</span>, </span><br><span class="line">            subtitle=<span class="string">&#x27;日PV&#x27;</span>),</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(</span><br><span class="line">            trigger=<span class="string">&#x27;item&#x27;</span>, </span><br><span class="line">            axis_pointer_type=<span class="string">&#x27;cross&#x27;</span>),</span><br><span class="line">        xaxis_opts=opts.AxisOpts(</span><br><span class="line">            type_=<span class="string">&#x27;time&#x27;</span>,</span><br><span class="line">            name=<span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">        yaxis_opts=opts.AxisOpts(</span><br><span class="line">            type_=<span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            name=<span class="string">&#x27;PV&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    .add_xaxis(xaxis_data=daily_pv[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">    .add_yaxis(</span><br><span class="line">        series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        y_axis=daily_pv[<span class="string">&#x27;pv&#x27;</span>],</span><br><span class="line">        is_symbol_show=<span class="literal">True</span>,</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">daily_pv_line.render_notebook()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日流量指标</span></span><br><span class="line"><span class="comment"># 日 UV</span></span><br><span class="line">daily_uv = data_df[data_df[<span class="string">&#x27;behavior_desc&#x27;</span>] == <span class="string">&#x27;点击&#x27;</span>].groupby(<span class="string">&#x27;date&#x27;</span>).nunique()[<span class="string">&#x27;user_id&#x27;</span>].reset_index().rename(columns=&#123;<span class="string">&#x27;user_id&#x27;</span>: <span class="string">&#x27;uv&#x27;</span>&#125;)</span><br><span class="line">daily_uv.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造R值</span></span><br><span class="line">last_time = data_df[data_df[<span class="string">&#x27;behavior_desc&#x27;</span>] == <span class="string">&#x27;支付&#x27;</span>].groupby(<span class="string">&#x27;user_id&#x27;</span>).<span class="built_in">max</span>()[<span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">recency = (data_df[<span class="string">&#x27;date&#x27;</span>].<span class="built_in">max</span>() - last_time).dt.days.copy()</span><br><span class="line">median_recency = recency.median()</span><br><span class="line">recency[recency &lt;= median_recency] = <span class="number">0</span></span><br><span class="line">recency[recency &gt; median_recency] = <span class="number">1</span></span><br><span class="line">recency.name = <span class="string">&#x27;R&#x27;</span></span><br><span class="line">recency.head(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建F值</span></span><br><span class="line">frequency = data_df[data_df[<span class="string">&#x27;behavior_desc&#x27;</span>] == <span class="string">&#x27;支付&#x27;</span>].groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;item_id&#x27;</span>].size()</span><br><span class="line">median_freq = frequency.median()</span><br><span class="line">frequency[frequency &lt;= median_freq] = <span class="number">0</span></span><br><span class="line">frequency[frequency &gt; median_freq] = <span class="number">1</span></span><br><span class="line">frequency.name = <span class="string">&#x27;F&#x27;</span></span><br><span class="line">frequency.head(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">rfm = pd.merge(recency, frequency, on=<span class="string">&#x27;user_id&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">rfm = rfm[[<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;F&#x27;</span>]].astype(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">rfm[<span class="string">&#x27;RF&#x27;</span>] = rfm[<span class="string">&#x27;R&#x27;</span>] + rfm[<span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">rfm.head()</span><br><span class="line"></span><br><span class="line">user_tag_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;11&#x27;</span>: <span class="string">&#x27;重要价值客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;10&#x27;</span>: <span class="string">&#x27;重要发展客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;01&#x27;</span>: <span class="string">&#x27;重要保持客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;00&#x27;</span>: <span class="string">&#x27;重要挽留客户&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">rfm[<span class="string">&#x27;user_tag&#x27;</span>] = rfm[<span class="string">&#x27;RF&#x27;</span>].<span class="built_in">map</span>(user_tag_dict)</span><br><span class="line">rfm.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计分层客户数量</span></span><br><span class="line">user_tag_count = rfm.groupby(<span class="string">&#x27;user_tag&#x27;</span>).size()</span><br></pre></td></tr></table></figure>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p>info()方法获取到了各个数据非空的数量，以及它们的数据类型：<br>去除重复值<br>df_tb.drop_duplicates(inplace=True)</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2021/02/13/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h1><h2 id="1-1关系型数据库"><a href="#1-1关系型数据库" class="headerlink" title="1.1关系型数据库"></a>1.1关系型数据库</h2><p>ER建模，3NF模型，实体加关系<br>主键：唯一不重复，不使用业务数据如学号，身份证号；可以使用自增id，GUID等<br>联合主键：没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升</p>
<h2 id="1-2-NoSQL数据库"><a href="#1-2-NoSQL数据库" class="headerlink" title="1.2 NoSQL数据库"></a>1.2 NoSQL数据库</h2><p>键值对存储<br>redis</p>
<p>列存储<br>Hbase</p>
<p>文档型存储<br>MongoDB</p>
<p>图性数据库</p>
<h3 id="1-2-1-mongo使用"><a href="#1-2-1-mongo使用" class="headerlink" title="1.2.1 mongo使用"></a>1.2.1 mongo使用</h3><h4 id="mongd启动"><a href="#mongd启动" class="headerlink" title="mongd启动"></a>mongd启动</h4><p>mongod –dbpath “路径名”<br>这里的路径名指得是你自行建立数据库的地方<br>注意加引号</p>
<p>这一步可以通过配置之类的，将mongodb制作成windows服务</p>
<h4 id="cmd连接"><a href="#cmd连接" class="headerlink" title="cmd连接"></a>cmd连接</h4><p>因为已经配置环境变量，所以可以直接在任意路径输入命令<br>命令<br>mongo  可以连接<br>db    显示当前数据库</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>db   查看当前的数据库<br>show dbs   查看所有的数据库<br>use 数据库名   切换到数据库，如果不存在，则创建一个(插入数据后才算创建成功)<br>db .dropDatabase() 删除当前指向的数据库<br>db.集合名.insert(value)  添加数据到指定的集合中<br>db.集合名.find()</p>
<h4 id="compass客户端操作"><a href="#compass客户端操作" class="headerlink" title="compass客户端操作"></a>compass客户端操作</h4><p>图形化的客户端，直接连接即可</p>
<h4 id="python操作"><a href="#python操作" class="headerlink" title="python操作"></a>python操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取连接mongodb的对象</span></span><br><span class="line">client=pymongo.MongoClient(<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库</span></span><br><span class="line">db=client.test</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库的集合（类似于关系型数据库的表的概念）</span></span><br><span class="line">collection=db.mess</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line"><span class="comment"># collection.insert_one(&#123;&quot;username&quot;:&quot;tao&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写入多条数据</span></span><br><span class="line"><span class="comment"># collection.insert_many([</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;name&quot;:&quot;小红&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;age&quot;: 18</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &quot;name&quot;:&quot;小明&quot;,</span></span><br><span class="line"><span class="comment">#         &quot;age&quot;: 20</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找数据</span></span><br><span class="line"><span class="comment"># cursor=collection.find()</span></span><br><span class="line"><span class="comment"># for x in  cursor:</span></span><br><span class="line"><span class="comment">#     print(x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新数据</span></span><br><span class="line">collection.update_one(&#123;<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;,&#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">33</span>&#125;&#125;)</span><br><span class="line"><span class="comment">#此外还有update_many</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 delete_one等类似</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分箱</title>
    <url>/2021/05/04/%E6%95%B0%E6%8D%AE%E5%88%86%E7%AE%B1/</url>
    <content><![CDATA[<h1 id="无序变量分箱"><a href="#无序变量分箱" class="headerlink" title="无序变量分箱"></a>无序变量分箱</h1><p>在实际模型建立当中，有个 job 职业的特征，取值为（“国家机关人员”，“专业技术人员”，“商业服务人员”），对于这一类变量，如果我们将其依次赋值为（国家机关人员=1；专业技术人员=2；商业服务人员=3），就很容易产生一个问题，不同种类的职业在数据层面上就有了大小顺序之分，国家机关人员和商业服务人员的差距是2，专业技术人员和商业服务人员的之间的差距是1，而我们原来的中文分类中是不存在这种先后顺序关系的。所以这么简单的赋值是会使变量失去原来的衡量效果。</p>
<p>怎么处理这个问题呢，“一位有效编码” （one-hot Encoding）可以解决这个问题，通常叫做虚变量或者哑变量（dummpy variable）：比如职业特征有3个不同变量，那么将其生成个2哑变量，分别是“是否国家党政职业人员”，“是否专业技术人员” ，每个虚变量取值（1，0）。<br>为什么2个哑变量而非3个？<br>在模型中引入多个虚拟变量时，虚拟变量的个数应按下列原则确定：<br>1.回归模型有截距：一般的，若该特征下n个属性均互斥（如，男/女;儿童/青年/中年/老年），在生成虚拟变量时，应该生成 n-1个虚变量，这样可以避免产生多重共线性。<br>2. 回归模型无截距项：有n个特征，设置n个虚拟变量<br>使用pandas可以很方便的对离散型特征进行one-hot编码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 实现</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df= pd.DataFrame([[<span class="string">&#x27;专业技术人员&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>],[<span class="string">&#x27;国家机关人员&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">2</span>],[<span class="string">&#x27;国家机关人员&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>],[<span class="string">&#x27;商业人员&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">4</span>],[<span class="string">&#x27;国家机关人员&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">5</span>]],columns=[<span class="string">&#x27;job&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">df = pd.get_dummies(df,columns=[<span class="string">&#x27;job&#x27;</span>,<span class="string">&#x27;class&#x27;</span>],drop_first=<span class="number">0</span>)<span class="comment"># columns表示你要引入分箱的变量，drop_first=0 代表使用 n-1个虚拟变量</span></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<h1 id="有序变量分箱"><a href="#有序变量分箱" class="headerlink" title="有序变量分箱"></a>有序变量分箱</h1><p>各取值之间还存在等级关系。比如高血压分级（0=正常，1=正常高值，2=1级高血压，3=2级高血压，4=3级高血压）这类变量处理起来简直不要太省心，使用 pandas 中的 map（）替换相应变量就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df= pd.DataFrame([<span class="string">&#x27;正常&#x27;</span>,<span class="string">&#x27;3级高血压&#x27;</span>,<span class="string">&#x27;正常&#x27;</span>,<span class="string">&#x27;2级高血压&#x27;</span>,<span class="string">&#x27;正常&#x27;</span>,<span class="string">&#x27;正常高值&#x27;</span>,<span class="string">&#x27;1级高血压&#x27;</span>],columns=[<span class="string">&#x27;blood_pressure&#x27;</span>])</span><br><span class="line">dic_blood = &#123;<span class="string">&#x27;正常&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;正常高值&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;1级高血压&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;2级高血压&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;3级高血压&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line">df[<span class="string">&#x27;blood_pressure_enc&#x27;</span>] = df[<span class="string">&#x27;blood_pressure&#x27;</span>].<span class="built_in">map</span>(dic_blood)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<h1 id="连续变量分箱"><a href="#连续变量分箱" class="headerlink" title="连续变量分箱"></a>连续变量分箱</h1><p>等宽划分：按照相同宽度将数据分成几等份。缺点是受到异常值的影响比较大。 pandas.cut方法可以进行等宽划分。</p>
<p>等频划分：将数据分成几等份，每等份数据里面的个数是一样的。pandas.qcut方法可以进行等频划分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="number">22</span>,<span class="number">1</span>],[<span class="number">13</span>,<span class="number">1</span>],[<span class="number">33</span>,<span class="number">1</span>],[<span class="number">52</span>,<span class="number">0</span>],[<span class="number">16</span>,<span class="number">0</span>],[<span class="number">42</span>,<span class="number">1</span>],[<span class="number">53</span>,<span class="number">1</span>],[<span class="number">39</span>,<span class="number">1</span>],[<span class="number">26</span>,<span class="number">0</span>],[<span class="number">66</span>,<span class="number">0</span>]],columns=[<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>])</span><br><span class="line"><span class="comment">#print(df)</span></span><br><span class="line">df[<span class="string">&#x27;age_bin_1&#x27;</span>] = pd.qcut(df[<span class="string">&#x27;age&#x27;</span>],<span class="number">3</span>) <span class="comment">#新增一列存储等频划分的分箱特征</span></span><br><span class="line">df[<span class="string">&#x27;age_bin_2&#x27;</span>] = pd.cut(df[<span class="string">&#x27;age&#x27;</span>],<span class="number">3</span>)  <span class="comment">#新增一列存储等距划分的分箱特征</span></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>数据映射处理与核对</title>
    <url>/2021/04/15/%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84%E5%A4%84%E7%90%86%E4%B8%8E%E6%A0%B8%E5%AF%B9/</url>
    <content><![CDATA[<p>jyputer配置显示所有行列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示所有列</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment">#显示所有行</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>读入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data&#x3D;pd.read_csv(&#39;测试indx_comn_02_0100000000_20210331.txt&#39;,sep&#x3D;&quot;\|\+\|&quot;,header&#x3D;None,dtype&#x3D;str,engine&#x3D;&#39;python&#39;,names&#x3D;[&#39;日期&#39;,&#39;指标编码&#39;,&#39;频率&#39;,&#39;机构代码&#39;,&#39;币种代码&#39;,&#39;数值&#39;])</span><br><span class="line">mapping1&#x3D;pd.read_excel(&#39;回去表.xlsx&#39;,sheet_name&#x3D;&#39;机构&#39;,dtype&#x3D;str)</span><br><span class="line">mapping2&#x3D;pd.read_excel(&#39;回去表.xlsx&#39;,sheet_name&#x3D;&#39;指标&#39;,dtype&#x3D;str)</span><br><span class="line">mapping2&#x3D;mapping2.rename(columns&#x3D;&#123;&#39;ACCOUNT&#39;:&#39;指标编码&#39;&#125;)</span><br></pre></td></tr></table></figure>
<p>多表匹配，然后增加列,类似于vlookup功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dftest=data.merge(mapping1,how=<span class="string">&#x27;left&#x27;</span>,on=<span class="string">&#x27;机构代码&#x27;</span>)</span><br><span class="line">dftest=dftest.merge(mapping2,how=<span class="string">&#x27;left&#x27;</span>,on=<span class="string">&#x27;指标编码&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>选取pandans中的部分列作为结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfout=dftest[[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;机构代码&#x27;</span>,<span class="string">&#x27;机构名称&#x27;</span>,<span class="string">&#x27;指标编码&#x27;</span>,<span class="string">&#x27;指标名称&#x27;</span>,<span class="string">&#x27;数值&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<p>删除空行，未用到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfout2=dfout.dropna(thresh=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>统计个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value_count=dfout[<span class="string">&#x27;机构名称&#x27;</span>].value_counts()</span><br><span class="line">dflog=value_count.to_frame()</span><br><span class="line">dflog=dflog.rename(columns=&#123;<span class="string">&#x27;机构名称&#x27;</span>:<span class="string">&#x27;导出数据指标个数&#x27;</span>&#125;)</span><br><span class="line">dflog.loc[<span class="string">&#x27;汇总&#x27;</span>]=<span class="built_in">sum</span>(value_count)</span><br></pre></td></tr></table></figure>
<p>输出表格，因为需要设置列宽，所以通过xlsxwriter来设置表格格式等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;根据txt数据反向回去的指标.xlsx&#x27;</span>, engine=<span class="string">&#x27;xlsxwriter&#x27;</span>)</span><br><span class="line">dfout.to_excel(writer ,sheet_name=<span class="string">&#x27;指标值&#x27;</span>,index=<span class="literal">False</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">worksheet = writer.sheets[<span class="string">&#x27;指标值&#x27;</span>]</span><br><span class="line">worksheet.set_column(<span class="string">&quot;A:A&quot;</span>, <span class="number">10</span>) <span class="comment"># 在这里更改宽度值</span></span><br><span class="line">worksheet.set_column(<span class="string">&quot;B:B&quot;</span>, <span class="number">15</span>) <span class="comment"># 在这里更改宽度值</span></span><br><span class="line"></span><br><span class="line">dflog.to_excel(writer ,sheet_name=<span class="string">&#x27;推送数据统计情况&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">sheetlog = writer.sheets[<span class="string">&#x27;推送数据统计情况&#x27;</span>]</span><br><span class="line">sheetlog.set_column(<span class="string">&quot;A:A&quot;</span>, <span class="number">35</span>) <span class="comment"># 在这里更改宽度值</span></span><br><span class="line">sheetlog.set_column(<span class="string">&quot;B:B&quot;</span>, <span class="number">10</span>) <span class="comment"># 在这里更改宽度值</span></span><br><span class="line"></span><br><span class="line"> writer.save()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>方法论和经验</title>
    <url>/2021/02/15/%E6%96%B9%E6%B3%95%E8%AE%BA%E5%92%8C%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><ul>
<li>实战第一，JD是最好的学习方法</li>
<li>不要买课，不参与打卡之类的活动，按照自己的节奏来</li>
<li>社区交流很重要，社区交流可以有更多的触发点。【动机 能力 触发点】</li>
<li>主动回想起来，给自己提问题。然后要思考本质是什么，要从直觉的角度想明白这个问题。尤其是算法和概率的问题。</li>
<li>笔记不要copy，要记录自己的，清洗后的笔记，包括自己用自己的语言描述，另外也积累自己的代码库，方便下次遇到相同的问题，直接copy。</li>
<li>==遇到问题解决问题的这个过程== 中恰恰是提升的那一重要的步骤，这个过程正好是不能速成的重要积累。是宝贵的hands on experience。有问题，遇到不符合预期的问题，解决和排查的过程很重要</li>
<li>多用实例，引发兴趣和问题的例子，场景</li>
<li>初期可以用视频学习，然后是文档，博客。同样的up主，youtube上干货更多，B站上更商业化；找废话少的视频，一下好几百集的可以直接不看，这种适合收藏，而不适合用来入门。</li>
<li>带着问题，以自己为主线，偶尔看一下这个文章带来的宏观架构都有什么，泛化，但是不要花太多时间，会被带偏。跟着自己的任务走。</li>
<li> 有环境：如linux linux 虚拟机，xshell，实际敲命令；网络有wiresock，postman，抓包看；python 在ide中试；有素材：做数据分析要数据，做web要有图等，有具体的要求和目标等；有场景：有问题，遇到不符合预期的问题，解决和排查的过程很重要<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2></li>
</ul>
<p>1.收集-&gt;复盘，重视周报，日报，总结汇报等，并不是浪费时间，是非常重要的事情。形式反而不重要，可以用表格，邮件，word等，重要的是坚持。<br>2.事情有窗口期，一定要趁着机会做，不要把所有的事情都推后。这是最省力气的。</p>
<h2 id="blog原则"><a href="#blog原则" class="headerlink" title="blog原则"></a>blog原则</h2><ul>
<li>在原有的地方更新增加，促进自己有更高的掌握，有积累感。</li>
<li>不要为了强行归类，舍弃闪光点</li>
<li>初期可以乱些，等有了更深的认识再更新</li>
<li>注意写代码，不要只写基础理论，场景实际例子非常重要，可以以实例的角度来写，而不是站在一个尽可能掌握多而系统的技术的角度来写。包括命名用目的例子来命名。</li>
<li>记录经常犯错，或者总是忘得东西，方便下次用的时候直接快速得回想起来，而不是再从0查找。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>同样地，在学习某项技术时，把学习拆分成很多段，每段以开发一个小项目进行“验收”，比把一个技术先学完，再做一个大项目，效果要好得多。</p>
<p>而最糟的方式，一是只看书听课，却不动手，这是在陆地上看游泳录相学游泳</p>
<p>次糟的方式，是相信先把理论学好，“内力充沛”，然后去实践（即学外功和招数套路），必然势如破竹，进展一日千里</p>
<p>要遵循人类的认知规律</p>
<p>螺旋式上升或者波浪式上升，或者阶梯式上升，反正不是线性的。很多人以为是线性的。</p>
<p>在公司实习一年顶得上你自学三年，这句话不是没道理的，当然我也很想知道为啥会是这样，所以为了探究这个问题，体验我们平常自学和在公司到底有什么区别，我特意找个时间去公司体验了一把，后来让我明白的就是，在公司完全就是项目驱动式的学习（当然不是全部）。</p>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习入门</title>
    <url>/2021/02/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="机器学习（ML）"><a href="#机器学习（ML）" class="headerlink" title="机器学习（ML）"></a>机器学习（ML）</h1><p>当前最主流的两种机器学习模型是<strong>随机森林</strong>和<strong>梯度提升树</strong>。<br>机器学习的主要障碍是特征工程这个步骤，这需要领域专家在进入训练过程之前就要找到非常重要的特征。特征工程步骤是要靠手动完成的，而且需要大量领域专业知识，因此它成为当今大多数机器学习任务的主要瓶颈。<br>机器学习的本质就是将问题转化为数学问题，然后解答数学题的过程。</p>
<h2 id="机器学习的算法和算法导论的经典算法有什么不同？"><a href="#机器学习的算法和算法导论的经典算法有什么不同？" class="headerlink" title="机器学习的算法和算法导论的经典算法有什么不同？"></a>机器学习的算法和算法导论的经典算法有什么不同？</h2><p>算法导论里的算法本质上是对有精确解的问题，如何更有效率地求得这个解。这个效率可以是计算时间更短，也可以是计算过程所需要的空间更少。<br>算法导论中的算法关注点在数据结构和计算复杂度，属于离散数学的一个分支。<br>一个简单的例子是，给定一个乱序数组，如何快速的将其按从小到大的顺序重新排列，或者找到其中的中位数。这些问题都有确定且唯一的答案，一般都会有一个笨方法（穷举或遍历），只要一步一步来就可以解，所谓算法只是如何精简步骤，更快更省事地找到这个解。这些算法处理的数据也都是结构简洁且干净的类型，比如数组，二叉树，图之类的数据结构。数据规模对于这些算法而言，影响的是计算所需的时间和空间，不会因为规模改变而影响算法本身的逻辑以及计算的结果。<br>机器学习要解决的问题一般没有精确解，也不能用穷举或遍历这种步骤明确的方法找到解，而且需要强调的是“学习”这个属性。<br>《算法导论》里几乎都是组合优化；而机器学习里主要是连续的问题，凸优化较多，也有很多非凸优化。机器学习算法自然大都是梯度下降、坐标下降、蒙特卡洛 这样的算法，与《算法导论》里的算法长得很不像。<br>是机器学习里也有组合优化，比如聚类、比如概率图模型。</p>
<ul>
<li>k-means是method，有几种优化问题model，有很多求解的algorithms。你们最常用的那种迭代算法是Lloyd Algorithm。</li>
<li>LDA是method也是model（这种method就一种model），这个model的求解是个NP Hard的问题（我记得Arora文章里证明过）。有很多种算法求解LDA，比如variational inference、MCMC、tensor decomposition。</li>
<li>word2vec是method，用来解决NLP的一些问题；有很多models，比如skip-gram、深度学习；每种model都有很多算法求解。<br>method和model有区别，但是界限不明，很多时候可以混用。但是algorithm和method绝对不能混用<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2></li>
<li>分类</li>
<li>回归</li>
<li>聚类<h2 id="常见的模型指标"><a href="#常见的模型指标" class="headerlink" title="常见的模型指标"></a>常见的模型指标</h2>正确率 —— 提取出的正确信息条数 / 提取出的信息条数<br>召回率 —— 提取出的正确信息条数 / 样本中的信息条数<br>F 值 —— 正确率 * 召回率 * 2 / （正确率 + 召回率）（F值即为正确率和召回率的调和平均值）<br>举个例子如下:</li>
</ul>
<p>举个例子如下: 某池塘有 1400 条鲤鱼，300 只虾，300 只乌龟。现在以捕鲤鱼为目的。撒了一张网，逮住了 700 条鲤鱼，200 只 虾， 100 只乌龟。那么这些指标分别如下: 正确率 = 700 / (700 + 200 + 100) = 70% 召回率 = 700 / 1400 = 50% F 值 = 70% * 50% * 2 / (70% + 50%) = 58.3%</p>
<h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>在使用训练集对参数进行训练的时候，经常会发现人们通常会将一整个训练集分为三个部分（比如mnist手写训练集）。一般分为：训练集（train_set），评估集（valid_set），测试集（test_set）这三个部分。这其实是为了保证训练效果而特意设置的。其中测试集很好理解，其实就是完全不参与训练的数据，仅仅用来观测测试效果的数据。而训练集和评估集则牵涉到下面的知识了。<br>因为在实际的训练中，训练的结果对于训练集的拟合程度通常还是挺好的（初始条件敏感），但是对于训练集之外的数据的拟合程度通常就不那么令人满意了。因此我们通常并不会把所有的数据集都拿来训练，而是分出一部分来（这一部分不参加训练）对训练集生成的参数进行测试，相对客观的判断这些参数对训练集之外的数据的符合程度。这种思想就称为交叉验证</p>
<h1 id="深度学习（Deep-Learning）"><a href="#深度学习（Deep-Learning）" class="headerlink" title="深度学习（Deep Learning）"></a>深度学习（Deep Learning）</h1><p>计算机科学家重新使用<strong>神经网络</strong>的许多层来完成这些人类模仿的任务。这给<strong>DNN（深度神经网络)</strong> 带来了新的生机，并在图像分类和语音识别任务方面提供了重大突破。DNN的主要区别在于，你可以将原始信号（例如RGB像素值）直接输入DNN，而不需要创建任何域特定的输入功能。通过多层神经元（这就是为什么它被称为“深度”神经网络），DNN可以“自动”通过每一层产生适当的特征，最后提供一个非常好的预测。这极大地消除了寻找“特征工程”的麻烦。<br>DNN也演变成许多不同的网络拓扑结构，所以有<strong>CNN（卷积神经网络)**， **RNN（递归神经网络</strong>， <strong>LSTM（长期短期记忆）</strong>， <strong>GAN（生成敌对网络）</strong> ，转移学习，注意模型（attention model）所有的这些被统称为深度学习（Deep Learning），它正在引起整个机器学习界的关注。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/2021/07/06/%E6%A0%91/</url>
    <content><![CDATA[<h2 id="PYTHON实现二叉树的最大深度"><a href="#PYTHON实现二叉树的最大深度" class="headerlink" title="PYTHON实现二叉树的最大深度"></a>PYTHON实现二叉树的最大深度</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment">#深度优先遍历，树高为root的左子树和右子树中最高的高度加1</span></span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left_high=self.maxDepth(root.left)</span><br><span class="line">        right_high=self.maxDepth(root.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left_high,right_high)+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>队列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth2</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">       <span class="comment"># 广度优先算法</span></span><br><span class="line">       <span class="comment">#使用队列实现BFS，循环时把当前层的节点出队，下一层节点入队</span></span><br><span class="line">       <span class="comment"># 为了记录层数，要嵌套一个弹出树当前层的所有节点的循环，内部循环结束后depth + 1</span></span><br><span class="line">       <span class="comment"># 当队列为空时，已遍历完树的所有节点，循环结束，返回depth</span></span><br><span class="line">       <span class="comment"># 代码</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       queue = deque([root])</span><br><span class="line">       depth=<span class="number">0</span></span><br><span class="line">       <span class="keyword">while</span> queue:</span><br><span class="line">           n=<span class="built_in">len</span>(queue)</span><br><span class="line">           <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">               node=queue.popleft()</span><br><span class="line">               <span class="keyword">if</span> node.left:</span><br><span class="line">                   queue.append(node.left)</span><br><span class="line">               <span class="keyword">if</span> node.right:</span><br><span class="line">                   queue.append(node.right)</span><br><span class="line">           depth+=<span class="number">1</span></span><br><span class="line">       <span class="keyword">return</span> depth</span><br></pre></td></tr></table></figure>
<p>DFS</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxdepth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Math.max(maxdepth(root.left),maxdepth(root.right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BFS</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> Deque&lt;&gt;();</span><br><span class="line">	deque.offer(root);</span><br><span class="line">	<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">		<span class="keyword">int</span> size=duque.size();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">			TreeNode tn=de.poll();</span><br><span class="line">			<span class="keyword">if</span>(tn.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				deque.offer(tn.left);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(tn.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				deque.offer(tn.right);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2021/08/23/%E6%A0%88/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MyList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> MyList:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span>  :</span><br><span class="line">        s.append(i)</span><br><span class="line">    <span class="keyword">elif</span> s[i] <span class="keyword">and</span> flag&gt;=<span class="number">0</span>:</span><br><span class="line">        s.append(i)</span><br><span class="line">        flag=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> s[-<span class="number">1</span>] - <span class="number">1</span> == i <span class="keyword">and</span> flag&lt;=<span class="number">0</span>:</span><br><span class="line">        s.append(i)</span><br><span class="line">        flag=-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt;= <span class="number">2</span>:</span><br><span class="line">            print(s)</span><br><span class="line">        s = []    <span class="comment"># 清空</span></span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">        s.append(i)  <span class="comment"># 入栈</span></span><br><span class="line"><span class="comment"># 最后一轮，需判断下</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s) &gt;= <span class="number">2</span>:</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure>
<p>数组，不是显式的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">calculate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        Stack stk=<span class="keyword">new</span> Stack();</span><br><span class="line"><span class="comment">//        // 定义一个栈</span></span><br><span class="line"><span class="comment">//        Stack&lt;Integer&gt; stk;</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> sign=<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c= s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">                num=num*<span class="number">10</span>+(c-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Character.isDigit(c)|| i==s.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">switch</span> (sign)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        stk.push(num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        stk.push(-num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sign=c;</span><br><span class="line">                num=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stk.empty())&#123;</span><br><span class="line">            res+= (<span class="keyword">int</span>) stk.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;52-32&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> out=calculate(s);</span><br><span class="line">        System.out.println(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/02/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><p>runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p>
<p>runoo<em>b，可以匹配 runob、runoob、runoooooob 等，</em> 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p>
<p>colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</p>
<p>[0-9] 匹配一个数字<br>星号 匹配0个或多个字符</p>
<p>[\s\S]*是完全通配的意思；</p>
<p>“[ ]”是范围描述符。</p>
<p>\s是指空白，包括空格、换行、tab缩进等所有的空白，而\S刚好相反，这样一正一反下来，就表示所有的字符，完全的，一字不漏的。</p>
<p>另外，[]这个符号，表示在它里面包含的单个字符不限顺序的出现，比如：<br>[ace]*—这表示，只要出现a/c/e这三个任意的字母，都会被匹配；<br>[\s]—表示，只要出现空白就匹配；<br>[\S]—表示，非空白就匹配；</p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>开始 上三角<br>结束 美元符号<br>花括号 特定的 匹配字符串<br>杠w星表示匹配字母，其中星号表示0个或者多个。</p>
]]></content>
  </entry>
  <entry>
    <title>爬取二手房</title>
    <url>/2021/02/13/%E7%88%AC%E5%8F%96%E4%BA%8C%E6%89%8B%E6%88%BF/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#http://esf.0515fc.cn/esf-1-1-0-0-0-0-0-0-0-0-.html 网址</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;from鹤鸣亭&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line">table.write(table_row, <span class="number">0</span>, <span class="string">&#x27;名称&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">1</span>, <span class="string">&#x27;面积&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">2</span>, <span class="string">&#x27;户型&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">3</span>, <span class="string">&#x27;楼层&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">4</span>,<span class="string">&#x27;装修&#x27;</span>)  <span class="comment"># 将,,写</span></span><br><span class="line">table_row = table_row + <span class="number">1</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">page=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> page&lt;<span class="number">11</span>:</span><br><span class="line">    url = <span class="string">&quot;http://esf.0515fc.cn/esf-&quot;</span> + <span class="built_in">str</span>(page) + <span class="string">&quot;-1-0-0-0-0-0-0-0-0-.html&quot;</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    <span class="comment"># text = r.text.encode(&#x27;iso-8859-1&#x27;).decode(&#x27;gbk&#x27;)</span></span><br><span class="line">    bs = BeautifulSoup(r.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    homes = bs.find(<span class="string">&#x27;ul&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;ershou_list&#x27;</span>&#125;).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    <span class="comment"># for i in homes:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> homes:</span><br><span class="line">        print(<span class="built_in">type</span>(i))</span><br><span class="line">        home_title = i.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;title fl ellipsis&#x27;</span>&#125;).text</span><br><span class="line">        print(home_title)</span><br><span class="line">        table.write(table_row, <span class="number">0</span>, home_title)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        cont1 = i.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;font&#x27;</span>&#125;)[<span class="number">0</span>].text</span><br><span class="line">        cont2 = i.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;font&#x27;</span>&#125;)[<span class="number">2</span>].text</span><br><span class="line">        mianji = cont1.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        mianji = <span class="string">&quot;&quot;</span>.join(mianji.split())</span><br><span class="line">        print(mianji)</span><br><span class="line">        table.write(table_row, <span class="number">1</span>, mianji)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        huxing = cont1.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        huxing = <span class="string">&quot;&quot;</span>.join(huxing.split())</span><br><span class="line">        print(huxing)</span><br><span class="line">        table.write(table_row, <span class="number">2</span>, huxing)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        louceng = cont1.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">        louceng = <span class="string">&quot;&quot;</span>.join(louceng.split())</span><br><span class="line">        print(louceng)</span><br><span class="line">        table.write(table_row, <span class="number">3</span>, louceng)  <span class="comment"># 将,,写入</span></span><br><span class="line"></span><br><span class="line">        zhuangxiu = cont1.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line">        zhuangxiu = <span class="string">&quot;&quot;</span>.join(zhuangxiu.split())</span><br><span class="line">        print(zhuangxiu)</span><br><span class="line">        table.write(table_row, <span class="number">4</span>, zhuangxiu)  <span class="comment"># 将,,写</span></span><br><span class="line">        table_row = table_row + <span class="number">1</span></span><br><span class="line">    page = page + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(cont1.split(&#x27;|&#x27;))</span></span><br><span class="line">file.save(<span class="string">&#x27;二手房信息.xls&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取某平台各个公司统计状态的几种思路</title>
    <url>/2021/02/13/%E7%88%AC%E5%8F%96%E6%9F%90%E5%B9%B3%E5%8F%B0%E5%90%84%E4%B8%AA%E5%85%AC%E5%8F%B8%E7%BB%9F%E8%AE%A1%E7%8A%B6%E6%80%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>1.需要登录<br>2.登陆后，需要点击特定功能模块<br>3.需要选择下拉框，选好时间后，进行查询</p>
<h1 id="尝试1-senlenium"><a href="#尝试1-senlenium" class="headerlink" title="尝试1 senlenium"></a>尝试1 senlenium</h1><p>senlenium爬取,需要处理下拉框，比较复杂<br>好处是可以登录，解决方法是，time.sleep(10),手动输入查询条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>下一步：下拉框的处理</p>
<h1 id="尝试2-http请求"><a href="#尝试2-http请求" class="headerlink" title="尝试2 http请求"></a>尝试2 http请求</h1><p>要不看看接口发的啥，直接改接口发包更快<br>如果你发查询的请求需要身份验证，看看要带什么参数，能不能模拟生成，如果要cookie，就登录一次，把cookie加上去模拟请求查询，能用一段时间，风控不严的站这样就齐活了<br>post出来的response不太对劲<br>可能原因<br>1.post参数不对<br>2.cookie 请求头不对，需要登录<br>找到为什么不对</p>
<h1 id="尝试3-手动-自动"><a href="#尝试3-手动-自动" class="headerlink" title="尝试3 手动+自动"></a>尝试3 手动+自动</h1><p>直接F12得到response的json，进行解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">cont=f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">print(cont)</span><br><span class="line">print(<span class="built_in">type</span>(cont))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = demjson.decode(cont)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br><span class="line"></span><br><span class="line">value=data[<span class="string">&#x27;ROOT&#x27;</span>]</span><br><span class="line">print(value)</span><br><span class="line">print(<span class="built_in">type</span>(value))</span><br><span class="line">print(<span class="built_in">len</span>(value))</span><br><span class="line"></span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;输出结果&#x27;</span>)</span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line">table.write(table_row, <span class="number">0</span>, <span class="string">&#x27;编码&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">1</span>, <span class="string">&#x27;公司&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">2</span>, <span class="string">&#x27;状态&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table_row=table_row+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> value:</span><br><span class="line">    print(row)</span><br><span class="line">    print(<span class="built_in">type</span>(row))</span><br><span class="line">    bianma=row[<span class="string">&#x27;ZBPCTYGSDM&#x27;</span>]</span><br><span class="line">    name=row[<span class="string">&#x27;ZBPCTYGSMC&#x27;</span>]</span><br><span class="line">    zhuangtai=row[<span class="string">&#x27;ZLOCK&#x27;</span>]</span><br><span class="line">    table.write(table_row,<span class="number">0</span>,bianma)</span><br><span class="line">    table.write(table_row, <span class="number">1</span>, name)</span><br><span class="line">    table.write(table_row, <span class="number">2</span>, zhuangtai)</span><br><span class="line">    table_row=table_row+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">file.save(<span class="string">&#x27;查询结果.xls&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关键str转字典，因为key应该也有引号，json.loads()会报错<br>data = demjson.decode(cont)</p>
]]></content>
  </entry>
  <entry>
    <title>爬虫request疫情实时数据</title>
    <url>/2021/02/13/%E7%88%AC%E8%99%ABrequest%E7%88%AC%E5%8F%96%E7%96%AB%E6%83%85%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">myurl=<span class="string">&quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&quot;</span></span><br><span class="line">respoonse=requests.get(myurl)</span><br><span class="line"></span><br><span class="line">myrawjson=respoonse.json()</span><br><span class="line">mydata=json.loads(myrawjson[<span class="string">&#x27;data&#x27;</span>])[<span class="string">&quot;areaTree&quot;</span>][<span class="number">0</span>][<span class="string">&quot;children&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_data=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mydata:</span><br><span class="line">    new_data[i[<span class="string">&#x27;name&#x27;</span>]]=i[<span class="string">&#x27;total&#x27;</span>][<span class="string">&#x27;confirm&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name=new_data.keys()</span><br><span class="line">num=new_data.values()</span><br><span class="line">print(<span class="built_in">zip</span>(name,num))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(name,num):</span><br><span class="line">    print(<span class="built_in">list</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_maps</span>():</span></span><br><span class="line">    myMap=Map()</span><br><span class="line">    myMap.add(</span><br><span class="line">        <span class="string">&#x27;疫情地图&#x27;</span>,</span><br><span class="line">        [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(new_data.keys(), new_data.values())],</span><br><span class="line">        <span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">        is_map_symbol_show=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">    myMap.set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(</span><br><span class="line">            title=<span class="string">&quot;sss&quot;</span></span><br><span class="line">        ),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(</span><br><span class="line">            is_piecewise=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    myMap.render(<span class="string">&#x27;fs.html&#x27;</span>)</span><br><span class="line">new_maps()</span><br></pre></td></tr></table></figure>
<p>获取json数据 通过F2，network，筛选view的响应<br>解析获取的数据，多用print,和print(type()),层层逼近，注意格式，字符串格式转化成字典格式。list格式输出[0][1]等试一下<br>通过for 循环获取list内容，通过重构字典，重构数据，还可以通过zip重构成元组，再转化成list。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python与多线程</title>
    <url>/2021/02/13/%E7%88%AC%E8%99%AB%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>1.文字，表格<br>2.图片<br>3.文件</p>
<h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫与http</title>
    <url>/2021/02/13/%E7%88%AC%E8%99%AB%E4%B8%8Ehttp/</url>
    <content><![CDATA[<p>resp.text返回的是Unicode型的数据。<br>resp.content返回的是bytes型也就是二进制的数据。<br>resp.json()返回的是json格式数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://chongqing.anjuke.com/esf-ajax/property/info/pc/area/business/?city_id=20&amp;page_size=10&amp;area_id=2359&amp;from=sale_map&amp;page=1&amp;select_type=0&#x27;</span></span><br><span class="line">header=&#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,<span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://chongqing.anjuke.com/sale/yubei/?from=sale_map&#x27;</span>&#125;</span><br><span class="line">mycookie=&#123;<span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;sessid=FA5DADAA-F544-92CD-A106-A505D73579B3; aQQ_ajkguid=5EB6A80A-859A-16C5-39D8-323C1810F941; id58=e87rkF/chwKQr/OBBT+KAg==; _ga=GA1.2.1522895678.1608288003; 58tj_uuid=f6cdd636-2fbf-4763-9760-b1e34553d784; als=0; xxzl_cid=5dfe5c053c18490d9b04b8276a974eb3; xzuid=1135c1b7-88af-4876-8383-a8384eb80dc0; ctid=20; twe=2; _gid=GA1.2.25214172.1611587986; new_uv=2; obtain_by=2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">res=requests.get(url=url,headers=header,cookies=mycookie)</span><br><span class="line">print(res.json())</span><br></pre></td></tr></table></figure>
<p>注意点：<br>1.要写cookie，即使不用登录，否则python返回的json要少很多内容<br>2.headers和cookies,都是字典形，键值对，都加引号<br>3.浏览器F12返回的。可以用在线json解析网站，先看下内容</p>
<p>更好的方法是把html爬下来，再用美丽汤或者etree解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://chongqing.anjuke.com/esf-ajax/property/info/pc/area/business/?city_id=20&amp;page_size=10&amp;area_id=2359&amp;from=sale_map&amp;page=1&amp;select_type=0&#x27;</span></span><br><span class="line">header=&#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,<span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://chongqing.anjuke.com/sale/yubei/?from=sale_map&#x27;</span>&#125;</span><br><span class="line">mycookie=&#123;<span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;sessid=FA5DADAA-F544-92CD-A106-A505D73579B3; aQQ_ajkguid=5EB6A80A-859A-16C5-39D8-323C1810F941; id58=e87rkF/chwKQr/OBBT+KAg==; _ga=GA1.2.1522895678.1608288003; 58tj_uuid=f6cdd636-2fbf-4763-9760-b1e34553d784; als=0; xxzl_cid=5dfe5c053c18490d9b04b8276a974eb3; xzuid=1135c1b7-88af-4876-8383-a8384eb80dc0; ctid=20; twe=2; _gid=GA1.2.25214172.1611587986; new_uv=2; obtain_by=2&#x27;</span>&#125;</span><br><span class="line">res=requests.get(url=url,headers=header,cookies=mycookie)</span><br><span class="line"></span><br><span class="line">url2=<span class="string">&#x27;https://chongqing.anjuke.com/sale/yubei/?from=sale_map#&#x27;</span></span><br><span class="line">res2=requests.get(url=url2,headers=header,cookies=mycookie)</span><br><span class="line"><span class="comment"># print(res2.json())</span></span><br><span class="line">myhtml=res2.text</span><br><span class="line">print(myhtml)</span><br></pre></td></tr></table></figure>
<p>二手房，51job，电影等类似的网页都是爬html，而不是通过数据接口。</p>
]]></content>
  </entry>
  <entry>
    <title>爬虫美丽汤大学排名</title>
    <url>/2021/02/13/%E7%88%AC%E8%99%AB%E7%BE%8E%E4%B8%BD%E6%B1%A4%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<p>创建 Beautiful Soup对象   soup = BeautifulSoup(html，’html.parser’) </p>
<p>标签树的下行遍历<br>.contents 子节点的列表，将<tag>所有儿子节点存入列表<br>.children 子节点的迭代类型，与.contents类似，用于循环遍历儿子节点<br>.descendants 子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</p>
<p>标签树的上行遍<br>.parent 节点的父亲标签<br>.parents 节点先辈标签的迭代类型，用于循环遍历先辈节点</p>
<p>标签树的平行遍历<br>.next_sibling 返回按照HTML文本顺序的下一个平行节点标签<br>.previous_sibling 返回按照HTML文本顺序的上一个平行节点标签<br>.next_siblings 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签<br>.previous_siblings 迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</p>
<p>程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gethtml</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(<span class="string">&#x27;https://www.shanghairanking.cn/rankings/bcur/2020&#x27;</span>)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        demo = r.text</span><br><span class="line">        <span class="keyword">return</span> demo</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totable</span>(<span class="params">html</span>):</span></span><br><span class="line">    data=pd.DataFrame()</span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    temp=soup.find(<span class="string">&#x27;tbody&#x27;</span>).children</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> temp:</span><br><span class="line">        tds = tr(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">        <span class="built_in">list</span>=[[tds[<span class="number">0</span>].text.strip().replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>),tds[<span class="number">1</span>].text.strip().replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>),tds[<span class="number">4</span>].text.strip().replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)]]</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)&gt;<span class="number">0</span>):</span><br><span class="line">            data=data.append(<span class="built_in">list</span>,ignore_index=<span class="literal">True</span>)</span><br><span class="line">    data.columns=[<span class="string">&#x27;排名&#x27;</span>,<span class="string">&#x27;学校名称&#x27;</span>,<span class="string">&#x27;总分&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">html=gethtml()</span><br><span class="line"><span class="built_in">list</span>=[]</span><br><span class="line">data=totable(html)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>登录页面制作</title>
    <url>/2021/02/13/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="VS使用"><a href="#VS使用" class="headerlink" title="VS使用"></a>VS使用</h1><p>注释<br>选中代码，ctrl+K，然后ctrl+c；<br>页面的实时预览<br>open with live server配合brower preview使用</p>
]]></content>
  </entry>
  <entry>
    <title>第一个VUEdemo</title>
    <url>/2021/02/13/%E7%AC%AC%E4%B8%80%E4%B8%AAVUEdemo/</url>
    <content><![CDATA[<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>从nodejs官网下载安装，验证：命令行中，node-v出现版本号，说明成功。</p>
<h1 id="安装npm的国内镜像"><a href="#安装npm的国内镜像" class="headerlink" title="安装npm的国内镜像"></a>安装npm的国内镜像</h1><p>node环境中包括，npm包管理器，由于国外，网速问题，我们安装国内镜像<br>命令行中，<br>npm install -g cnpm -registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a><br>然后可以用cnpm来代替cpm安装依赖包</p>
<h1 id="安装vue-cli脚手架构建工具"><a href="#安装vue-cli脚手架构建工具" class="headerlink" title="安装vue-cli脚手架构建工具"></a>安装vue-cli脚手架构建工具</h1><p>命令行<br>cnpm install -g vue-cli</p>
<h1 id="用vue-cli构建项目"><a href="#用vue-cli构建项目" class="headerlink" title="用vue-cli构建项目"></a>用vue-cli构建项目</h1><p>选择一个目录放项目，命令行转到该目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack firstVue</span><br></pre></td></tr></table></figure>
<p>意思是初始化一个项目，利用的是webpack打包和压缩。<br>然后按照提示输入选项</p>
<h1 id="安装项目所需的依赖"><a href="#安装项目所需的依赖" class="headerlink" title="安装项目所需的依赖"></a>安装项目所需的依赖</h1><p>cd 到项目文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure>
<p>项目目录firstVue中多出一个node_modules的文件夹，就是项目所需的依赖包资源。</p>
<h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><p>在项目目录中,运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>今天犯了三个错误<br>1.src写错了<br>2.script没有写到head中，也没有写到boby内<br>3.有中文的空格，需要在调试中看报错。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>知网查询标题</title>
    <url>/2021/02/13/%E7%9F%A5%E7%BD%91%E6%9F%A5%E8%AF%A2%E6%A0%87%E9%A2%98/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="查询思路"><a href="#查询思路" class="headerlink" title="查询思路"></a>查询思路</h1><p>senlenium 模拟人的操作去查询，而非借助request</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>安装chrome driver驱动，并放置指定位置<br>通过geturl是否成功进行测试</p>
<h1 id="如何定位元素："><a href="#如何定位元素：" class="headerlink" title="如何定位元素："></a>如何定位元素：</h1><p>可以通过xpath，F12 copy自动粘贴xpath，不用自己去分析，就可以找到元素</p>
<h1 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h1><p>#代码与 程序优化<br>节约时间 geturl不用每次都执行，只执行一次<br>需要刷新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> getSS</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">data1=pd.read_excel(<span class="string">&#x27;./data/data3.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># data2=pd.read_excel(&#x27;./data/题目抓取（第二部分）.xlsx&#x27;)</span></span><br><span class="line">dfS=data1</span><br><span class="line"></span><br><span class="line">file =xlwt.Workbook() <span class="comment">#新建一个excel</span></span><br><span class="line">table=file.add_sheet(<span class="string">&#x27;输出结果&#x27;</span>)</span><br><span class="line">table_row=<span class="number">0</span><span class="comment">#这是行数，从0行开始写</span></span><br><span class="line">table.write(table_row, <span class="number">0</span>, <span class="string">&#x27;姓名&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">1</span>, <span class="string">&#x27;导师&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">2</span>, <span class="string">&#x27;题目&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table.write(table_row, <span class="number">3</span>, <span class="string">&#x27;日期&#x27;</span>)  <span class="comment"># 将,,写入</span></span><br><span class="line">table_row=table_row+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dfS=pd.concat([data1,data2],axis=0,ignore_index=True)</span></span><br><span class="line">college=<span class="string">&#x27;吉林大学&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开网址</span></span><br><span class="line">chromeDriver = <span class="string">&quot;D:\\chromedriver_win32\\chromedriver.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=chromeDriver)</span><br><span class="line">url = <span class="string">&#x27;https://kns.cnki.net/kns8/AdvSearch?dbprefix=SCDB&amp;&amp;crossDbcodes=CJFQ%2CCDMD%2CCIPD%2CCCND%2CCISD%2CSNAD%2CBDZK%2CCJFN%2CCCJD&#x27;</span></span><br><span class="line">driver.get(url=url)</span><br><span class="line">time.sleep(<span class="number">1</span>)  <span class="comment"># 休眠2秒</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dfS)):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    <span class="comment"># print(dfS.iloc[i,0])</span></span><br><span class="line">    <span class="comment"># print(dfS[i, 1])</span></span><br><span class="line">    author=dfS.iloc[i, <span class="number">0</span>]</span><br><span class="line">    tutor=dfS.iloc[i, <span class="number">1</span>]</span><br><span class="line">    <span class="comment"># college=&#x27;吉林大学&#x27;</span></span><br><span class="line"></span><br><span class="line">    result=getSS.getSS(driver,author,college)</span><br><span class="line">    title=result[<span class="number">0</span>]</span><br><span class="line">    date=result[<span class="number">1</span>]</span><br><span class="line">    print(table_row)</span><br><span class="line">    table.write(table_row, <span class="number">0</span>, author)  <span class="comment"># 将,,写入</span></span><br><span class="line">    table.write(table_row, <span class="number">1</span>, tutor)  <span class="comment"># 将,,写入</span></span><br><span class="line">    table.write(table_row, <span class="number">2</span>, title)  <span class="comment"># 将,,写入</span></span><br><span class="line">    table.write(table_row, <span class="number">3</span>, date)  <span class="comment"># 将,,写入</span></span><br><span class="line">    table_row=table_row+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(table_row==<span class="number">98</span>):</span><br><span class="line">        file.save(<span class="string">&#x27;查询结果3部分.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file.save(<span class="string">&#x27;查询结果3.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSS</span>(<span class="params">driver,author,college</span>):</span></span><br><span class="line">    driver.refresh()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;gradetxt&quot;]/dd[2]/div[2]/input&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;gradetxt&quot;]/dd[2]/div[2]/input&#x27;</span>).send_keys(author)</span><br><span class="line"></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;gradetxt&quot;]/dd[3]/div[2]/input&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;gradetxt&quot;]/dd[3]/div[2]/input&#x27;</span>).send_keys(college)</span><br><span class="line"></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;/html/body/div[4]/div/div[2]/div/div[1]/div[1]/div[2]/div[2]/input&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)  <span class="comment"># 休眠2秒</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        title = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;gridTable&quot;]/table/tbody/tr/td[2]/a&#x27;</span>).text</span><br><span class="line">        date= driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;gridTable&quot;]/table/tbody/tr/td[5]&#x27;</span>).text</span><br><span class="line">        print(title)</span><br><span class="line">        print(date)</span><br><span class="line">        result=[title,date]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        date=<span class="string">&#x27;未找到&#x27;</span></span><br><span class="line">        title=<span class="string">&#x27;未找到&#x27;</span></span><br><span class="line">        result = [title, date]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># time.sleep(0.2)</span></span><br><span class="line">        <span class="comment"># driver.quit()</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>1.查多<br>2.查无  try<br>3.登录，无账号，但是自动记住</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫，自动化，实例</tag>
      </tags>
  </entry>
  <entry>
    <title>算法游戏与经典算法问题</title>
    <url>/2021/02/13/%E7%AE%97%E6%B3%95%E6%B8%B8%E6%88%8F%E4%B8%8E%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h1><p>问题描述：<br>一个棋局八乘以八的棋局，要放置8个皇后，让彼此不攻击，需要怎么放置？<br>攻击：在一行，一列，或者一条斜线就是攻击</p>
<h1 id="华容道问题"><a href="#华容道问题" class="headerlink" title="华容道问题"></a>华容道问题</h1><h1 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h1><h1 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h1><h1 id="骑士周游列国问题"><a href="#骑士周游列国问题" class="headerlink" title="骑士周游列国问题"></a>骑士周游列国问题</h1><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h1 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h1><p>一个主题的线下活动，女生比例是30%，是否说明女生不爱参加线下活动？<br>不能，影响因素至少有两个，一个是首先关注特定主题，其次是关注特定主题的前提下爱参加活动，[条件概率]男女比例差异体现在了是否关注特定主题。<br>而且，结合更广泛的补充，恰恰相反，女生更热衷于参加活动。</p>
<h1 id="辛普森悖论"><a href="#辛普森悖论" class="headerlink" title="辛普森悖论"></a>辛普森悖论</h1><p>在某个条件下的两组数据，分别讨论时都会满足某种性质，可是一旦合并考虑，却可能导致相反的结论。<br>在某些前提下有时会产生的一种现象：<br>1.有组间差异<br>2.两个组占比不均衡</p>
<p>当指标是一个均值或比例时，子模块的指标变化可能和总体的变化不一致，比如子模块的指标上升了，总体的指标却下降了。<br>某APP的每日人均发帖量 = 每日总贴数 / 总人数。现在发现这个指标下降了，我们按用户的手机类型做个拆分：安卓客户端和苹果客户端，却发现：两个客户端的人均发帖量都上升了</p>
<h1 id="三门问题"><a href="#三门问题" class="headerlink" title="三门问题"></a>三门问题</h1><p>这个”三门”问题的结果为什么会违反大多数人的直觉？如果主持人先打开一扇空门，剩下两扇门中任何一个有车的可能性都是50%，但为什么我先选择一下，主持人再开门，却能改变另两扇门后有车的可能性呢？主持人开门的瞬间发生了什么？<br>要回答这个问题，我们可以把三扇门换成n扇门，这样更容易看清楚这个问题的本质。把它想成有十个门，而主持人在选后打开其中八个不通的门，就容易理解多了。<br>“三门”问题的本质是：主持人排除一扇空门为你二次选择带来的获奖概率增幅大于你损失掉的第一次选择时获奖的概率。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学与spss</title>
    <url>/2022/02/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%8Espss/</url>
    <content><![CDATA[<h1 id="1-描述统计"><a href="#1-描述统计" class="headerlink" title="1.描述统计"></a>1.描述统计</h1><p>描述一组数据的集中和离散情况。</p>
<h1 id="2-相关"><a href="#2-相关" class="headerlink" title="2.相关"></a>2.相关</h1><ul>
<li><p>相关</p>
<p>相关性和显著性检验是两个不同的概念，但是显著性检验在这里就能说明相关性（相关强度、方向）的产生是不是偶然因素导致的。<br>原假设：假设变量之间的相关性为零。</p>
</li>
</ul>
<p>如果P&lt;0.05，则说明【变量之间的相关性为零】这个假设不成立，出现这个情况的概率微乎其微，反之，我们在95%的置信度下可以粗暴认为变量之间是存在相关性的，即相关性显著（哪怕是比较小的相关系数）。如果P&gt;0.05，那么【变量之间的相关性为零】这件事被接受，不能否定，则说明变量间的相关性不显著。</p>
<ul>
<li>偏相关<h1 id="3-回归"><a href="#3-回归" class="headerlink" title="3.回归"></a>3.回归</h1>前提是相关性显著</li>
</ul>
<h1 id="4-T检验"><a href="#4-T检验" class="headerlink" title="4.T检验"></a>4.T检验</h1><p>独立样本T检验</p>
]]></content>
      <categories>
        <category>统计学</category>
      </categories>
      <tags>
        <tag>spss</tag>
      </tags>
  </entry>
  <entry>
    <title>自治ocr软件</title>
    <url>/2021/02/13/%E8%87%AA%E5%88%B6ocr%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyboard</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;</span></span><br><span class="line">APP_ID = <span class="string">&#x27;&#x27;</span></span><br><span class="line">API_KEY = <span class="string">&#x27;&#x27;</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    keyboard.wait(hotkey=<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line">    keyboard.wait(hotkey=<span class="string">&#x27;ctrl+c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 从剪切板中获取图片</span></span><br><span class="line">    image = ImageGrab.grabclipboard()</span><br><span class="line">    image.save(<span class="string">&#x27;mypic.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 读取图片 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># def get_file_content(filePath):</span></span><br><span class="line">    <span class="comment">#     with open(filePath, &#x27;rb&#x27;) as fp:</span></span><br><span class="line">    <span class="comment">#         return fp.read()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mypic.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        image = file.read()</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 调用通用文字识别, 图片参数为本地图片 &quot;&quot;&quot;</span></span><br><span class="line">        text = client.basicGeneral(image)</span><br><span class="line">        <span class="comment"># print(text)</span></span><br><span class="line">        res = text[<span class="string">&#x27;words_result&#x27;</span>]</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="comment"># print(type(res))</span></span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">            print(i[<span class="string">&#x27;words&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>自动化脚本</title>
    <url>/2021/05/25/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="网页自动化"><a href="#网页自动化" class="headerlink" title="网页自动化"></a>网页自动化</h1><p>selenium<br>问题1：我需要直接访问一个网页，但是需要登录，同时从登录页面到我想要的页面点击和操作比较多，应该怎么办？<br>首先需要登录，<br>其次登录后，可以直接访问目标url 这样就不用层层点击进去<br>不用手动处理cookie等</p>
<p>问题2：xpath是唯一的吗？<br>xpath是唯一的，找元素比较方便，可以不看原网页的结构，直接dopy Xpath</p>
<p>问题3：怎么处理弹出框，F12找不到弹出框的元素？<br>在控制台中，冻结页面<br>setTimeout(function(){debugger},5000) 可以找到弹出框的元素</p>
<p>问题4：为什么弹出框的部分元素xpath获取不到，但是通过id可以获取到？<br>不知道，找不到原因的时候可以换一种方式多试试。</p>
<p>问题5：过滤后面的框，在第二次的时候不能有默认值，需要清空，怎么办？<br>发现过滤后面的框，clear(),不行，但是另外一个元素表格中的内容input是可以clear的。<br>通过先全选，再输入值的方式可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ele2.send_keys(Keys.CONTROL+&#39;a&#39;)</span><br><span class="line">ele2.send_keys(ma)</span><br></pre></td></tr></table></figure>
<p>问题6： 在同一台电脑上，selenium运行的时候，我可以干其他事情吗？<br>selenium前台运行时不可以，会有干扰【实际经验】<br>比如说你点击了下拉框，但是你去操作鼠标了，可能下拉框就因为你的移动而关掉了。就没下拉框，也会有影响。</p>
<p>弄成selenuim后台运行，不弹出浏览器的模式。【也就是无头模式】，如果不用headless，定位会飞。</p>
<p>问题7：另外可不可以，程序进行到一半的时候，time. sleep比较长的时间，手工操作下，然后程序接着走？<br>可以？</p>
]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>RPA</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程</title>
    <url>/2021/02/16/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><p>瀑布模型很难响应需求变更，约到后面代价越大<br>开发过程中看不到结果，只有最后才能看到结果。</p>
<h2 id="技术债务"><a href="#技术债务" class="headerlink" title="技术债务"></a>技术债务</h2><h1 id="人月神话"><a href="#人月神话" class="headerlink" title="人月神话"></a>人月神话</h1><blockquote>
</blockquote>
<p>表面上看起来好像没有任何一个单独的问题会导致困难，每个都能被解决，但是当它们相互纠缠和累积在一起的时候，团队的行动就会变得越来越慢。对问题的麻烦程度，每个人似乎都会感到惊讶，并且很难看清问题的本质。不过，如果我们想解决问题，就必须试图先去理解它。</p>
<blockquote>
<p>编程为什么有趣？作为回报，它的从业者期望得到什么样的快乐？<br>首先是一种创建事物的纯粹快乐。如同小孩在玩泥巴时感到愉快一样，成年人喜欢创建事物，特别是自己进行设计。我想这种快乐是上帝创造世界的折射，一种呈现在每片独特、崭新的树叶和雪花上的喜悦！。<br>其次，快乐来自于开发对其他人有用的东西。内心深处，我们期望其他人使用我们的劳动成果，并能对他们有所帮助。从这个方面，这同小孩用粘土为“爸爸办公室”捏制铅笔盒没有本质的区别。<br>第三是整个过程体现出魔术般的力量–将相互啮合的零部件组装在一起，看到它们精妙地运行，得到预先所希望的结果。比起弹珠游戏或点唱机所具有的迷人魅力，程序化的计算机毫不逊色。<br>第四是学习的乐趣，来自于这项工作的非重复特性。人们所面临的问题，在某个或其它方面总有些不同。因而解决问题的人可以从中学习新的事物：有时是实践上的，有时是理论上的，或者兼而有之。</p>
</blockquote>
<blockquote>
</blockquote>
<p>对于系统编程人员而言，对其他人的依赖是一件非常痛苦的事情。他依靠其他人的程序，而往往这些程序设计得并不合理，实现拙劣，发布不完整（没有源代码或测试用例），或者文档记录得很糟。所以，系统编程人员不得不花费时间去研究和修改，而它们在理想情况下本应该是可靠完整的。</p>
<blockquote>
</blockquote>
<p>对于创造者，只有在实现的过程中，才能发现我们构思的不完整性和不一致性。因此，对于理论家而言，书写、试验以及“工作实现”是非常基本和必要的。</p>
<blockquote>
</blockquote>
<p>在单个的任务中，“一切都将运转正常”的假设在时间进度上具有可实现性。因为所遇的延迟是一个概率分布曲线，“不会延迟”仅具有有限的概率，所以现实情况可能会像计划安排的那样顺利。然而大型的编程工作，或多或少包含了很多任务，某些任务间还具有前后的次序，从而一切正常的概率变得非常小，甚至接近于无。</p>
<blockquote>
</blockquote>
<p>人数和时间的互换仅仅适用于以下情况：某个任务可以分解给参与人员，并且他们之间不需要相互的交流。这在割小麦或收获棉花的工作中是可行的；而在系统编程中近乎不可能。</p>
<blockquote>
</blockquote>
<p>一拥而上的开发方法是高成本的、速度缓慢的、不充分的，开发出的是无法在概念上进行集成的产品。</p>
<blockquote>
</blockquote>
<p>因为左手不知道右手在做什么，所以进度灾难、功能的不合理和系统缺陷纷纷出现。随着工作的进行，许多小组慢慢地修改自己程序的功能、规模和速度，他们明确或者隐含地更改了一些有效输入和输出结果用法上的约定。</p>
<blockquote>
</blockquote>
<p>使用项目手册的第二个原因是控制信息发布。控制信息发布并不是为了限制信息，而42是确保信息能到达所有需要它的人的手中。</p>
<blockquote>
</blockquote>
<p>项目手册的第一步是对所有的备忘录编号，从而每个工作人员可以通过标题列表来检索是否有他所需要的信息。还有一种更好的组织方法，就是使用树状的索引结构。而且如果需要的话，可以使用树结构中的子树来维护发布列表。</p>
<blockquote>
<p>处理机制。同许多其它的软件管理问题一样，随着项目规模的扩大，技术备忘录的问题以非线性趋势增长。10人的项目，文档仅仅通过简单的编号就可以了。100人的项目，若干个线性索引常常可以满足要求。1000人的项目，人员无可避免地散布在多个地点。</p>
</blockquote>
<blockquote>
<p>理解的问题可以通过持续的文档维护来解决。文档变更的强调有若干个步骤。首先，必须在页面上标记发生改变的文本，例如，使用页边上的竖线标记每行变化的文字。第二，分发的变更页附带独立的总结性文字，对变更的重要性以及批注进行记录。</p>
</blockquote>
<blockquote>
<p>卡内基一梅隆大学的D.L.Parnas提出了更彻底的解决方法。他认为，编程人员仅了解自己负责的部分，而不是整个系统的开发细节时，工作效率最高。这种方法的先决条件是精确和完整地定义所有接口。这的确是一个彻底的解决方法。如果能处理得好，的确是能解央很多“灾难”。</p>
</blockquote>
<blockquote>
<p>第二，文档能够作为同其他人的沟通渠道。项目经理常常会不断发现，许多理应被普遍认同的策略，完全不为团队的一些成员所知。正因为项目经理的基本职责是使每个人都向着相同的方向前进，所以他的主要工作是沟通，而不是做出决定。这些文档能极大地减轻他的负担。</p>
</blockquote>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2021/08/30/%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p>递归，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。递归一词还较常用于描述以自相似方法重复事物的过程。 – 维基百科</p>
<blockquote>
<p>正式定义: 在数学和计算机科学中，递归指由一种（或多种）简单的基本情况定义的一类对象或方法，并规定其他所有情况都能被还原为其基本情况。 – 维基百科</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>静态网页eTree和xpath翻页</title>
    <url>/2021/02/13/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5eTree%E5%92%8Cxpath%E7%BF%BB%E9%A1%B5/</url>
    <content><![CDATA[<p>判断是静态网站，核心思路：</p>
<h1 id="1-下载得到html"><a href="#1-下载得到html" class="headerlink" title="1.下载得到html"></a>1.下载得到html</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url)</span><br><span class="line">html = r.text</span><br></pre></td></tr></table></figure>
<h1 id="2-解析html，用xpath"><a href="#2-解析html，用xpath" class="headerlink" title="2.解析html，用xpath"></a>2.解析html，用xpath</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Selector = etree.HTML(html)</span><br><span class="line">name=Selector.xpath(<span class="string">&#x27;xpath路径&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后观察name的type，len<br>然后[0].text等<br>如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/a/h2&#x27;</span>.<span class="built_in">format</span>(i))[<span class="number">0</span>].text</span><br></pre></td></tr></table></figure>
<p>注意提取元素，有的会缺失，这时使用try，except</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">            fen = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[3]/p[1]&#x27;</span>.<span class="built_in">format</span>(i))[<span class="number">0</span>].text.strip()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">            fen = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-数据整理"><a href="#3-数据整理" class="headerlink" title="3. 数据整理"></a>3. 数据整理</h1><p>剧情,爱情,歌舞,传记 这种先将多个string转换成一个临时的list，然后将这个list转换成一个字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l + <span class="number">1</span>):</span><br><span class="line">                leixing = \</span><br><span class="line">                    Selector.xpath(</span><br><span class="line">                        <span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/div[1]/button[&#123;&#125;]/span&#x27;</span>.<span class="built_in">format</span>(i, j))[</span><br><span class="line">                        <span class="number">0</span>].text</span><br><span class="line">                temp.append(leixing)</span><br><span class="line">            leixing_out = <span class="string">&#x27;,&#x27;</span>.join(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            leixing_out = <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>
<p>a.join(b)，a是连接符，b是多个字符的list</p>
<p>得到一页的data，多个list拼接成一个dataframe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame(columns=[<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;类型&#x27;</span>, <span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;时长&#x27;</span>, <span class="string">&#x27;上映时间&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>])</span><br><span class="line"><span class="built_in">list</span> = [name, leixing_out, diqu, shichang, time, fen]</span><br><span class="line">data.loc[i - <span class="number">1</span>] = <span class="built_in">list</span></span><br></pre></td></tr></table></figure>
<p>多页通过的url服从规律<br>然后多个datagram，拼接成一个总的dataframe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res= pd.DataFrame(columns=[<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;类型&#x27;</span>, <span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;时长&#x27;</span>, <span class="string">&#x27;上映时间&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>])</span><br><span class="line">res=res.append(data,ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>最后输出成表格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.to_excel(<span class="string">&#x27;结果.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="4-所有程序"><a href="#4-所有程序" class="headerlink" title="4. 所有程序"></a>4. 所有程序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpd</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    html = r.text</span><br><span class="line">    Selector = etree.HTML(html)</span><br><span class="line"></span><br><span class="line">    data = pd.DataFrame(columns=[<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;类型&#x27;</span>, <span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;时长&#x27;</span>, <span class="string">&#x27;上映时间&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="built_in">list</span> = []</span><br><span class="line">        name = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/a/h2&#x27;</span>.<span class="built_in">format</span>(i))[<span class="number">0</span>].text</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            leixing_all = Selector.xpath(</span><br><span class="line">                <span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/div[1]/button&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            leixing_all = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        l = <span class="built_in">len</span>(leixing_all)</span><br><span class="line"></span><br><span class="line">        leixing_out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l + <span class="number">1</span>):</span><br><span class="line">                leixing = \</span><br><span class="line">                    Selector.xpath(</span><br><span class="line">                        <span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/div[1]/button[&#123;&#125;]/span&#x27;</span>.<span class="built_in">format</span>(i, j))[</span><br><span class="line">                        <span class="number">0</span>].text</span><br><span class="line">                temp.append(leixing)</span><br><span class="line">            leixing_out = <span class="string">&#x27;,&#x27;</span>.join(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            leixing_out = <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            diqu = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/div[2]/span[1]&#x27;</span>.<span class="built_in">format</span>(i))[</span><br><span class="line">                <span class="number">0</span>].text</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            diqu = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            shichang = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/div[2]/span[3]&#x27;</span>.<span class="built_in">format</span>(i))[</span><br><span class="line">                <span class="number">0</span>].text</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            shichang = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            time = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[2]/div[3]/span&#x27;</span>.<span class="built_in">format</span>(i))[</span><br><span class="line">                <span class="number">0</span>].text.replace(<span class="string">&#x27;上映&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time = <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fen = Selector.xpath(<span class="string">&#x27;//*[@id=&quot;index&quot;]/div[1]/div[1]/div[&#123;&#125;]/div/div/div[3]/p[1]&#x27;</span>.<span class="built_in">format</span>(i))[<span class="number">0</span>].text.strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            fen = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> = [name, leixing_out, diqu, shichang, time, fen]</span><br><span class="line">        data.loc[i - <span class="number">1</span>] = <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(columns=[<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;类型&#x27;</span>, <span class="string">&#x27;地区&#x27;</span>, <span class="string">&#x27;时长&#x27;</span>, <span class="string">&#x27;上映时间&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://ssr1.scrape.center/page/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    temp=getpd(url)</span><br><span class="line">    data=data.append(temp,ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line">data.to_excel(<span class="string">&#x27;结果.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="5-问题"><a href="#5-问题" class="headerlink" title="5.问题"></a>5.问题</h1><p>1.图片怎么爬取并保存<br>2.内页怎么爬取<br>3.用什么数据库保存这种图片+电影简介的数据？</p>
]]></content>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2021/02/13/linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="问题1：虚拟机无法登录"><a href="#问题1：虚拟机无法登录" class="headerlink" title="问题1：虚拟机无法登录"></a>问题1：虚拟机无法登录</h2><p>虚拟机自己没有开小键盘，输入密码是数据没有真实输入进去。</p>
<h2 id="问题2：XShell连接linux虚拟机"><a href="#问题2：XShell连接linux虚拟机" class="headerlink" title="问题2：XShell连接linux虚拟机"></a>问题2：XShell连接linux虚拟机</h2><p>如果不能连接，首选看linux虚拟机自身是否可以ping通宿主机等<br>点击编辑-虚拟机网络编辑器，然后编辑虚拟机的网络连接，NAT模式，并保持默认<br>不需要手动关闭DHCP【原因】<br>采用ip addr 查看虚拟机的IP信息<br>然后在XShell中填入ip信息<br>Xshell是在已有的连接中点击属性，然后修改ip的，注意点击连接。而不是直接点击已有的连接,可能是之前IP信息没有保存上</p>
<p>第二次是因为弄sftp的时候修改了sshd_config的配置，导致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service sshd start</span><br></pre></td></tr></table></figure>
<p>不成功<br>按照注释，删除掉sshd配置表中导致失败的关键几句话。</p>
<p>第三次是因为宿主机网络和共享中心的更改适配器设置中的，VMware 8被禁用。</p>
<p>有一次：<br>将虚拟网络编辑器里的 vmnet8 还原默认设置，然后登录。</p>
<h2 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h2><h3 id="3-1常用文件命令"><a href="#3-1常用文件命令" class="headerlink" title="3.1常用文件命令"></a>3.1常用文件命令</h3><p>显示文件详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure>
<p>显示隐藏文件详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure>
<p>逆向显示【默认按照文件名逆向】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -f -r</span><br></pre></td></tr></table></figure>
<p>按照时间逆向显示详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l -r -t</span><br></pre></td></tr></table></figure>
<p>同上的简单写法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -lrt</span><br></pre></td></tr></table></figure>
<p>递归显示，显示子文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -R</span><br></pre></td></tr></table></figure>

<p>绝对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path</span><br></pre></td></tr></table></figure>
<p>相对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./path</span><br></pre></td></tr></table></figure>
<p>进入/目录，根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure>
<p>返回用户家目，用户目录：主目录是用户的HOME目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<p>用户登录后在 家目录 ，可用pwd命令查看，普通用户为 /home/用户名，root用户为/root<br>根目录是在最顶端的目录<br>相当于查看有多少普通用户的家目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br></pre></td></tr></table></figure>
<p>返回上一级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
<p>返回上一层目录下的path路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../path</span><br></pre></td></tr></table></figure>
<p>linux 一切皆文件<br>ctrl+C 命令进行到一半，强制结束。<br>clear 清屏</p>
<p>在根目录下新建a目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /a</span><br></pre></td></tr></table></figure>
<p>mkdir -p 新建多级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /a/<span class="built_in">test</span>/runrun</span><br></pre></td></tr></table></figure>
<p>新建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /a.txt</span><br></pre></td></tr></table></figure>
<p>递归查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -R /a</span><br></pre></td></tr></table></figure>
<p>删除a目录，a目录必须是空的，实际中使用场景少。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmdir /a</span><br></pre></td></tr></table></figure>
<p>删除非空的目录，有提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r /a</span><br></pre></td></tr></table></figure>
<p>删除目录，并且不提示，有风险，操作前反复检查。比如这里/ 和a之间不能有空格，否则是把整个根目录下的文件全部删除了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r -f /a</span><br></pre></td></tr></table></figure>
<p>前者是源文件， 后者是目标位置，如果不加参数的话，只能复制文件，不能复制目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /a/tmp/a.txt /</span><br></pre></td></tr></table></figure>
<p>可以复制目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r /a/tmp /</span><br></pre></td></tr></table></figure>
<p>新建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /a.txt</span><br></pre></td></tr></table></figure>
<p>将文件a.txt 复制到目标目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /a.txt /tmp</span><br></pre></td></tr></table></figure>
<p>-p 保留源时间<br>-a 保留源文件的所有信息</p>
<p>mv 改名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /a.txt /b.txt</span><br></pre></td></tr></table></figure>
<p>移动+改名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /a.txt /tmp/c.txt</span><br></pre></td></tr></table></figure>
<p>星号通配符，匹配单个/多个字符<br>？通配符，匹配单个字符<br>列出所有/tmp目录下以test开头的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /tmp/<span class="built_in">test</span>*</span><br></pre></td></tr></table></figure>

<p>cat /tmp/a.txt 查看文件a.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /tmp/a.txt</span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">head -3 ./a.txt</span><br><span class="line">head -3 ./a.txt</span><br><span class="line">wc -l ./a.txt </span><br><span class="line">more ./a.txt</span><br><span class="line">tail -f ./a.txt</span><br></pre></td></tr></table></figure>
<p>head -3 ./a.txt 显示开头前三行<br>head -3 ./a.txt显示结尾后三行<br>wc -l ./a.txt 统计行数<br>more ./a.txt 查看一部分，按住空格后，再显示下一部分<br>tail -f 目标文件 实时显示文件，常用于查看日志文件，按住ctrl+c结束</p>
<h3 id="3-2压缩和解压缩"><a href="#3-2压缩和解压缩" class="headerlink" title="3.2压缩和解压缩"></a>3.2压缩和解压缩</h3><p>打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar cf /tmp/etc-backup.tar /etc</span><br></pre></td></tr></table></figure>
<p>注意：<br>1.参数前没有-<br>2.目标在前，反而源文件在后</p>
<p>打包并压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar czf /tmp/etc-backup.tar.gz  /etc</span><br></pre></td></tr></table></figure>
<p>参数有三个，czf,其中z代表压缩的意思,c代表打包，x代表解包，f指定操作类型为文件</p>
<p>解包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf /tmp/etc-backup.tar -C  /a</span><br></pre></td></tr></table></figure>

<p>查看大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -lh /tmp/etc-backip.tar</span><br></pre></td></tr></table></figure>
<h3 id="3-3-用户管理和文件权限"><a href="#3-3-用户管理和文件权限" class="headerlink" title="3.3 用户管理和文件权限"></a>3.3 用户管理和文件权限</h3><p>root 用户是超级管理员<br>普通用户只能看到自己家目录下的，和root用户开放给他的权限，无法看到别人的家目录</p>
<p>新建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd TJ</span><br><span class="line">adduser TJ cat</span><br><span class="line">id root</span><br></pre></td></tr></table></figure>
<p>更改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd TJ</span><br></pre></td></tr></table></figure>
<p>删除用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel TJ</span><br></pre></td></tr></table></figure>
<p>查看用户所属的用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/group |grep root</span><br></pre></td></tr></table></figure>
<p>用户组信息保存在/etc/group中，cat可以查看所有 ，后面加 |grep 用户名，可以筛选查看。</p>
<p>新建用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd group_name</span><br></pre></td></tr></table></figure>
<p>删除用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel group_name</span><br></pre></td></tr></table></figure>
<p>重命名用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod -n newname oldname</span><br></pre></td></tr></table></figure>
<p>在创建新用户时，将修改以下 4 个文件</p>
<ul>
<li><code>/etc/passwd</code>： 用户账户的详细信息在此文件中更新。</li>
<li><code>/etc/shadow</code>： 用户账户密码在此文件中更新。</li>
<li><code>/etc/group</code>： 新用户群组的详细信息在此文件中更新。</li>
<li><code>/etc/gshadow</code>： 新用户群组密码在此文件中更新。</li>
</ul>
<p>每个文件有三组固定的权限，分别对应拥有者，所属用户组，其他用户，这个顺序是固定的。文件的读写执行对应字母 rwx，以二进制表示就是 111，用十进制表示就是 7，<br>我们刚刚新建的文件 iphone11 的权限是 rw-rw-rw-，换成对应的十进制表示就是 666，这就表示这个文件的拥有者，所属用户组和其他用户具有读写权限，不具有执行权限。</p>
<p>向文件追加内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo bbbbb&gt;a.txt</span><br></pre></td></tr></table></figure>
<p>注意 &gt;是覆盖，&gt;&gt;是追加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -ll 文件名</span><br><span class="line">chmod 600 文件名</span><br></pre></td></tr></table></figure>
<p>切换用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - 用户名</span><br></pre></td></tr></table></figure>
<p>改变文件所属的用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown user file</span><br></pre></td></tr></table></figure>
<p>虽然本质上无论是目录结构还是操作系统内核都是存储在磁盘上的，但从逻辑上来说 Linux 的磁盘是“挂在”（挂载在）目录上的。<br>例如 /etc 应该放置设置文件，/bin 与 /sbin 则应该放置可执行文件等等。<br>针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统日志文件，/usr/share 放置共享数据等等。</p>
<p>找出/etc/目录下的所有以.list结尾的文件。<br>sudo find /etc/ -name “*.list”</p>
<h3 id="3-4软件安装"><a href="#3-4软件安装" class="headerlink" title="3.4软件安装"></a>3.4软件安装</h3><p>centOS，RedHat  yum包管理器，软件安装包格式是rpm，<br>Debian，Ubuntu使用apt包管理器，软件安装包格式是deb，<br>输入ifconfig报错<br>查看是否有命令ifconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sbin</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>如果没有，则安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure>
<p>查看文件安装路径<br>使用whersis 查看所有的文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">where is oracle</span><br></pre></td></tr></table></figure>
<p>查询运行文件所在的路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which oracle</span><br></pre></td></tr></table></figure>
<h3 id="3-5-磁盘查看命令"><a href="#3-5-磁盘查看命令" class="headerlink" title="3.5 磁盘查看命令"></a>3.5 磁盘查看命令</h3><p>查看内存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>
<p>查看文件系统的占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>
<p>最后一列是挂载的位置，挂载的涵义是类似于windows的各个盘符。</p>
<h3 id="3-6-网络命令"><a href="#3-6-网络命令" class="headerlink" title="3.6 网络命令"></a>3.6 网络命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<h2 id="4-常用技巧"><a href="#4-常用技巧" class="headerlink" title="4.常用技巧"></a>4.常用技巧</h2><p>上箭头，可以恢复你之前输入的历史命令<br>ctrl +c 可以强行终止<br>tab 补全目录，命令</p>
<p>通配符<br>星号， 0个或者多个<br>问号，一个<br>ls *.txt<br>小键盘不能用</p>
<p>一次性创建多个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch love_&#123;1..10&#125;_shiyanlou.txt</span><br></pre></td></tr></table></figure>
<p>man +命令名字，可以查看命令使用方法</p>
<h2 id="5-vim-简单使用"><a href="#5-vim-简单使用" class="headerlink" title="5. vim 简单使用"></a>5. vim 简单使用</h2><p>新建a.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /tmp/a.txt</span><br></pre></td></tr></table></figure>
<p>进入vim编辑内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /tmp/a.txt</span><br></pre></td></tr></table></figure>
<p>按住i，进入编辑模式<br>输入一些内容<br>按住esc 退出编辑模式<br>输入，冒号wq 保存</p>
<p>esc 正常模式<br>:q! 放弃改动退出<br>：wq 保存改动</p>
<p>正常模式下删除光标所在位置的字符，请按X<br>正常模式下，输入i，A可以增加文本，增加位置不一样。</p>
<p>vimtutor 非常好的教程</p>
<h2 id="6-一个实用例子shell脚本"><a href="#6-一个实用例子shell脚本" class="headerlink" title="6.一个实用例子shell脚本"></a>6.一个实用例子shell脚本</h2><p>在路径/usr下新建一个sapexport目录，一个sapbackup目录<br>在/home/下新建scrips，下新建pushdata.sh脚本<br>task1：<br>文件复制和删除：<br>将文件下sapexport下的所有内容，拷贝到sapbackup目录；<br>然后删除sapexport下的所有内容<br>注意：sapbackup目录是一个累加的，原来内容不被覆盖<br>输出语句“执行完毕”</p>
<p>task2：<br>文件移动：<br>将文件下sapexport下的所有内容，移动到sapbackup目录；<br>注意：sapbackup目录是一个累加的，原来内容不被覆盖<br>输出语句“执行完毕”</p>
<p>task3：<br>增加ftp或者sftp<br>将文件下sapexport下的所有内容，put到ftp下的特定路径下，再执行任务2的内容</p>
<p>task4：<br>增加定时任务：<br>每晚22：00定时执行，不需要手动执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">mv /usr/sapexport/* /usr/sapbackup</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行完成&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="7-定时任务"><a href="#7-定时任务" class="headerlink" title="7.定时任务"></a>7.定时任务</h2><p>列出当前用户定时服务内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<p>编辑当前用户定时任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>自动进入vim，编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<p>第一个 * 表示分钟：取值范围 0-59</p>
<p>第二个 * 表示小时：取值范围0-23</p>
<p>第三个 * 表示天数：取值范围1-31</p>
<p>第四个 * 表示月份：取值范围1-12</p>
<p>第五个 * 表示每周：取值范围0-6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 22 * * * sh /home/scrips/putdata.sh</span><br></pre></td></tr></table></figure>
<p>查看crontab执行日志,判断定时任务是否执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/spool/mail/root</span><br><span class="line">tail -f /var/spool/mail/root</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>做了定时任务后，输出会在日志里，不会在命令行终端中输出</li>
<li>如下mv命令，如果sapexport下是空的，会执行失败<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /usr/sapexport/*  /usr/sapbackup</span><br></pre></td></tr></table></figure>
<h2 id="8-进程与线程"><a href="#8-进程与线程" class="headerlink" title="8 进程与线程"></a>8 进程与线程</h2>1个程序至少有一个进程，一个进程至少有一个线程。</li>
</ol>
<p>第一个角度来看，我们可以分为用户进程与系统进程：</p>
<ul>
<li>用户进程：通过执行用户程序、应用程序或称之为内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。</li>
<li>系统进程：通过执行系统内核程序而产生的进程，比如可以执行内存资源分配和进程切换等相对底层的工作；而且该进程的运行不受用户的干预，即使是 root 用户也不能干预系统进程的运行。</li>
</ul>
<p>第二角度来看，我们可以将进程分为交互进程、批处理进程、守护进程：</p>
<ul>
<li>交互进程：由一个 shell 终端启动的进程，在执行过程中，需要与用户进行交互操作，可以运行于前台，也可以运行在后台。</li>
<li>批处理进程：该进程是一个进程集合，负责按顺序启动其他的进程。</li>
<li>守护进程：守护进程是一直运行的一种进程，在 Linux 系统启动时启动，在系统关闭时终止。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。例如 httpd 进程，一直处于运行状态，等待用户的访问。还有经常用的 cron（在 centOS 系列为 crond）进程，这个进程为 crontab 的守护进程，可以周期性的执行用户设定的某些任务。</li>
<li>top 是一个在前台执行的程序，所以执行后便进入到这样的一个交互界面，正是因为交互界面我们才可以实时的获取到系统与进程的信息。在交互界面中我们可以通过一些指令来操作和筛选。在此之前我们先来了解显示了哪些信息。</li>
</ul>
<p>我们看到 top 显示的第一排，</p>
<p>内容    解释<br>top    表示当前程序的名称<br>11:05:18    表示当前的系统的时间<br>up 8 days,17:12    表示该机器已经启动了多长时间<br>1 user    表示当前系统中只有一个用户<br>load average: 0.29,0.20,0.25    分别对应 1、5、15 分钟内 cpu 的平均负载<br>load average 在 wikipedia 中的解释是 the system load is a measure of the amount of work that a computer system is doing 也就是对当前 CPU 工作量的度量，具体来说也就是指运行队列的平均长度，也就是等待 CPU 的平均进程数相关的一个计算值。</p>
<p>我们该如何看待这个 load average 数据呢？</p>
<p>假设我们的系统是单 CPU、单内核的，把它比喻成是一条单向的桥，把 CPU 任务比作汽车。</p>
<p>load = 0 的时候意味着这个桥上并没有车，cpu 没有任何任务；<br>load &lt; 1 的时候意味着桥上的车并不多，一切都还是很流畅的，cpu 的任务并不多，资源还很充足；<br>load = 1 的时候就意味着桥已经被车给占满了，没有一点空隙，cpu 已经在全力工作了，所有的资源都被用完了，当然还好，这还在能力范围之内，只是有点慢而已；<br>load &gt; 1 的时候就意味着不仅仅是桥上已经被车占满了，就连桥外都被占满了，cpu 已经在全力工作，系统资源的用完了，但是还是有大量的进程在请求，在等待。若是这个值大于 2 表示进程请求超过 CPU 工作能力的 2 倍。而若是这个值大于 5 说明系统已经在超负荷运作了。<br>这是单个 CPU 单核的情况，而实际生活中我们需要将得到的这个值除以我们的核数来看。我们可以通过以下的命令来查看 CPU 的个数与核心数：</p>
<p>#查看物理 CPU 的个数<br>cat /proc/cpuinfo | grep “physical id” | sort | uniq |wc -l</p>
<p>#每个 cpu 的核心数<br>cat /proc/cpuinfo | grep “physical id” | grep “0” | wc -l<br>copy<br>通过上面的指数我们可以得知 load 的临界值为 1 ，但是在实际生活中，比较有经验的运维或者系统管理员会将临界值定为 0.7。这里的指数都是除以核心数以后的值，不要混淆了</p>
<p>若是 load &lt; 0.7 并不会去关注他；<br>若是 0.7&lt; load &lt; 1 的时候我们就需要稍微关注一下了，虽然还可以应付但是这个值已经离临界不远了；<br>若是 load = 1 的时候我们就需要警惕了，因为这个时候已经没有更多的资源的了，已经在全力以赴了；<br>若是 load &gt; 5 的时候系统已经快不行了，这个时候你需要加班解决问题了<br>通常我们都会先看 15 分钟的值来看这个大体的趋势，然后再看 5 分钟的值对比来看是否有下降的趋势。</p>
<p>查看 busybox 的代码可以知道，数据是每 5 秒钟就检查一次活跃的进程数，然后计算出该值，然后 load 从 /proc/loadavg 中读取的。而这个 load 的值是如何计算的呢，这是 load 的计算的源码</p>
<p>#define FSHIFT      11          /* nr of bits of precision */<br>#define FIXED_1     (1&lt;&lt;FSHIFT) /* 1.0 as fixed-point(定点) */<br>#define LOAD_FREQ   (5*HZ)      /* 5 sec intervals，每隔5秒计算一次平均负载值 */<br>#define CALC_LOAD(load, exp, n)     <br>         load *= exp;               <br>         load += n*(FIXED_1 - exp); <br>         load &gt;&gt;= FSHIFT;</p>
<p>unsigned long avenrun[3];</p>
<p>EXPORT_SYMBOL(avenrun);</p>
<p>/*</p>
<ul>
<li>calc_load - given tick count, update the avenrun load estimates.</li>
<li>This is called while holding a write_lock on xtime_lock.</li>
<li>/<br>static inline void calc_load(unsigned long ticks)<br>{<pre><code>   unsigned long active_tasks; /* fixed-point */
   static int count = LOAD_FREQ;
   count -= ticks;
   if (count &lt; 0) &#123;
           count += LOAD_FREQ;
           active_tasks = count_active_tasks();
           CALC_LOAD(avenrun[0], EXP_1, active_tasks);
           CALC_LOAD(avenrun[1], EXP_5, active_tasks);
           CALC_LOAD(avenrun[2], EXP_15, active_tasks);
   &#125;
</code></pre>
}<br>copy<br>有兴趣的朋友可以研究一下，是如何计算的。代码中的后面这部分相当于它的计算公式。</li>
</ul>
<p>我们回归正题，来看 top 的第二行数据，基本上第二行是进程的一个情况统计：</p>
<p>内容    解释<br>Tasks: 26 total    进程总数<br>1 running    1 个正在运行的进程数<br>25 sleeping    25 个睡眠的进程数<br>0 stopped    没有停止的进程数<br>0 zombie    没有僵尸进程数<br>来看 top 的第三行数据，这一行基本上是 CPU 的一个使用情况的统计了：</p>
<p>内容    解释<br>Cpu(s): 1.0%us    用户空间进程占用 CPU 百分比<br>1.0% sy    内核空间运行占用 CPU 百分比<br>0.0%ni    用户进程空间内改变过优先级的进程占用 CPU 百分比<br>97.9%id    空闲 CPU 百分比<br>0.0%wa    等待输入输出的 CPU 时间百分比<br>0.1%hi    硬中断(Hardware IRQ)占用 CPU 的百分比<br>0.0%si    软中断(Software IRQ)占用 CPU 的百分比<br>0.0%st    (Steal time) 是 hypervisor 等虚拟服务中，虚拟 CPU 等待实际 CPU 的时间的百分比<br>CPU 利用率是对一个时间段内 CPU 使用状况的统计，通过这个指标可以看出在某一个时间段内 CPU 被占用的情况，而 Load Average 是 CPU 的 Load，它所包含的信息不是 CPU 的使用率状况，而是在一段时间内 CPU 正在处理以及等待 CPU 处理的进程数情况统计信息，这两个指标并不一样。</p>
<p>来看 top 的第四行数据，这一行基本上是内存的一个使用情况的统计了：</p>
<p>内容    解释<br>8176740 total    物理内存总量<br>8032104 used    使用的物理内存总量<br>144636 free    空闲内存总量<br>313088 buffers    用作内核缓存的内存量<br>注意：</p>
<p>系统中可用的物理内存最大值并不是 free 这个单一的值，而是 free + buffers + swap 中的 cached 的和。</p>
<p>来看 top 的第五行数据，这一行基本上是交换区的一个使用情况的统计了：</p>
<p>内容    解释<br>total    交换区总量<br>used    使用的交换区总量<br>free    空闲交换区总量<br>cached    缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖<br>再下面就是进程的一个情况了</p>
<p>列名    解释<br>PID     进程 id<br>USER      该进程的所属用户<br>PR      该进程执行的优先级 priority 值<br>NI      该进程的 nice 值<br>VIRT    该进程任务所使用的虚拟内存的总数<br>RES    该进程所使用的物理内存数，也称之为驻留内存数<br>SHR    该进程共享内存的大小<br>S    该进程进程的状态: S=sleep R=running Z=zombie<br>%CPU    该进程 CPU 的利用率<br>%MEM    该进程内存的利用率<br>TIME+    该进程活跃的总时间<br>COMMAND    该进程运行的名字  </p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
